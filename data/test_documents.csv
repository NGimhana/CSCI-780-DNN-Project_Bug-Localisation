bug_id,document,url,relevancy_score
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.content.Context;import android.content.res.TypedArray;import android.graphics.drawable.Drawable;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.os.Bundle;import android.os.Parcelable;import android.util.AttributeSet;import android.util.Log;import android.view.Gravity;import android.view.MotionEvent;import android.view.View;import android.view.ViewConfiguration;import android.view.ViewGroup;import android.view.animation.DecelerateInterpolator;import android.view.animation.Interpolator;import android.widget.FrameLayout;import android.widget.LinearLayout;import com.handmark.pulltorefresh.library.internal.FlipLoadingLayout;import com.handmark.pulltorefresh.library.internal.LoadingLayout;import com.handmark.pulltorefresh.library.internal.RotateLoadingLayout;import com.handmark.pulltorefresh.library.internal.Utils;import com.handmark.pulltorefresh.library.internal.ViewCompat;public abstract class PullToRefreshBase<T extends View> extends LinearLayout implements IPullToRefresh<T> {// ===========================================================// Constants// ===========================================================static final boolean DEBUG = true;static final boolean USE_HW_LAYERS = false;static final String LOG_TAG = ""PullToRefresh"";static final float FRICTION = 2.0f;public static final int SMOOTH_SCROLL_DURATION_MS = 200;public static final int SMOOTH_SCROLL_LONG_DURATION_MS = 325;static final int DEMO_SCROLL_INTERVAL = 225;static final String STATE_STATE = ""ptr_state"";static final String STATE_MODE = ""ptr_mode"";static final String STATE_CURRENT_MODE = ""ptr_current_mode"";static final String STATE_SCROLLING_REFRESHING_ENABLED = ""ptr_disable_scrolling"";static final String STATE_SHOW_REFRESHING_VIEW = ""ptr_show_refreshing_view"";static final String STATE_SUPER = ""ptr_super"";// ===========================================================// Fields// ===========================================================private int mTouchSlop;private float mLastMotionX, mLastMotionY;private float mInitialMotionX, mInitialMotionY;private boolean mIsBeingDragged = false;private State mState = State.RESET;private Mode mMode = Mode.getDefault();private Mode mCurrentMode;T mRefreshableView;private FrameLayout mRefreshableViewWrapper;private boolean mShowViewWhileRefreshing = true;private boolean mScrollingWhileRefreshingEnabled = false;private boolean mFilterTouchEvents = true;private boolean mOverScrollEnabled = true;private boolean mLayoutVisibilityChangesEnabled = true;private Interpolator mScrollAnimationInterpolator;private AnimationStyle mLoadingAnimationStyle = AnimationStyle.getDefault();private LoadingLayout mHeaderLayout;private LoadingLayout mFooterLayout;private OnRefreshListener<T> mOnRefreshListener;private OnRefreshListener2<T> mOnRefreshListener2;private OnPullEventListener<T> mOnPullEventListener;private SmoothScrollRunnable mCurrentSmoothScrollRunnable;// At what ratio should we start considering the release-to-refresh stateprivate float mReleaseRatio = 1;// ===========================================================// Constructors// ===========================================================public PullToRefreshBase(Context context) {super(context);init(context, null);}public PullToRefreshBase(Context context, AttributeSet attrs) {super(context, attrs);init(context, attrs);}public PullToRefreshBase(Context context, Mode mode) {super(context);mMode = mode;init(context, null);}public PullToRefreshBase(Context context, Mode mode, AnimationStyle animStyle) {super(context);mMode = mode;mLoadingAnimationStyle = animStyle;init(context, null);}@Overridepublic void addView(View child, int index, ViewGroup.LayoutParams params) {if (DEBUG) {Log.d(LOG_TAG, ""addView: "" + child.getClass().getSimpleName());}final T refreshableView = getRefreshableView();if (refreshableView instanceof ViewGroup) {((ViewGroup) refreshableView).addView(child, index, params);} else {throw new UnsupportedOperationException(""Refreshable View is not a ViewGroup so can't addView"");}}@Overridepublic final boolean demo() {if (mMode.showHeaderLoadingLayout() && isReadyForPullStart()) {smoothScrollToAndBack(-getHeaderSize() * 2);return true;} else if (mMode.showFooterLoadingLayout() && isReadyForPullEnd()) {smoothScrollToAndBack(getFooterSize() * 2);return true;}return false;}@Overridepublic void setReleaseRatio(float ratio) {mReleaseRatio = ratio;}@Overridepublic final Mode getCurrentMode() {return mCurrentMode;}@Overridepublic final boolean getFilterTouchEvents() {return mFilterTouchEvents;}@Overridepublic final ILoadingLayout getLoadingLayoutProxy() {return getLoadingLayoutProxy(true, true);}@Overridepublic final ILoadingLayout getLoadingLayoutProxy(boolean includeStart, boolean includeEnd) {return createLoadingLayoutProxy(includeStart, includeEnd);}@Overridepublic final Mode getMode() {return mMode;}@Overridepublic final T getRefreshableView() {return mRefreshableView;}@Overridepublic final boolean getShowViewWhileRefreshing() {return mShowViewWhileRefreshing;}@Overridepublic final State getState() {return mState;}/*** @deprecated See {@link #isScrollingWhileRefreshingEnabled()}.*/public final boolean isDisableScrollingWhileRefreshing() {return !isScrollingWhileRefreshingEnabled();}@Overridepublic final boolean isPullToRefreshEnabled() {return mMode.permitsPullToRefresh();}@Overridepublic final boolean isPullToRefreshOverScrollEnabled() {return VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD && mOverScrollEnabled&& OverscrollHelper.isAndroidOverScrollEnabled(mRefreshableView);}@Overridepublic final boolean isRefreshing() {return mState == State.REFRESHING || mState == State.MANUAL_REFRESHING;}@Overridepublic final boolean isScrollingWhileRefreshingEnabled() {return mScrollingWhileRefreshingEnabled;}@Overridepublic final boolean onInterceptTouchEvent(MotionEvent event) {if (!isPullToRefreshEnabled()) {return false;}final int action = event.getAction();if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {mIsBeingDragged = false;return false;}if (action != MotionEvent.ACTION_DOWN && mIsBeingDragged) {return true;}switch (action) {case MotionEvent.ACTION_MOVE: {// If we're refreshing, and the flag is set. Eat all MOVE eventsif (!mScrollingWhileRefreshingEnabled && isRefreshing()) {return true;}if (isReadyForPull()) {final float y = event.getY(), x = event.getX();final float diff, oppositeDiff, absDiff;// We need to use the correct values, based on scroll// directionswitch (getPullToRefreshScrollDirection()) {case HORIZONTAL:diff = x - mLastMotionX;oppositeDiff = y - mLastMotionY;break;case VERTICAL:default:diff = y - mLastMotionY;oppositeDiff = x - mLastMotionX;break;}absDiff = Math.abs(diff);if (absDiff > mTouchSlop && (!mFilterTouchEvents || absDiff > Math.abs(oppositeDiff))) {if (mMode.showHeaderLoadingLayout() && diff >= 1f && isReadyForPullStart()) {mLastMotionY = y;mLastMotionX = x;mIsBeingDragged = true;if (mMode == Mode.BOTH) {mCurrentMode = Mode.PULL_FROM_START;}} else if (mMode.showFooterLoadingLayout() && diff <= -1f && isReadyForPullEnd()) {mLastMotionY = y;mLastMotionX = x;mIsBeingDragged = true;if (mMode == Mode.BOTH) {mCurrentMode = Mode.PULL_FROM_END;}}}}break;}case MotionEvent.ACTION_DOWN: {if (isReadyForPull()) {mLastMotionY = mInitialMotionY = event.getY();mLastMotionX = mInitialMotionX = event.getX();mIsBeingDragged = false;}break;}}return mIsBeingDragged;}@Overridepublic final void onRefreshComplete() {if (isRefreshing()) {setState(State.RESET);}}@Overridepublic final boolean onTouchEvent(MotionEvent event) {if (!isPullToRefreshEnabled()) {return false;}// If we're refreshing, and the flag is set. Eat the eventif (!mScrollingWhileRefreshingEnabled && isRefreshing()) {return true;}if (event.getAction() == MotionEvent.ACTION_DOWN && event.getEdgeFlags() != 0) {return false;}switch (event.getAction()) {case MotionEvent.ACTION_MOVE: {if (mIsBeingDragged) {mLastMotionY = event.getY();mLastMotionX = event.getX();pullEvent();return true;}break;}case MotionEvent.ACTION_DOWN: {if (isReadyForPull()) {mLastMotionY = mInitialMotionY = event.getY();mLastMotionX = mInitialMotionX = event.getX();return true;}break;}case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP: {if (mIsBeingDragged) {mIsBeingDragged = false;if (mState == State.RELEASE_TO_REFRESH&& (null != mOnRefreshListener || null != mOnRefreshListener2)) {setState(State.REFRESHING, true);return true;}// If we're already refreshing, just scroll back to the topif (isRefreshing()) {smoothScrollTo(0);return true;}// If we haven't returned by here, then we're not in a state// to pull, so just resetsetState(State.RESET);return true;}break;}}return false;}public final void setScrollingWhileRefreshingEnabled(boolean allowScrollingWhileRefreshing) {mScrollingWhileRefreshingEnabled = allowScrollingWhileRefreshing;}/*** @deprecated See {@link #setScrollingWhileRefreshingEnabled(boolean)}*/public void setDisableScrollingWhileRefreshing(boolean disableScrollingWhileRefreshing) {setScrollingWhileRefreshingEnabled(!disableScrollingWhileRefreshing);}@Overridepublic final void setFilterTouchEvents(boolean filterEvents) {mFilterTouchEvents = filterEvents;}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy()}.*/public void setLastUpdatedLabel(CharSequence label) {getLoadingLayoutProxy().setLastUpdatedLabel(label);}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy()}.*/public void setLoadingDrawable(Drawable drawable) {getLoadingLayoutProxy().setLoadingDrawable(drawable);}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy(boolean, boolean)}.*/public void setLoadingDrawable(Drawable drawable, Mode mode) {getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setLoadingDrawable(drawable);}@Overridepublic void setLongClickable(boolean longClickable) {getRefreshableView().setLongClickable(longClickable);}@Overridepublic final void setMode(Mode mode) {if (mode != mMode) {if (DEBUG) {Log.d(LOG_TAG, ""Setting mode to: "" + mode);}mMode = mode;updateUIForMode();}}public void setOnPullEventListener(OnPullEventListener<T> listener) {mOnPullEventListener = listener;}@Overridepublic final void setOnRefreshListener(OnRefreshListener<T> listener) {mOnRefreshListener = listener;mOnRefreshListener2 = null;}@Overridepublic final void setOnRefreshListener(OnRefreshListener2<T> listener) {mOnRefreshListener2 = listener;mOnRefreshListener = null;}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy()}.*/public void setPullLabel(CharSequence pullLabel) {getLoadingLayoutProxy().setPullLabel(pullLabel);}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy(boolean, boolean)}.*/public void setPullLabel(CharSequence pullLabel, Mode mode) {getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setPullLabel(pullLabel);}/*** @param enable Whether Pull-To-Refresh should be used* @deprecated This simple calls setMode with an appropriate mode based on*             the passed value.*/public final void setPullToRefreshEnabled(boolean enable) {setMode(enable ? Mode.getDefault() : Mode.DISABLED);}@Overridepublic final void setPullToRefreshOverScrollEnabled(boolean enabled) {mOverScrollEnabled = enabled;}@Overridepublic final void setRefreshing() {setRefreshing(true);}@Overridepublic final void setRefreshing(boolean doScroll) {if (!isRefreshing()) {setState(State.MANUAL_REFRESHING, doScroll);}}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy()}.*/public void setRefreshingLabel(CharSequence refreshingLabel) {getLoadingLayoutProxy().setRefreshingLabel(refreshingLabel);}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy(boolean, boolean)}.*/public void setRefreshingLabel(CharSequence refreshingLabel, Mode mode) {getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setRefreshingLabel(refreshingLabel);}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy()}.*/public void setReleaseLabel(CharSequence releaseLabel) {setReleaseLabel(releaseLabel, Mode.BOTH);}/*** @deprecated You should now call this method on the result of*             {@link #getLoadingLayoutProxy(boolean, boolean)}.*/public void setReleaseLabel(CharSequence releaseLabel, Mode mode) {getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setReleaseLabel(releaseLabel);}public void setScrollAnimationInterpolator(Interpolator interpolator) {mScrollAnimationInterpolator = interpolator;}@Overridepublic final void setShowViewWhileRefreshing(boolean showView) {mShowViewWhileRefreshing = showView;}/*** @return Either {@link Orientation#VERTICAL} or*         {@link Orientation#HORIZONTAL} depending on the scroll direction.*/public abstract Orientation getPullToRefreshScrollDirection();final void setState(State state, final boolean... params) {mState = state;if (DEBUG) {Log.d(LOG_TAG, ""State: "" + mState.name());}switch (mState) {case RESET:onReset();break;case PULL_TO_REFRESH:onPullToRefresh();break;case RELEASE_TO_REFRESH:onReleaseToRefresh();break;case REFRESHING:case MANUAL_REFRESHING:onRefreshing(params[0]);break;case OVERSCROLLING:// NO-OPbreak;}// Call OnPullEventListenerif (null != mOnPullEventListener) {mOnPullEventListener.onPullEvent(this, mState, mCurrentMode);}}/*** Used internally for adding view. Need because we override addView to* pass-through to the Refreshable View*/protected final void addViewInternal(View child, int index, ViewGroup.LayoutParams params) {super.addView(child, index, params);}/*** Used internally for adding view. Need because we override addView to* pass-through to the Refreshable View*/protected final void addViewInternal(View child, ViewGroup.LayoutParams params) {super.addView(child, -1, params);}protected LoadingLayout createLoadingLayout(Context context, Mode mode, TypedArray attrs) {LoadingLayout layout = mLoadingAnimationStyle.createLoadingLayout(context, mode,getPullToRefreshScrollDirection(), attrs);layout.setVisibility(View.INVISIBLE);return layout;}/*** Used internally for {@link #getLoadingLayoutProxy(boolean, boolean)}.* Allows derivative classes to include any extra LoadingLayouts.*/protected LoadingLayoutProxy createLoadingLayoutProxy(final boolean includeStart, final boolean includeEnd) {LoadingLayoutProxy proxy = new LoadingLayoutProxy();if (includeStart && mMode.showHeaderLoadingLayout()) {proxy.addLayout(mHeaderLayout);}if (includeEnd && mMode.showFooterLoadingLayout()) {proxy.addLayout(mFooterLayout);}return proxy;}/*** This is implemented by derived classes to return the created View. If you* need to use a custom View (such as a custom ListView), override this* method and return an instance of your custom class.* <p/>* Be sure to set the ID of the view in this method, especially if you're* using a ListActivity or ListFragment.** @param context Context to create view with* @param attrs AttributeSet from wrapped class. Means that anything you*            include in the XML layout declaration will be routed to the*            created View* @return New instance of the Refreshable View*/protected abstract T createRefreshableView(Context context, AttributeSet attrs);protected final void disableLoadingLayoutVisibilityChanges() {mLayoutVisibilityChangesEnabled = false;}protected final LoadingLayout getFooterLayout() {return mFooterLayout;}protected final int getFooterSize() {return mFooterLayout.getContentSize();}protected final LoadingLayout getHeaderLayout() {return mHeaderLayout;}protected final int getHeaderSize() {return mHeaderLayout.getContentSize();}protected int getPullToRefreshScrollDuration() {return SMOOTH_SCROLL_DURATION_MS;}protected int getPullToRefreshScrollDurationLonger() {return SMOOTH_SCROLL_LONG_DURATION_MS;}protected FrameLayout getRefreshableViewWrapper() {return mRefreshableViewWrapper;}/*** Allows Derivative classes to handle the XML Attrs without creating a* TypedArray themsevles** @param a - TypedArray of PullToRefresh Attributes*/protected void handleStyledAttributes(TypedArray a) {}/*** Implemented by derived class to return whether the View is in a state* where the user can Pull to Refresh by scrolling from the end.** @return true if the View is currently in the correct state (for example,*         bottom of a ListView)*/protected abstract boolean isReadyForPullEnd();/*** Implemented by derived class to return whether the View is in a state* where the user can Pull to Refresh by scrolling from the start.** @return true if the View is currently the correct state (for example, top*         of a ListView)*/protected abstract boolean isReadyForPullStart();/*** Called by {@link #onRestoreInstanceState(Parcelable)} so that derivative* classes can handle their saved instance state.** @param savedInstanceState - Bundle which contains saved instance state.*/protected void onPtrRestoreInstanceState(Bundle savedInstanceState) {}/*** Called by {@link #onSaveInstanceState()} so that derivative classes can* save their instance state.** @param saveState - Bundle to be updated with saved state.*/protected void onPtrSaveInstanceState(Bundle saveState) {}/*** Called when the UI has been to be updated to be in the* {@link State#PULL_TO_REFRESH} state.*/protected void onPullToRefresh() {switch (mCurrentMode) {case PULL_FROM_END:mFooterLayout.pullToRefresh();break;case PULL_FROM_START:mHeaderLayout.pullToRefresh();break;default:// NO-OPbreak;}}/*** Called when the UI has been to be updated to be in the* {@link State#REFRESHING} or {@link State#MANUAL_REFRESHING} state.** @param doScroll - Whether the UI should scroll for this event.*/protected void onRefreshing(final boolean doScroll) {if (mMode.showHeaderLoadingLayout()) {mHeaderLayout.refreshing();}if (mMode.showFooterLoadingLayout()) {mFooterLayout.refreshing();}if (doScroll) {if (mShowViewWhileRefreshing) {// Call Refresh Listener when the Scroll has finishedOnSmoothScrollFinishedListener listener = new OnSmoothScrollFinishedListener() {@Overridepublic void onSmoothScrollFinished() {callRefreshListener();}};switch (mCurrentMode) {case MANUAL_REFRESH_ONLY:case PULL_FROM_END:smoothScrollTo(getFooterSize(), listener);break;default:case PULL_FROM_START:smoothScrollTo(-getHeaderSize(), listener);break;}} else {smoothScrollTo(0);}} else {// We're not scrolling, so just call Refresh Listener nowcallRefreshListener();}}/*** Called when the UI has been to be updated to be in the* {@link State#RELEASE_TO_REFRESH} state.*/protected void onReleaseToRefresh() {switch (mCurrentMode) {case PULL_FROM_END:mFooterLayout.releaseToRefresh();break;case PULL_FROM_START:mHeaderLayout.releaseToRefresh();break;default:// NO-OPbreak;}}/*** Called when the UI has been to be updated to be in the* {@link State#RESET} state.*/protected void onReset() {mIsBeingDragged = false;mLayoutVisibilityChangesEnabled = true;// Always reset both layouts, just in case...mHeaderLayout.reset();mFooterLayout.reset();smoothScrollTo(0);}@Overrideprotected final void onRestoreInstanceState(Parcelable state) {if (state instanceof Bundle) {Bundle bundle = (Bundle) state;setMode(Mode.mapIntToValue(bundle.getInt(STATE_MODE, 0)));mCurrentMode = Mode.mapIntToValue(bundle.getInt(STATE_CURRENT_MODE, 0));mScrollingWhileRefreshingEnabled = bundle.getBoolean(STATE_SCROLLING_REFRESHING_ENABLED, false);mShowViewWhileRefreshing = bundle.getBoolean(STATE_SHOW_REFRESHING_VIEW, true);// Let super Restore Itselfsuper.onRestoreInstanceState(bundle.getParcelable(STATE_SUPER));State viewState = State.mapIntToValue(bundle.getInt(STATE_STATE, 0));if (viewState == State.REFRESHING || viewState == State.MANUAL_REFRESHING) {setState(viewState, true);}// Now let derivative classes restore their stateonPtrRestoreInstanceState(bundle);return;}super.onRestoreInstanceState(state);}@Overrideprotected final Parcelable onSaveInstanceState() {Bundle bundle = new Bundle();// Let derivative classes get a chance to save state first, that way we// can make sure they don't overrite any of our valuesonPtrSaveInstanceState(bundle);bundle.putInt(STATE_STATE, mState.getIntValue());bundle.putInt(STATE_MODE, mMode.getIntValue());bundle.putInt(STATE_CURRENT_MODE, mCurrentMode.getIntValue());bundle.putBoolean(STATE_SCROLLING_REFRESHING_ENABLED, mScrollingWhileRefreshingEnabled);bundle.putBoolean(STATE_SHOW_REFRESHING_VIEW, mShowViewWhileRefreshing);bundle.putParcelable(STATE_SUPER, super.onSaveInstanceState());return bundle;}@Overrideprotected final void onSizeChanged(int w, int h, int oldw, int oldh) {if (DEBUG) {Log.d(LOG_TAG, String.format(""onSizeChanged. W: %d, H: %d"", w, h));}super.onSizeChanged(w, h, oldw, oldh);// We need to update the header/footer when our size changesrefreshLoadingViewsSize();// Update the Refreshable View layoutrefreshRefreshableViewSize(w, h);/*** As we're currently in a Layout Pass, we need to schedule another one* to layout any changes we've made here*/post(new Runnable() {@Overridepublic void run() {requestLayout();}});}/*** Re-measure the Loading Views height, and adjust internal padding as* necessary*/protected final void refreshLoadingViewsSize() {final int maximumPullScroll = (int) (getMaximumPullScroll() * 1.2f);int pLeft = getPaddingLeft();int pTop = getPaddingTop();int pRight = getPaddingRight();int pBottom = getPaddingBottom();switch (getPullToRefreshScrollDirection()) {case HORIZONTAL:if (mMode.showHeaderLoadingLayout()) {mHeaderLayout.setWidth(maximumPullScroll);pLeft = -maximumPullScroll;} else {pLeft = 0;}if (mMode.showFooterLoadingLayout()) {mFooterLayout.setWidth(maximumPullScroll);pRight = -maximumPullScroll;} else {pRight = 0;}break;case VERTICAL:if (mMode.showHeaderLoadingLayout()) {mHeaderLayout.setHeight(maximumPullScroll);pTop = -maximumPullScroll;} else {pTop = 0;}if (mMode.showFooterLoadingLayout()) {mFooterLayout.setHeight(maximumPullScroll);pBottom = -maximumPullScroll;} else {pBottom = 0;}break;}if (DEBUG) {Log.d(LOG_TAG, String.format(""Setting Padding. L: %d, T: %d, R: %d, B: %d"", pLeft, pTop, pRight, pBottom));}setPadding(pLeft, pTop, pRight, pBottom);}protected final void refreshRefreshableViewSize(int width, int height) {// We need to set the Height of the Refreshable View to the same as// this layoutLinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) mRefreshableViewWrapper.getLayoutParams();switch (getPullToRefreshScrollDirection()) {case HORIZONTAL:if (lp.width != width) {lp.width = width;mRefreshableViewWrapper.requestLayout();}break;case VERTICAL:if (lp.height != height) {lp.height = height;mRefreshableViewWrapper.requestLayout();}break;}}/*** Helper method which just calls scrollTo() in the correct scrolling* direction.** @param value - New Scroll value*/protected final void setHeaderScroll(int value) {if (DEBUG) {Log.d(LOG_TAG, ""setHeaderScroll: "" + value);}// Clamp value to with pull scroll rangefinal int maximumPullScroll = getMaximumPullScroll();value = Math.min(maximumPullScroll, Math.max(-maximumPullScroll, value));if (mLayoutVisibilityChangesEnabled) {if (value < 0) {mHeaderLayout.setVisibility(View.VISIBLE);} else if (value > 0) {mFooterLayout.setVisibility(View.VISIBLE);} else {mHeaderLayout.setVisibility(View.INVISIBLE);mFooterLayout.setVisibility(View.INVISIBLE);}}if (USE_HW_LAYERS) {/*** Use a Hardware Layer on the Refreshable View if we've scrolled at* all. We don't use them on the Header/Footer Views as they change* often, which would negate any HW layer performance boost.*/ViewCompat.setLayerType(mRefreshableViewWrapper, value != 0 ? View.LAYER_TYPE_HARDWARE: View.LAYER_TYPE_NONE);}switch (getPullToRefreshScrollDirection()) {case VERTICAL:scrollTo(0, value);break;case HORIZONTAL:scrollTo(value, 0);break;}}/*** Smooth Scroll to position using the default duration of* {@value #SMOOTH_SCROLL_DURATION_MS} ms.** @param scrollValue - Position to scroll to*/protected final void smoothScrollTo(int scrollValue) {smoothScrollTo(scrollValue, getPullToRefreshScrollDuration());}/*** Smooth Scroll to position using the default duration of* {@value #SMOOTH_SCROLL_DURATION_MS} ms.** @param scrollValue - Position to scroll to* @param listener - Listener for scroll*/protected final void smoothScrollTo(int scrollValue, OnSmoothScrollFinishedListener listener) {smoothScrollTo(scrollValue, getPullToRefreshScrollDuration(), 0, listener);}/*** Smooth Scroll to position using the longer default duration of* {@value #SMOOTH_SCROLL_LONG_DURATION_MS} ms.** @param scrollValue - Position to scroll to*/protected final void smoothScrollToLonger(int scrollValue) {smoothScrollTo(scrollValue, getPullToRefreshScrollDurationLonger());}/*** Updates the View State when the mode has been set. This does not do any* checking that the mode is different to current state so always updates.*/protected void updateUIForMode() {// We need to use the correct LayoutParam values, based on scroll// directionfinal LinearLayout.LayoutParams lp = getLoadingLayoutLayoutParams();// Remove Header, and then add Header Loading View again if neededif (this == mHeaderLayout.getParent()) {removeView(mHeaderLayout);}if (mMode.showHeaderLoadingLayout()) {addViewInternal(mHeaderLayout, 0, lp);}// Remove Footer, and then add Footer Loading View again if neededif (this == mFooterLayout.getParent()) {removeView(mFooterLayout);}if (mMode.showFooterLoadingLayout()) {addViewInternal(mFooterLayout, lp);}// Hide Loading ViewsrefreshLoadingViewsSize();// If we're not using Mode.BOTH, set mCurrentMode to mMode, otherwise// set it to pull downmCurrentMode = (mMode != Mode.BOTH) ? mMode : Mode.PULL_FROM_START;}private void addRefreshableView(Context context, T refreshableView) {mRefreshableViewWrapper = new FrameLayout(context);mRefreshableViewWrapper.addView(refreshableView, ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);addViewInternal(mRefreshableViewWrapper, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));}private void callRefreshListener() {if (null != mOnRefreshListener) {mOnRefreshListener.onRefresh(this);} else if (null != mOnRefreshListener2) {if (mCurrentMode == Mode.PULL_FROM_START) {mOnRefreshListener2.onPullDownToRefresh(this);} else if (mCurrentMode == Mode.PULL_FROM_END) {mOnRefreshListener2.onPullUpToRefresh(this);}}}@SuppressWarnings(""deprecation"")private void init(Context context, AttributeSet attrs) {switch (getPullToRefreshScrollDirection()) {case HORIZONTAL:setOrientation(LinearLayout.HORIZONTAL);break;case VERTICAL:default:setOrientation(LinearLayout.VERTICAL);break;}setGravity(Gravity.CENTER);ViewConfiguration config = ViewConfiguration.get(context);mTouchSlop = config.getScaledTouchSlop();// Styleables from XMLTypedArray a = context.obtainStyledAttributes(attrs, R.styleable.PullToRefresh);if (a.hasValue(R.styleable.PullToRefresh_ptrMode)) {mMode = Mode.mapIntToValue(a.getInteger(R.styleable.PullToRefresh_ptrMode, 0));}if (a.hasValue(R.styleable.PullToRefresh_ptrAnimationStyle)) {mLoadingAnimationStyle = AnimationStyle.mapIntToValue(a.getInteger(R.styleable.PullToRefresh_ptrAnimationStyle, 0));}// Refreshable View// By passing the attrs, we can add ListView/GridView params via XMLmRefreshableView = createRefreshableView(context, attrs);addRefreshableView(context, mRefreshableView);// We need to create now layouts nowmHeaderLayout = createLoadingLayout(context, Mode.PULL_FROM_START, a);mFooterLayout = createLoadingLayout(context, Mode.PULL_FROM_END, a);/*** Styleables from XML*/if (a.hasValue(R.styleable.PullToRefresh_ptrRefreshableViewBackground)) {Drawable background = a.getDrawable(R.styleable.PullToRefresh_ptrRefreshableViewBackground);if (null != background) {mRefreshableView.setBackgroundDrawable(background);}} else if (a.hasValue(R.styleable.PullToRefresh_ptrAdapterViewBackground)) {Utils.warnDeprecation(""ptrAdapterViewBackground"", ""ptrRefreshableViewBackground"");Drawable background = a.getDrawable(R.styleable.PullToRefresh_ptrAdapterViewBackground);if (null != background) {mRefreshableView.setBackgroundDrawable(background);}}if (a.hasValue(R.styleable.PullToRefresh_ptrOverScroll)) {mOverScrollEnabled = a.getBoolean(R.styleable.PullToRefresh_ptrOverScroll, true);}if (a.hasValue(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled)) {mScrollingWhileRefreshingEnabled = a.getBoolean(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled, false);}// Let the derivative classes have a go at handling attributes, then// recycle them...handleStyledAttributes(a);a.recycle();// Finally update the UI for the modesupdateUIForMode();}private boolean isReadyForPull() {switch (mMode) {case PULL_FROM_START:return isReadyForPullStart();case PULL_FROM_END:return isReadyForPullEnd();case BOTH:return isReadyForPullEnd() || isReadyForPullStart();default:return false;}}/*** Actions a Pull Event** @return true if the Event has been handled, false if there has been no*         change*/private void pullEvent() {final int newScrollValue;final int itemDimension;final float initialMotionValue, lastMotionValue;switch (getPullToRefreshScrollDirection()) {case HORIZONTAL:initialMotionValue = mInitialMotionX;lastMotionValue = mLastMotionX;break;case VERTICAL:default:initialMotionValue = mInitialMotionY;lastMotionValue = mLastMotionY;break;}switch (mCurrentMode) {case PULL_FROM_END:newScrollValue = Math.round(Math.max(initialMotionValue - lastMotionValue, 0) / FRICTION);itemDimension = getFooterSize();break;case PULL_FROM_START:default:newScrollValue = Math.round(Math.min(initialMotionValue - lastMotionValue, 0) / FRICTION);itemDimension = getHeaderSize();break;}setHeaderScroll(newScrollValue);if (newScrollValue != 0 && !isRefreshing()) {float scale = Math.abs(newScrollValue) / (float) itemDimension;switch (mCurrentMode) {case PULL_FROM_END:mFooterLayout.onPull(scale);break;case PULL_FROM_START:default:mHeaderLayout.onPull(scale);break;}if (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {setState(State.PULL_TO_REFRESH);} else if (mState == State.PULL_TO_REFRESH && (itemDimension * mReleaseRatio) < Math.abs(newScrollValue)) {setState(State.RELEASE_TO_REFRESH);}}}private LinearLayout.LayoutParams getLoadingLayoutLayoutParams() {switch (getPullToRefreshScrollDirection()) {case HORIZONTAL:return new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);case VERTICAL:default:return new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);}}private int getMaximumPullScroll() {switch (getPullToRefreshScrollDirection()) {case HORIZONTAL:return Math.round(getWidth() / FRICTION);case VERTICAL:default:return Math.round(getHeight() / FRICTION);}}/*** Smooth Scroll to position using the specific duration** @param scrollValue - Position to scroll to* @param duration - Duration of animation in milliseconds*/private final void smoothScrollTo(int scrollValue, long duration) {smoothScrollTo(scrollValue, duration, 0, null);}private final void smoothScrollTo(int newScrollValue, long duration, long delayMillis,OnSmoothScrollFinishedListener listener) {if (null != mCurrentSmoothScrollRunnable) {mCurrentSmoothScrollRunnable.stop();}final int oldScrollValue;switch (getPullToRefreshScrollDirection()) {case HORIZONTAL:oldScrollValue = getScrollX();break;case VERTICAL:default:oldScrollValue = getScrollY();break;}if (oldScrollValue != newScrollValue) {if (null == mScrollAnimationInterpolator) {// Default interpolator is a Decelerate InterpolatormScrollAnimationInterpolator = new DecelerateInterpolator();}mCurrentSmoothScrollRunnable = new SmoothScrollRunnable(oldScrollValue, newScrollValue, duration, listener);if (delayMillis > 0) {postDelayed(mCurrentSmoothScrollRunnable, delayMillis);} else {post(mCurrentSmoothScrollRunnable);}}}private final void smoothScrollToAndBack(int y) {smoothScrollTo(y, SMOOTH_SCROLL_DURATION_MS, 0, new OnSmoothScrollFinishedListener() {@Overridepublic void onSmoothScrollFinished() {smoothScrollTo(0, SMOOTH_SCROLL_DURATION_MS, DEMO_SCROLL_INTERVAL, null);}});}public static enum AnimationStyle {/*** This is the default for Android-PullToRefresh. Allows you to use any* drawable, which is automatically rotated and used as a Progress Bar.*/ROTATE,/*** This is the old default, and what is commonly used on iOS. Uses an* arrow image which flips depending on where the user has scrolled.*/FLIP;static AnimationStyle getDefault() {return ROTATE;}/*** Maps an int to a specific mode. This is needed when saving state, or* inflating the view from XML where the mode is given through a attr* int.** @param modeInt - int to map a Mode to* @return Mode that modeInt maps to, or ROTATE by default.*/static AnimationStyle mapIntToValue(int modeInt) {switch (modeInt) {case 0x0:default:return ROTATE;case 0x1:return FLIP;}}LoadingLayout createLoadingLayout(Context context, Mode mode, Orientation scrollDirection, TypedArray attrs) {switch (this) {case ROTATE:default:return new RotateLoadingLayout(context, mode, scrollDirection, attrs);case FLIP:return new FlipLoadingLayout(context, mode, scrollDirection, attrs);}}}public static enum Mode {/*** Disable all Pull-to-Refresh gesture and Refreshing handling*/DISABLED(0x0),/*** Only allow the user to Pull from the start of the Refreshable View to* refresh. The start is either the Top or Left, depending on the* scrolling direction.*/PULL_FROM_START(0x1),/*** Only allow the user to Pull from the end of the Refreshable View to* refresh. The start is either the Bottom or Right, depending on the* scrolling direction.*/PULL_FROM_END(0x2),/*** Allow the user to both Pull from the start, from the end to refresh.*/BOTH(0x3),/*** Disables Pull-to-Refresh gesture handling, but allows manually* setting the Refresh state via* {@link PullToRefreshBase#setRefreshing() setRefreshing()}.*/MANUAL_REFRESH_ONLY(0x4);/*** @deprecated Use {@link #PULL_FROM_START} from now on.*/public static Mode PULL_DOWN_TO_REFRESH = Mode.PULL_FROM_START;/*** @deprecated Use {@link #PULL_FROM_END} from now on.*/public static Mode PULL_UP_TO_REFRESH = Mode.PULL_FROM_END;/*** Maps an int to a specific mode. This is needed when saving state, or* inflating the view from XML where the mode is given through a attr* int.** @param modeInt - int to map a Mode to* @return Mode that modeInt maps to, or PULL_FROM_START by default.*/static Mode mapIntToValue(final int modeInt) {for (Mode value : Mode.values()) {if (modeInt == value.getIntValue()) {return value;}}// If not, return defaultreturn getDefault();}static Mode getDefault() {return PULL_FROM_START;}private int mIntValue;// The modeInt values need to match those from attrs.xmlMode(int modeInt) {mIntValue = modeInt;}/*** @return true if the mode permits Pull-to-Refresh*/boolean permitsPullToRefresh() {return !(this == DISABLED || this == MANUAL_REFRESH_ONLY);}/*** @return true if this mode wants the Loading Layout Header to be shown*/public boolean showHeaderLoadingLayout() {return this == PULL_FROM_START || this == BOTH;}/*** @return true if this mode wants the Loading Layout Footer to be shown*/public boolean showFooterLoadingLayout() {return this == PULL_FROM_END || this == BOTH || this == MANUAL_REFRESH_ONLY;}int getIntValue() {return mIntValue;}}// ===========================================================// Inner, Anonymous Classes, and Enumerations// ===========================================================/*** Simple Listener that allows you to be notified when the user has scrolled* to the end of the AdapterView. See (* {@link PullToRefreshAdapterViewBase#setOnLastItemVisibleListener}.** @author Chris Banes*/public static interface OnLastItemVisibleListener {/*** Called when the user has scrolled to the end of the list*/public void onLastItemVisible();}/*** Listener that allows you to be notified when the user has started or* finished a touch event. Useful when you want to append extra UI events* (such as sounds). See (* {@link PullToRefreshAdapterViewBase#setOnPullEventListener}.** @author Chris Banes*/public static interface OnPullEventListener<V extends View> {/*** Called when the internal state has been changed, usually by the user* pulling.** @param refreshView - View which has had it's state change.* @param state - The new state of View.* @param direction - One of {@link Mode#PULL_FROM_START} or*            {@link Mode#PULL_FROM_END} depending on which direction*            the user is pulling. Only useful when <var>state</var> is*            {@link State#PULL_TO_REFRESH} or*            {@link State#RELEASE_TO_REFRESH}.*/public void onPullEvent(final PullToRefreshBase<V> refreshView, State state, Mode direction);}/*** Simple Listener to listen for any callbacks to Refresh.** @author Chris Banes*/public static interface OnRefreshListener<V extends View> {/*** onRefresh will be called for both a Pull from start, and Pull from* end*/public void onRefresh(final PullToRefreshBase<V> refreshView);}/*** An advanced version of the Listener to listen for callbacks to Refresh.* This listener is different as it allows you to differentiate between Pull* Ups, and Pull Downs.** @author Chris Banes*/public static interface OnRefreshListener2<V extends View> {// TODO These methods need renaming to START/END rather than DOWN/UP/*** onPullDownToRefresh will be called only when the user has Pulled from* the start, and released.*/public void onPullDownToRefresh(final PullToRefreshBase<V> refreshView);/*** onPullUpToRefresh will be called only when the user has Pulled from* the end, and released.*/public void onPullUpToRefresh(final PullToRefreshBase<V> refreshView);}public static enum Orientation {VERTICAL, HORIZONTAL;}public static enum State {/*** When the UI is in a state which means that user is not interacting* with the Pull-to-Refresh function.*/RESET(0x0),/*** When the UI is being pulled by the user, but has not been pulled far* enough so that it refreshes when released.*/PULL_TO_REFRESH(0x1),/*** When the UI is being pulled by the user, and <strong>has</strong>* been pulled far enough so that it will refresh when released.*/RELEASE_TO_REFRESH(0x2),/*** When the UI is currently refreshing, caused by a pull gesture.*/REFRESHING(0x8),/*** When the UI is currently refreshing, caused by a call to* {@link PullToRefreshBase#setRefreshing() setRefreshing()}.*/MANUAL_REFRESHING(0x9),/*** When the UI is currently overscrolling, caused by a fling on the* Refreshable View.*/OVERSCROLLING(0x10);/*** Maps an int to a specific state. This is needed when saving state.** @param stateInt - int to map a State to* @return State that stateInt maps to*/static State mapIntToValue(final int stateInt) {for (State value : State.values()) {if (stateInt == value.getIntValue()) {return value;}}// If not, return defaultreturn RESET;}private int mIntValue;State(int intValue) {mIntValue = intValue;}int getIntValue() {return mIntValue;}}final class SmoothScrollRunnable implements Runnable {private final Interpolator mInterpolator;private final int mScrollToY;private final int mScrollFromY;private final long mDuration;private OnSmoothScrollFinishedListener mListener;private boolean mContinueRunning = true;private long mStartTime = -1;private int mCurrentY = -1;public SmoothScrollRunnable(int fromY, int toY, long duration, OnSmoothScrollFinishedListener listener) {mScrollFromY = fromY;mScrollToY = toY;mInterpolator = mScrollAnimationInterpolator;mDuration = duration;mListener = listener;}@Overridepublic void run() {/*** Only set mStartTime if this is the first time we're starting,* else actually calculate the Y delta*/if (mStartTime == -1) {mStartTime = System.currentTimeMillis();} else {/*** We do do all calculations in long to reduce software float* calculations. We use 1000 as it gives us good accuracy and* small rounding errors*/long normalizedTime = (1000 * (System.currentTimeMillis() - mStartTime)) / mDuration;normalizedTime = Math.max(Math.min(normalizedTime, 1000), 0);final int deltaY = Math.round((mScrollFromY - mScrollToY)* mInterpolator.getInterpolation(normalizedTime / 1000f));mCurrentY = mScrollFromY - deltaY;setHeaderScroll(mCurrentY);}// If we're not at the target Y, keep going...if (mContinueRunning && mScrollToY != mCurrentY) {ViewCompat.postOnAnimation(PullToRefreshBase.this, this);} else {if (null != mListener) {mListener.onSmoothScrollFinished();}}}public void stop() {mContinueRunning = false;removeCallbacks(this);}}static interface OnSmoothScrollFinishedListener {void onSmoothScrollFinished();}}",PullToRefreshBase.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.annotation.TargetApi;import android.content.Context;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.util.AttributeSet;import android.view.View;import android.widget.ExpandableListView;import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;public class PullToRefreshExpandableListView extends PullToRefreshAdapterViewBase<ExpandableListView> {public PullToRefreshExpandableListView(Context context) {super(context);}public PullToRefreshExpandableListView(Context context, AttributeSet attrs) {super(context, attrs);}public PullToRefreshExpandableListView(Context context, Mode mode) {super(context, mode);}public PullToRefreshExpandableListView(Context context, Mode mode, AnimationStyle style) {super(context, mode, style);}@Overridepublic final Orientation getPullToRefreshScrollDirection() {return Orientation.VERTICAL;}@Overrideprotected ExpandableListView createRefreshableView(Context context, AttributeSet attrs) {final ExpandableListView lv;if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {lv = new InternalExpandableListViewSDK9(context, attrs);} else {lv = new InternalExpandableListView(context, attrs);}// Set it to this so it can be used in ListActivity/ListFragmentlv.setId(android.R.id.list);return lv;}class InternalExpandableListView extends ExpandableListView implements EmptyViewMethodAccessor {public InternalExpandableListView(Context context, AttributeSet attrs) {super(context, attrs);}@Overridepublic void setEmptyView(View emptyView) {PullToRefreshExpandableListView.this.setEmptyView(emptyView);}@Overridepublic void setEmptyViewInternal(View emptyView) {super.setEmptyView(emptyView);}}@TargetApi(9)final class InternalExpandableListViewSDK9 extends InternalExpandableListView {public InternalExpandableListViewSDK9(Context context, AttributeSet attrs) {super(context, attrs);}@Overrideprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);// Does all of the hard work...OverscrollHelper.overScrollBy(PullToRefreshExpandableListView.this, deltaX, scrollX, deltaY, scrollY,isTouchEvent);return returnValue;}}}",PullToRefreshExpandableListView.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.annotation.TargetApi;import android.content.Context;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.os.Bundle;import android.util.AttributeSet;import android.util.FloatMath;import android.webkit.WebChromeClient;import android.webkit.WebView;public class PullToRefreshWebView extends PullToRefreshBase<WebView> {private static final OnRefreshListener<WebView> defaultOnRefreshListener = new OnRefreshListener<WebView>() {@Overridepublic void onRefresh(PullToRefreshBase<WebView> refreshView) {refreshView.getRefreshableView().reload();}};private final WebChromeClient defaultWebChromeClient = new WebChromeClient() {@Overridepublic void onProgressChanged(WebView view, int newProgress) {if (newProgress == 100) {onRefreshComplete();}}};public PullToRefreshWebView(Context context) {super(context);/*** Added so that by default, Pull-to-Refresh refreshes the page*/setOnRefreshListener(defaultOnRefreshListener);mRefreshableView.setWebChromeClient(defaultWebChromeClient);}public PullToRefreshWebView(Context context, AttributeSet attrs) {super(context, attrs);/*** Added so that by default, Pull-to-Refresh refreshes the page*/setOnRefreshListener(defaultOnRefreshListener);mRefreshableView.setWebChromeClient(defaultWebChromeClient);}public PullToRefreshWebView(Context context, Mode mode) {super(context, mode);/*** Added so that by default, Pull-to-Refresh refreshes the page*/setOnRefreshListener(defaultOnRefreshListener);mRefreshableView.setWebChromeClient(defaultWebChromeClient);}public PullToRefreshWebView(Context context, Mode mode, AnimationStyle style) {super(context, mode, style);/*** Added so that by default, Pull-to-Refresh refreshes the page*/setOnRefreshListener(defaultOnRefreshListener);mRefreshableView.setWebChromeClient(defaultWebChromeClient);}@Overridepublic final Orientation getPullToRefreshScrollDirection() {return Orientation.VERTICAL;}@Overrideprotected WebView createRefreshableView(Context context, AttributeSet attrs) {WebView webView;if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {webView = new InternalWebViewSDK9(context, attrs);} else {webView = new WebView(context, attrs);}webView.setId(R.id.webview);return webView;}@Overrideprotected boolean isReadyForPullStart() {return mRefreshableView.getScrollY() == 0;}@Overrideprotected boolean isReadyForPullEnd() {float exactContentHeight = FloatMath.floor(mRefreshableView.getContentHeight() * mRefreshableView.getScale());return mRefreshableView.getScrollY() >= (exactContentHeight - mRefreshableView.getHeight());}@Overrideprotected void onPtrRestoreInstanceState(Bundle savedInstanceState) {super.onPtrRestoreInstanceState(savedInstanceState);mRefreshableView.restoreState(savedInstanceState);}@Overrideprotected void onPtrSaveInstanceState(Bundle saveState) {super.onPtrSaveInstanceState(saveState);mRefreshableView.saveState(saveState);}@TargetApi(9)final class InternalWebViewSDK9 extends WebView {// WebView doesn't always scroll back to it's edge so we add some// fuzzinessstatic final int OVERSCROLL_FUZZY_THRESHOLD = 2;// WebView seems quite reluctant to overscroll so we use the scale// factor to scale it's valuestatic final float OVERSCROLL_SCALE_FACTOR = 1.5f;public InternalWebViewSDK9(Context context, AttributeSet attrs) {super(context, attrs);}@Overrideprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);// Does all of the hard work...OverscrollHelper.overScrollBy(PullToRefreshWebView.this, deltaX, scrollX, deltaY, scrollY,getScrollRange(), OVERSCROLL_FUZZY_THRESHOLD, OVERSCROLL_SCALE_FACTOR, isTouchEvent);return returnValue;}private int getScrollRange() {return (int) Math.max(0, FloatMath.floor(mRefreshableView.getContentHeight() * mRefreshableView.getScale())- (getHeight() - getPaddingBottom() - getPaddingTop()));}}}",PullToRefreshWebView.java,0
200,"package com.handmark.pulltorefresh.library;import android.graphics.Typeface;import android.graphics.drawable.Drawable;public interface ILoadingLayout {/*** Set the Last Updated Text. This displayed under the main label when* Pulling** @param label - Label to set*/public void setLastUpdatedLabel(CharSequence label);/*** Set the drawable used in the loading layout. This is the same as calling* <code>setLoadingDrawable(drawable, Mode.BOTH)</code>** @param drawable - Drawable to display*/public void setLoadingDrawable(Drawable drawable);/*** Set Text to show when the Widget is being Pulled* <code>setPullLabel(releaseLabel, Mode.BOTH)</code>** @param pullLabel - CharSequence to display*/public void setPullLabel(CharSequence pullLabel);/*** Set Text to show when the Widget is refreshing* <code>setRefreshingLabel(releaseLabel, Mode.BOTH)</code>** @param refreshingLabel - CharSequence to display*/public void setRefreshingLabel(CharSequence refreshingLabel);/*** Set Text to show when the Widget is being pulled, and will refresh when* released. This is the same as calling* <code>setReleaseLabel(releaseLabel, Mode.BOTH)</code>** @param releaseLabel - CharSequence to display*/public void setReleaseLabel(CharSequence releaseLabel);/*** Set's the Sets the typeface and style in which the text should be* displayed. Please see* {@link android.widget.TextView#setTypeface(Typeface)* TextView#setTypeface(Typeface)}.*/public void setTextTypeface(Typeface tf);}",ILoadingLayout.java,0
200,"package com.handmark.pulltorefresh.library;import java.util.HashSet;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import com.handmark.pulltorefresh.library.internal.LoadingLayout;public class LoadingLayoutProxy implements ILoadingLayout {private final HashSet<LoadingLayout> mLoadingLayouts;LoadingLayoutProxy() {mLoadingLayouts = new HashSet<LoadingLayout>();}/*** This allows you to add extra LoadingLayout instances to this proxy. This* is only necessary if you keep your own instances, and want to have them* included in any* {@link PullToRefreshBase#createLoadingLayoutProxy(boolean, boolean)* createLoadingLayoutProxy(...)} calls.** @param layout - LoadingLayout to have included.*/public void addLayout(LoadingLayout layout) {if (null != layout) {mLoadingLayouts.add(layout);}}@Overridepublic void setLastUpdatedLabel(CharSequence label) {for (LoadingLayout layout : mLoadingLayouts) {layout.setLastUpdatedLabel(label);}}@Overridepublic void setLoadingDrawable(Drawable drawable) {for (LoadingLayout layout : mLoadingLayouts) {layout.setLoadingDrawable(drawable);}}@Overridepublic void setRefreshingLabel(CharSequence refreshingLabel) {for (LoadingLayout layout : mLoadingLayouts) {layout.setRefreshingLabel(refreshingLabel);}}@Overridepublic void setPullLabel(CharSequence label) {for (LoadingLayout layout : mLoadingLayouts) {layout.setPullLabel(label);}}@Overridepublic void setReleaseLabel(CharSequence label) {for (LoadingLayout layout : mLoadingLayouts) {layout.setReleaseLabel(label);}}public void setTextTypeface(Typeface tf) {for (LoadingLayout layout : mLoadingLayouts) {layout.setTextTypeface(tf);}}}",LoadingLayoutProxy.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.annotation.TargetApi;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.util.AttributeSet;import android.view.Gravity;import android.view.MotionEvent;import android.view.View;import android.widget.FrameLayout;import android.widget.ListAdapter;import android.widget.ListView;import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;import com.handmark.pulltorefresh.library.internal.LoadingLayout;public class PullToRefreshListView extends PullToRefreshAdapterViewBase<ListView> {private LoadingLayout mHeaderLoadingView;private LoadingLayout mFooterLoadingView;private FrameLayout mLvFooterLoadingFrame;private boolean mListViewExtrasEnabled;public PullToRefreshListView(Context context) {super(context);}public PullToRefreshListView(Context context, AttributeSet attrs) {super(context, attrs);}public PullToRefreshListView(Context context, Mode mode) {super(context, mode);}public PullToRefreshListView(Context context, Mode mode, AnimationStyle style) {super(context, mode, style);}@Overridepublic final Orientation getPullToRefreshScrollDirection() {return Orientation.VERTICAL;}@Overrideprotected void onRefreshing(final boolean doScroll) {/*** If we're not showing the Refreshing view, or the list is empty, the* the header/footer views won't show so we use the normal method.*/ListAdapter adapter = mRefreshableView.getAdapter();if (!mListViewExtrasEnabled || !getShowViewWhileRefreshing() || null == adapter || adapter.isEmpty()) {super.onRefreshing(doScroll);return;}super.onRefreshing(false);final LoadingLayout origLoadingView, listViewLoadingView, oppositeListViewLoadingView;final int selection, scrollToY;switch (getCurrentMode()) {case MANUAL_REFRESH_ONLY:case PULL_FROM_END:origLoadingView = getFooterLayout();listViewLoadingView = mFooterLoadingView;oppositeListViewLoadingView = mHeaderLoadingView;selection = mRefreshableView.getCount() - 1;scrollToY = getScrollY() - getFooterSize();break;case PULL_FROM_START:default:origLoadingView = getHeaderLayout();listViewLoadingView = mHeaderLoadingView;oppositeListViewLoadingView = mFooterLoadingView;selection = 0;scrollToY = getScrollY() + getHeaderSize();break;}// Hide our original Loading VieworigLoadingView.reset();origLoadingView.hideAllViews();// Make sure the opposite end is hidden toooppositeListViewLoadingView.setVisibility(View.GONE);// Show the ListView Loading View and set it to refresh.listViewLoadingView.setVisibility(View.VISIBLE);listViewLoadingView.refreshing();if (doScroll) {// We need to disable the automatic visibility changes for nowdisableLoadingLayoutVisibilityChanges();// We scroll slightly so that the ListView's header/footer is at the// same Y position as our normal header/footersetHeaderScroll(scrollToY);// Make sure the ListView is scrolled to show the loading// header/footermRefreshableView.setSelection(selection);// Smooth scroll as normalsmoothScrollTo(0);}}@Overrideprotected void onReset() {/*** If the extras are not enabled, just call up to super and return.*/if (!mListViewExtrasEnabled) {super.onReset();return;}final LoadingLayout originalLoadingLayout, listViewLoadingLayout;final int scrollToHeight, selection;final boolean scrollLvToEdge;switch (getCurrentMode()) {case MANUAL_REFRESH_ONLY:case PULL_FROM_END:originalLoadingLayout = getFooterLayout();listViewLoadingLayout = mFooterLoadingView;selection = mRefreshableView.getCount() - 1;scrollToHeight = getFooterSize();scrollLvToEdge = Math.abs(mRefreshableView.getLastVisiblePosition() - selection) <= 1;break;case PULL_FROM_START:default:originalLoadingLayout = getHeaderLayout();listViewLoadingLayout = mHeaderLoadingView;scrollToHeight = -getHeaderSize();selection = 0;scrollLvToEdge = Math.abs(mRefreshableView.getFirstVisiblePosition() - selection) <= 1;break;}// If the ListView header loading layout is showing, then we need to// flip so that the original one is showing insteadif (listViewLoadingLayout.getVisibility() == View.VISIBLE) {// Set our Original View to VisibleoriginalLoadingLayout.showInvisibleViews();// Hide the ListView Header/FooterlistViewLoadingLayout.setVisibility(View.GONE);/*** Scroll so the View is at the same Y as the ListView* header/footer, but only scroll if: we've pulled to refresh, it's* positioned correctly*/if (scrollLvToEdge && getState() != State.MANUAL_REFRESHING) {mRefreshableView.setSelection(selection);setHeaderScroll(scrollToHeight);}}// Finally, call up to supersuper.onReset();}@Overrideprotected LoadingLayoutProxy createLoadingLayoutProxy(final boolean includeStart, final boolean includeEnd) {LoadingLayoutProxy proxy = super.createLoadingLayoutProxy(includeStart, includeEnd);if (mListViewExtrasEnabled) {final Mode mode = getMode();if (includeStart && mode.showHeaderLoadingLayout()) {proxy.addLayout(mHeaderLoadingView);}if (includeEnd && mode.showFooterLoadingLayout()) {proxy.addLayout(mFooterLoadingView);}}return proxy;}protected ListView createListView(Context context, AttributeSet attrs) {final ListView lv;if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {lv = new InternalListViewSDK9(context, attrs);} else {lv = new InternalListView(context, attrs);}return lv;}@Overrideprotected ListView createRefreshableView(Context context, AttributeSet attrs) {ListView lv = createListView(context, attrs);// Set it to this so it can be used in ListActivity/ListFragmentlv.setId(android.R.id.list);return lv;}@Overrideprotected void handleStyledAttributes(TypedArray a) {super.handleStyledAttributes(a);mListViewExtrasEnabled = a.getBoolean(R.styleable.PullToRefresh_ptrListViewExtrasEnabled, true);if (mListViewExtrasEnabled) {final FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL);// Create Loading Views ready for use laterFrameLayout frame = new FrameLayout(getContext());mHeaderLoadingView = createLoadingLayout(getContext(), Mode.PULL_FROM_START, a);mHeaderLoadingView.setVisibility(View.GONE);frame.addView(mHeaderLoadingView, lp);mRefreshableView.addHeaderView(frame, null, false);mLvFooterLoadingFrame = new FrameLayout(getContext());mFooterLoadingView = createLoadingLayout(getContext(), Mode.PULL_FROM_END, a);mFooterLoadingView.setVisibility(View.GONE);mLvFooterLoadingFrame.addView(mFooterLoadingView, lp);/*** If the value for Scrolling While Refreshing hasn't been* explicitly set via XML, enable Scrolling While Refreshing.*/if (!a.hasValue(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled)) {setScrollingWhileRefreshingEnabled(true);}}}@TargetApi(9)final class InternalListViewSDK9 extends InternalListView {public InternalListViewSDK9(Context context, AttributeSet attrs) {super(context, attrs);}@Overrideprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);// Does all of the hard work...OverscrollHelper.overScrollBy(PullToRefreshListView.this, deltaX, scrollX, deltaY, scrollY, isTouchEvent);return returnValue;}}protected class InternalListView extends ListView implements EmptyViewMethodAccessor {private boolean mAddedLvFooter = false;public InternalListView(Context context, AttributeSet attrs) {super(context, attrs);}@Overrideprotected void dispatchDraw(Canvas canvas) {/*** This is a bit hacky, but Samsung's ListView has got a bug in it* when using Header/Footer Views and the list is empty. This masks* the issue so that it doesn't cause an FC. See Issue #66.*/try {super.dispatchDraw(canvas);} catch (IndexOutOfBoundsException e) {e.printStackTrace();}}@Overridepublic boolean dispatchTouchEvent(MotionEvent ev) {/*** This is a bit hacky, but Samsung's ListView has got a bug in it* when using Header/Footer Views and the list is empty. This masks* the issue so that it doesn't cause an FC. See Issue #66.*/try {return super.dispatchTouchEvent(ev);} catch (IndexOutOfBoundsException e) {e.printStackTrace();return false;}}@Overridepublic void setAdapter(ListAdapter adapter) {// Add the Footer View at the last possible momentif (null != mLvFooterLoadingFrame && !mAddedLvFooter) {addFooterView(mLvFooterLoadingFrame, null, false);mAddedLvFooter = true;}super.setAdapter(adapter);}@Overridepublic void setEmptyView(View emptyView) {PullToRefreshListView.this.setEmptyView(emptyView);}@Overridepublic void setEmptyViewInternal(View emptyView) {super.setEmptyView(emptyView);}}}",PullToRefreshListView.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.annotation.TargetApi;import android.util.Log;import android.view.View;import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;import com.handmark.pulltorefresh.library.PullToRefreshBase.State;@TargetApi(9)public final class OverscrollHelper {static final String LOG_TAG = ""OverscrollHelper"";static final float DEFAULT_OVERSCROLL_SCALE = 1f;/*** Helper method for Overscrolling that encapsulates all of the necessary* function.* <p/>* This should only be used on AdapterView's such as ListView as it just* calls through to overScrollBy() with the scrollRange = 0. AdapterView's* do not have a scroll range (i.e. getScrollY() doesn't work).** @param view - PullToRefreshView that is calling this.* @param deltaX - Change in X in pixels, passed through from from*            overScrollBy call* @param scrollX - Current X scroll value in pixels before applying deltaY,*            passed through from from overScrollBy call* @param deltaY - Change in Y in pixels, passed through from from*            overScrollBy call* @param scrollY - Current Y scroll value in pixels before applying deltaY,*            passed through from from overScrollBy call* @param isTouchEvent - true if this scroll operation is the result of a*            touch event, passed through from from overScrollBy call*/public static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,final int deltaY, final int scrollY, final boolean isTouchEvent) {overScrollBy(view, deltaX, scrollX, deltaY, scrollY, 0, isTouchEvent);}/*** Helper method for Overscrolling that encapsulates all of the necessary* function. This version of the call is used for Views that need to specify* a Scroll Range but scroll back to it's edge correctly.** @param view - PullToRefreshView that is calling this.* @param deltaX - Change in X in pixels, passed through from from*            overScrollBy call* @param scrollX - Current X scroll value in pixels before applying deltaY,*            passed through from from overScrollBy call* @param deltaY - Change in Y in pixels, passed through from from*            overScrollBy call* @param scrollY - Current Y scroll value in pixels before applying deltaY,*            passed through from from overScrollBy call* @param scrollRange - Scroll Range of the View, specifically needed for*            ScrollView* @param isTouchEvent - true if this scroll operation is the result of a*            touch event, passed through from from overScrollBy call*/public static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,final int deltaY, final int scrollY, final int scrollRange, final boolean isTouchEvent) {overScrollBy(view, deltaX, scrollX, deltaY, scrollY, scrollRange, 0, DEFAULT_OVERSCROLL_SCALE, isTouchEvent);}/*** Helper method for Overscrolling that encapsulates all of the necessary* function. This is the advanced version of the call.** @param view - PullToRefreshView that is calling this.* @param deltaX - Change in X in pixels, passed through from from*            overScrollBy call* @param scrollX - Current X scroll value in pixels before applying deltaY,*            passed through from from overScrollBy call* @param deltaY - Change in Y in pixels, passed through from from*            overScrollBy call* @param scrollY - Current Y scroll value in pixels before applying deltaY,*            passed through from from overScrollBy call* @param scrollRange - Scroll Range of the View, specifically needed for*            ScrollView* @param fuzzyThreshold - Threshold for which the values how fuzzy we*            should treat the other values. Needed for WebView as it*            doesn't always scroll back to it's edge. 0 = no fuzziness.* @param scaleFactor - Scale Factor for overscroll amount* @param isTouchEvent - true if this scroll operation is the result of a*            touch event, passed through from from overScrollBy call*/public static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,final int deltaY, final int scrollY, final int scrollRange, final int fuzzyThreshold,final float scaleFactor, final boolean isTouchEvent) {final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:deltaValue = deltaX;scrollValue = scrollX;currentScrollValue = view.getScrollX();break;case VERTICAL:default:deltaValue = deltaY;scrollValue = scrollY;currentScrollValue = view.getScrollY();break;}// Check that OverScroll is enabled and that we're not currently// refreshing.if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode = view.getMode();// Check that Pull-to-Refresh is enabled, and the event isn't from// touchif (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue = (deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG, ""OverScroll. DeltaX: "" + deltaX + "", ScrollX: "" + scrollX + "", DeltaY: "" + deltaY+ "", ScrollY: "" + scrollY + "", NewY: "" + newScrollValue + "", ScrollRange: "" + scrollRange+ "", CurrentScroll: "" + currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {// Check the mode supports the overscroll direction, and// then move scrollif (mode.showHeaderLoadingLayout()) {// If we're currently at zero, we're about to start// overscrolling, so change the stateif (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int) (scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {// Check the mode supports the overscroll direction, and// then move scrollif (mode.showFooterLoadingLayout()) {// If we're currently at zero, we're about to start// overscrolling, so change the stateif (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int) (scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold|| Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {// Means we've stopped overscrolling, so scroll back to 0view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {// This condition means that we were overscrolling from a fling,// but the user has touched the View and is now overscrolling// from touch instead. We need to just reset.view.setState(State.RESET);}}}static boolean isAndroidOverScrollEnabled(View view) {return view.getOverScrollMode() != View.OVER_SCROLL_NEVER;}}",OverscrollHelper.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.annotation.TargetApi;import android.content.Context;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.util.AttributeSet;import android.view.View;import android.widget.ScrollView;public class PullToRefreshScrollView extends PullToRefreshBase<ScrollView> {public PullToRefreshScrollView(Context context) {super(context);}public PullToRefreshScrollView(Context context, AttributeSet attrs) {super(context, attrs);}public PullToRefreshScrollView(Context context, Mode mode) {super(context, mode);}public PullToRefreshScrollView(Context context, Mode mode, AnimationStyle style) {super(context, mode, style);}@Overridepublic final Orientation getPullToRefreshScrollDirection() {return Orientation.VERTICAL;}@Overrideprotected ScrollView createRefreshableView(Context context, AttributeSet attrs) {ScrollView scrollView;if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {scrollView = new InternalScrollViewSDK9(context, attrs);} else {scrollView = new ScrollView(context, attrs);}scrollView.setId(R.id.scrollview);return scrollView;}@Overrideprotected boolean isReadyForPullStart() {return mRefreshableView.getScrollY() == 0;}@Overrideprotected boolean isReadyForPullEnd() {View scrollViewChild = mRefreshableView.getChildAt(0);if (null != scrollViewChild) {return mRefreshableView.getScrollY() >= (scrollViewChild.getHeight() - getHeight());}return false;}@TargetApi(9)final class InternalScrollViewSDK9 extends ScrollView {public InternalScrollViewSDK9(Context context, AttributeSet attrs) {super(context, attrs);}@Overrideprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);// Does all of the hard work...OverscrollHelper.overScrollBy(PullToRefreshScrollView.this, deltaX, scrollX, deltaY, scrollY,getScrollRange(), isTouchEvent);return returnValue;}/*** Taken from the AOSP ScrollView source*/private int getScrollRange() {int scrollRange = 0;if (getChildCount() > 0) {View child = getChildAt(0);scrollRange = Math.max(0, child.getHeight() - (getHeight() - getPaddingBottom() - getPaddingTop()));}return scrollRange;}}}",PullToRefreshScrollView.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.internal;import android.annotation.TargetApi;import android.graphics.drawable.Drawable;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.view.View;@SuppressWarnings(""deprecation"")public class ViewCompat {public static void postOnAnimation(View view, Runnable runnable) {if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {SDK16.postOnAnimation(view, runnable);} else {view.postDelayed(runnable, 16);}}public static void setBackground(View view, Drawable background) {if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {SDK16.setBackground(view, background);} else {view.setBackgroundDrawable(background);}}public static void setLayerType(View view, int layerType) {if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {SDK11.setLayerType(view, layerType);}}@TargetApi(11)static class SDK11 {public static void setLayerType(View view, int layerType) {view.setLayerType(layerType, null);}}@TargetApi(16)static class SDK16 {public static void postOnAnimation(View view, Runnable runnable) {view.postOnAnimation(runnable);}public static void setBackground(View view, Drawable background) {view.setBackground(background);}}}",ViewCompat.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.internal;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.ColorStateList;import android.content.res.TypedArray;import android.graphics.Typeface;import android.graphics.drawable.AnimationDrawable;import android.graphics.drawable.Drawable;import android.text.TextUtils;import android.util.TypedValue;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.animation.Interpolator;import android.view.animation.LinearInterpolator;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.TextView;import com.handmark.pulltorefresh.library.ILoadingLayout;import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;import com.handmark.pulltorefresh.library.PullToRefreshBase.Orientation;import com.handmark.pulltorefresh.library.R;@SuppressLint(""ViewConstructor"")public abstract class LoadingLayout extends FrameLayout implements ILoadingLayout {static final String LOG_TAG = ""PullToRefresh-LoadingLayout"";static final Interpolator ANIMATION_INTERPOLATOR = new LinearInterpolator();private FrameLayout mInnerLayout;protected final ImageView mHeaderImage;protected final ProgressBar mHeaderProgress;private boolean mUseIntrinsicAnimation;private final TextView mHeaderText;private final TextView mSubHeaderText;protected final Mode mMode;protected final Orientation mScrollDirection;private CharSequence mPullLabel;private CharSequence mRefreshingLabel;private CharSequence mReleaseLabel;public LoadingLayout(Context context, final Mode mode, final Orientation scrollDirection, TypedArray attrs) {super(context);mMode = mode;mScrollDirection = scrollDirection;switch (scrollDirection) {case HORIZONTAL:LayoutInflater.from(context).inflate(R.layout.pull_to_refresh_header_horizontal, this);break;case VERTICAL:default:LayoutInflater.from(context).inflate(R.layout.pull_to_refresh_header_vertical, this);break;}mInnerLayout = (FrameLayout) findViewById(R.id.fl_inner);mHeaderText = (TextView) mInnerLayout.findViewById(R.id.pull_to_refresh_text);mHeaderProgress = (ProgressBar) mInnerLayout.findViewById(R.id.pull_to_refresh_progress);mSubHeaderText = (TextView) mInnerLayout.findViewById(R.id.pull_to_refresh_sub_text);mHeaderImage = (ImageView) mInnerLayout.findViewById(R.id.pull_to_refresh_image);FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) mInnerLayout.getLayoutParams();switch (mode) {case PULL_FROM_END:lp.gravity = scrollDirection == Orientation.VERTICAL ? Gravity.TOP : Gravity.LEFT;// Load in labelsmPullLabel = context.getString(R.string.pull_to_refresh_from_bottom_pull_label);mRefreshingLabel = context.getString(R.string.pull_to_refresh_from_bottom_refreshing_label);mReleaseLabel = context.getString(R.string.pull_to_refresh_from_bottom_release_label);break;case PULL_FROM_START:default:lp.gravity = scrollDirection == Orientation.VERTICAL ? Gravity.BOTTOM : Gravity.RIGHT;// Load in labelsmPullLabel = context.getString(R.string.pull_to_refresh_pull_label);mRefreshingLabel = context.getString(R.string.pull_to_refresh_refreshing_label);mReleaseLabel = context.getString(R.string.pull_to_refresh_release_label);break;}if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderBackground)) {Drawable background = attrs.getDrawable(R.styleable.PullToRefresh_ptrHeaderBackground);if (null != background) {ViewCompat.setBackground(this, background);}}if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderTextAppearance)) {TypedValue styleID = new TypedValue();attrs.getValue(R.styleable.PullToRefresh_ptrHeaderTextAppearance, styleID);setTextAppearance(styleID.data);}if (attrs.hasValue(R.styleable.PullToRefresh_ptrSubHeaderTextAppearance)) {TypedValue styleID = new TypedValue();attrs.getValue(R.styleable.PullToRefresh_ptrSubHeaderTextAppearance, styleID);setSubTextAppearance(styleID.data);}// Text Color attrs need to be set after TextAppearance attrsif (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderTextColor)) {ColorStateList colors = attrs.getColorStateList(R.styleable.PullToRefresh_ptrHeaderTextColor);if (null != colors) {setTextColor(colors);}}if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderSubTextColor)) {ColorStateList colors = attrs.getColorStateList(R.styleable.PullToRefresh_ptrHeaderSubTextColor);if (null != colors) {setSubTextColor(colors);}}// Try and get defined drawable from AttrsDrawable imageDrawable = null;if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawable)) {imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawable);}// Check Specific Drawable from Attrs, these overrite the generic// drawable attr aboveswitch (mode) {case PULL_FROM_START:default:if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableStart)) {imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableStart);} else if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableTop)) {Utils.warnDeprecation(""ptrDrawableTop"", ""ptrDrawableStart"");imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableTop);}break;case PULL_FROM_END:if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableEnd)) {imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableEnd);} else if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableBottom)) {Utils.warnDeprecation(""ptrDrawableBottom"", ""ptrDrawableEnd"");imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableBottom);}break;}// If we don't have a user defined drawable, load the defaultif (null == imageDrawable) {imageDrawable = context.getResources().getDrawable(getDefaultDrawableResId());}// Set Drawable, and save width/heightsetLoadingDrawable(imageDrawable);reset();}public final void setHeight(int height) {ViewGroup.LayoutParams lp = (ViewGroup.LayoutParams) getLayoutParams();lp.height = height;requestLayout();}public final void setWidth(int width) {ViewGroup.LayoutParams lp = (ViewGroup.LayoutParams) getLayoutParams();lp.width = width;requestLayout();}public final int getContentSize() {switch (mScrollDirection) {case HORIZONTAL:return mInnerLayout.getWidth();case VERTICAL:default:return mInnerLayout.getHeight();}}public final void hideAllViews() {if (View.VISIBLE == mHeaderText.getVisibility()) {mHeaderText.setVisibility(View.INVISIBLE);}if (View.VISIBLE == mHeaderProgress.getVisibility()) {mHeaderProgress.setVisibility(View.INVISIBLE);}if (View.VISIBLE == mHeaderImage.getVisibility()) {mHeaderImage.setVisibility(View.INVISIBLE);}if (View.VISIBLE == mSubHeaderText.getVisibility()) {mSubHeaderText.setVisibility(View.INVISIBLE);}}public final void onPull(float scaleOfLayout) {if (!mUseIntrinsicAnimation) {onPullImpl(scaleOfLayout);}}public final void pullToRefresh() {if (null != mHeaderText) {mHeaderText.setText(mPullLabel);}// Now call the callbackpullToRefreshImpl();}public final void refreshing() {if (null != mHeaderText) {mHeaderText.setText(mRefreshingLabel);}if (mUseIntrinsicAnimation) {((AnimationDrawable) mHeaderImage.getDrawable()).start();} else {// Now call the callbackrefreshingImpl();}if (null != mSubHeaderText) {mSubHeaderText.setVisibility(View.GONE);}}public final void releaseToRefresh() {if (null != mHeaderText) {mHeaderText.setText(mReleaseLabel);}// Now call the callbackreleaseToRefreshImpl();}public final void reset() {if (null != mHeaderText) {mHeaderText.setText(mPullLabel);}mHeaderImage.setVisibility(View.VISIBLE);if (mUseIntrinsicAnimation) {((AnimationDrawable) mHeaderImage.getDrawable()).stop();} else {// Now call the callbackresetImpl();}if (null != mSubHeaderText) {if (TextUtils.isEmpty(mSubHeaderText.getText())) {mSubHeaderText.setVisibility(View.GONE);} else {mSubHeaderText.setVisibility(View.VISIBLE);}}}@Overridepublic void setLastUpdatedLabel(CharSequence label) {setSubHeaderText(label);}public final void setLoadingDrawable(Drawable imageDrawable) {// Set DrawablemHeaderImage.setImageDrawable(imageDrawable);mUseIntrinsicAnimation = (imageDrawable instanceof AnimationDrawable);// Now call the callbackonLoadingDrawableSet(imageDrawable);}public void setPullLabel(CharSequence pullLabel) {mPullLabel = pullLabel;}public void setRefreshingLabel(CharSequence refreshingLabel) {mRefreshingLabel = refreshingLabel;}public void setReleaseLabel(CharSequence releaseLabel) {mReleaseLabel = releaseLabel;}@Overridepublic void setTextTypeface(Typeface tf) {mHeaderText.setTypeface(tf);}public final void showInvisibleViews() {if (View.INVISIBLE == mHeaderText.getVisibility()) {mHeaderText.setVisibility(View.VISIBLE);}if (View.INVISIBLE == mHeaderProgress.getVisibility()) {mHeaderProgress.setVisibility(View.VISIBLE);}if (View.INVISIBLE == mHeaderImage.getVisibility()) {mHeaderImage.setVisibility(View.VISIBLE);}if (View.INVISIBLE == mSubHeaderText.getVisibility()) {mSubHeaderText.setVisibility(View.VISIBLE);}}/*** Callbacks for derivative Layouts*/protected abstract int getDefaultDrawableResId();protected abstract void onLoadingDrawableSet(Drawable imageDrawable);protected abstract void onPullImpl(float scaleOfLayout);protected abstract void pullToRefreshImpl();protected abstract void refreshingImpl();protected abstract void releaseToRefreshImpl();protected abstract void resetImpl();private void setSubHeaderText(CharSequence label) {if (null != mSubHeaderText) {if (TextUtils.isEmpty(label)) {mSubHeaderText.setVisibility(View.GONE);} else {mSubHeaderText.setText(label);// Only set it to Visible if we're GONE, otherwise VISIBLE will// be set soonif (View.GONE == mSubHeaderText.getVisibility()) {mSubHeaderText.setVisibility(View.VISIBLE);}}}}private void setSubTextAppearance(int value) {if (null != mSubHeaderText) {mSubHeaderText.setTextAppearance(getContext(), value);}}private void setSubTextColor(ColorStateList color) {if (null != mSubHeaderText) {mSubHeaderText.setTextColor(color);}}private void setTextAppearance(int value) {if (null != mHeaderText) {mHeaderText.setTextAppearance(getContext(), value);}if (null != mSubHeaderText) {mSubHeaderText.setTextAppearance(getContext(), value);}}private void setTextColor(ColorStateList color) {if (null != mHeaderText) {mHeaderText.setTextColor(color);}if (null != mSubHeaderText) {mSubHeaderText.setTextColor(color);}}}",LoadingLayout.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.internal;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Matrix;import android.graphics.drawable.Drawable;import android.view.animation.Animation;import android.view.animation.RotateAnimation;import android.widget.ImageView.ScaleType;import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;import com.handmark.pulltorefresh.library.PullToRefreshBase.Orientation;import com.handmark.pulltorefresh.library.R;public class RotateLoadingLayout extends LoadingLayout {static final int ROTATION_ANIMATION_DURATION = 1200;private final Animation mRotateAnimation;private final Matrix mHeaderImageMatrix;private float mRotationPivotX, mRotationPivotY;private final boolean mRotateDrawableWhilePulling;public RotateLoadingLayout(Context context, Mode mode, Orientation scrollDirection, TypedArray attrs) {super(context, mode, scrollDirection, attrs);mRotateDrawableWhilePulling = attrs.getBoolean(R.styleable.PullToRefresh_ptrRotateDrawableWhilePulling, true);mHeaderImage.setScaleType(ScaleType.MATRIX);mHeaderImageMatrix = new Matrix();mHeaderImage.setImageMatrix(mHeaderImageMatrix);mRotateAnimation = new RotateAnimation(0, 720, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,0.5f);mRotateAnimation.setInterpolator(ANIMATION_INTERPOLATOR);mRotateAnimation.setDuration(ROTATION_ANIMATION_DURATION);mRotateAnimation.setRepeatCount(Animation.INFINITE);mRotateAnimation.setRepeatMode(Animation.RESTART);}public void onLoadingDrawableSet(Drawable imageDrawable) {if (null != imageDrawable) {mRotationPivotX = Math.round(imageDrawable.getIntrinsicWidth() / 2f);mRotationPivotY = Math.round(imageDrawable.getIntrinsicHeight() / 2f);}}protected void onPullImpl(float scaleOfLayout) {float angle;if (mRotateDrawableWhilePulling) {angle = scaleOfLayout * 90f;} else {angle = Math.max(0f, Math.min(180f, scaleOfLayout * 360f - 180f));}mHeaderImageMatrix.setRotate(angle, mRotationPivotX, mRotationPivotY);mHeaderImage.setImageMatrix(mHeaderImageMatrix);}@Overrideprotected void refreshingImpl() {mHeaderImage.startAnimation(mRotateAnimation);}@Overrideprotected void resetImpl() {mHeaderImage.clearAnimation();resetImageRotation();}private void resetImageRotation() {if (null != mHeaderImageMatrix) {mHeaderImageMatrix.reset();mHeaderImage.setImageMatrix(mHeaderImageMatrix);}}@Overrideprotected void pullToRefreshImpl() {// NO-OP}@Overrideprotected void releaseToRefreshImpl() {// NO-OP}@Overrideprotected int getDefaultDrawableResId() {return R.drawable.default_ptr_rotate;}}",RotateLoadingLayout.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.internal;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Matrix;import android.graphics.drawable.Drawable;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.RotateAnimation;import android.widget.ImageView.ScaleType;import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;import com.handmark.pulltorefresh.library.PullToRefreshBase.Orientation;import com.handmark.pulltorefresh.library.R;@SuppressLint(""ViewConstructor"")public class FlipLoadingLayout extends LoadingLayout {static final int FLIP_ANIMATION_DURATION = 150;private final Animation mRotateAnimation, mResetRotateAnimation;public FlipLoadingLayout(Context context, final Mode mode, final Orientation scrollDirection, TypedArray attrs) {super(context, mode, scrollDirection, attrs);final int rotateAngle = mode == Mode.PULL_FROM_START ? -180 : 180;mRotateAnimation = new RotateAnimation(0, rotateAngle, Animation.RELATIVE_TO_SELF, 0.5f,Animation.RELATIVE_TO_SELF, 0.5f);mRotateAnimation.setInterpolator(ANIMATION_INTERPOLATOR);mRotateAnimation.setDuration(FLIP_ANIMATION_DURATION);mRotateAnimation.setFillAfter(true);mResetRotateAnimation = new RotateAnimation(rotateAngle, 0, Animation.RELATIVE_TO_SELF, 0.5f,Animation.RELATIVE_TO_SELF, 0.5f);mResetRotateAnimation.setInterpolator(ANIMATION_INTERPOLATOR);mResetRotateAnimation.setDuration(FLIP_ANIMATION_DURATION);mResetRotateAnimation.setFillAfter(true);}@Overrideprotected void onLoadingDrawableSet(Drawable imageDrawable) {if (null != imageDrawable) {final int dHeight = imageDrawable.getIntrinsicHeight();final int dWidth = imageDrawable.getIntrinsicWidth();/*** We need to set the width/height of the ImageView so that it is* square with each side the size of the largest drawable dimension.* This is so that it doesn't clip when rotated.*/ViewGroup.LayoutParams lp = mHeaderImage.getLayoutParams();lp.width = lp.height = Math.max(dHeight, dWidth);mHeaderImage.requestLayout();/*** We now rotate the Drawable so that is at the correct rotation,* and is centered.*/mHeaderImage.setScaleType(ScaleType.MATRIX);Matrix matrix = new Matrix();matrix.postTranslate((lp.width - dWidth) / 2f, (lp.height - dHeight) / 2f);matrix.postRotate(getDrawableRotationAngle(), lp.width / 2f, lp.height / 2f);mHeaderImage.setImageMatrix(matrix);}}@Overrideprotected void onPullImpl(float scaleOfLayout) {// NO-OP}@Overrideprotected void pullToRefreshImpl() {// Only start reset Animation, we've previously show the rotate animif (mRotateAnimation == mHeaderImage.getAnimation()) {mHeaderImage.startAnimation(mResetRotateAnimation);}}@Overrideprotected void refreshingImpl() {mHeaderImage.clearAnimation();mHeaderImage.setVisibility(View.INVISIBLE);mHeaderProgress.setVisibility(View.VISIBLE);}@Overrideprotected void releaseToRefreshImpl() {mHeaderImage.startAnimation(mRotateAnimation);}@Overrideprotected void resetImpl() {mHeaderImage.clearAnimation();mHeaderProgress.setVisibility(View.GONE);mHeaderImage.setVisibility(View.VISIBLE);}@Overrideprotected int getDefaultDrawableResId() {return R.drawable.default_ptr_flip;}private float getDrawableRotationAngle() {float angle = 0f;switch (mMode) {case PULL_FROM_END:if (mScrollDirection == Orientation.HORIZONTAL) {angle = 90f;} else {angle = 180f;}break;case PULL_FROM_START:if (mScrollDirection == Orientation.HORIZONTAL) {angle = 270f;}break;default:break;}return angle;}}",FlipLoadingLayout.java,0
200,"package com.handmark.pulltorefresh.library.internal;import android.util.Log;public class Utils {static final String LOG_TAG = ""PullToRefresh"";public static void warnDeprecation(String depreacted, String replacement) {Log.w(LOG_TAG, ""You're using the deprecated "" + depreacted + "" attr, please switch over to "" + replacement);}}",Utils.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.internal;import android.annotation.SuppressLint;import android.content.Context;import android.graphics.Matrix;import android.graphics.drawable.Drawable;import android.view.View;import android.view.animation.Animation;import android.view.animation.Animation.AnimationListener;import android.view.animation.AnimationUtils;import android.view.animation.Interpolator;import android.view.animation.LinearInterpolator;import android.view.animation.RotateAnimation;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.ImageView.ScaleType;import com.handmark.pulltorefresh.library.PullToRefreshBase;import com.handmark.pulltorefresh.library.R;@SuppressLint(""ViewConstructor"")public class IndicatorLayout extends FrameLayout implements AnimationListener {static final int DEFAULT_ROTATION_ANIMATION_DURATION = 150;private Animation mInAnim, mOutAnim;private ImageView mArrowImageView;private final Animation mRotateAnimation, mResetRotateAnimation;public IndicatorLayout(Context context, PullToRefreshBase.Mode mode) {super(context);mArrowImageView = new ImageView(context);Drawable arrowD = getResources().getDrawable(R.drawable.indicator_arrow);mArrowImageView.setImageDrawable(arrowD);final int padding = getResources().getDimensionPixelSize(R.dimen.indicator_internal_padding);mArrowImageView.setPadding(padding, padding, padding, padding);addView(mArrowImageView);int inAnimResId, outAnimResId;switch (mode) {case PULL_FROM_END:inAnimResId = R.anim.slide_in_from_bottom;outAnimResId = R.anim.slide_out_to_bottom;setBackgroundResource(R.drawable.indicator_bg_bottom);// Rotate Arrow so it's pointing the correct waymArrowImageView.setScaleType(ScaleType.MATRIX);Matrix matrix = new Matrix();matrix.setRotate(180f, arrowD.getIntrinsicWidth() / 2f, arrowD.getIntrinsicHeight() / 2f);mArrowImageView.setImageMatrix(matrix);break;default:case PULL_FROM_START:inAnimResId = R.anim.slide_in_from_top;outAnimResId = R.anim.slide_out_to_top;setBackgroundResource(R.drawable.indicator_bg_top);break;}mInAnim = AnimationUtils.loadAnimation(context, inAnimResId);mInAnim.setAnimationListener(this);mOutAnim = AnimationUtils.loadAnimation(context, outAnimResId);mOutAnim.setAnimationListener(this);final Interpolator interpolator = new LinearInterpolator();mRotateAnimation = new RotateAnimation(0, -180, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,0.5f);mRotateAnimation.setInterpolator(interpolator);mRotateAnimation.setDuration(DEFAULT_ROTATION_ANIMATION_DURATION);mRotateAnimation.setFillAfter(true);mResetRotateAnimation = new RotateAnimation(-180, 0, Animation.RELATIVE_TO_SELF, 0.5f,Animation.RELATIVE_TO_SELF, 0.5f);mResetRotateAnimation.setInterpolator(interpolator);mResetRotateAnimation.setDuration(DEFAULT_ROTATION_ANIMATION_DURATION);mResetRotateAnimation.setFillAfter(true);}public final boolean isVisible() {Animation currentAnim = getAnimation();if (null != currentAnim) {return mInAnim == currentAnim;}return getVisibility() == View.VISIBLE;}public void hide() {startAnimation(mOutAnim);}public void show() {mArrowImageView.clearAnimation();startAnimation(mInAnim);}@Overridepublic void onAnimationEnd(Animation animation) {if (animation == mOutAnim) {mArrowImageView.clearAnimation();setVisibility(View.GONE);} else if (animation == mInAnim) {setVisibility(View.VISIBLE);}clearAnimation();}@Overridepublic void onAnimationRepeat(Animation animation) {// NO-OP}@Overridepublic void onAnimationStart(Animation animation) {setVisibility(View.VISIBLE);}public void releaseToRefresh() {mArrowImageView.startAnimation(mRotateAnimation);}public void pullToRefresh() {mArrowImageView.startAnimation(mResetRotateAnimation);}}",IndicatorLayout.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.internal;import android.view.View;/*** Interface that allows PullToRefreshBase to hijack the call to* AdapterView.setEmptyView()** @author chris*/public interface EmptyViewMethodAccessor {/*** Calls upto AdapterView.setEmptyView()** @param emptyView - to set as Empty View*/public void setEmptyViewInternal(View emptyView);/*** Should call PullToRefreshBase.setEmptyView() which will then* automatically call through to setEmptyViewInternal()** @param emptyView - to set as Empty View*/public void setEmptyView(View emptyView);}",EmptyViewMethodAccessor.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.annotation.TargetApi;import android.content.Context;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.util.AttributeSet;import android.view.View;import android.widget.HorizontalScrollView;public class PullToRefreshHorizontalScrollView extends PullToRefreshBase<HorizontalScrollView> {public PullToRefreshHorizontalScrollView(Context context) {super(context);}public PullToRefreshHorizontalScrollView(Context context, AttributeSet attrs) {super(context, attrs);}public PullToRefreshHorizontalScrollView(Context context, Mode mode) {super(context, mode);}public PullToRefreshHorizontalScrollView(Context context, Mode mode, AnimationStyle style) {super(context, mode, style);}@Overridepublic final Orientation getPullToRefreshScrollDirection() {return Orientation.HORIZONTAL;}@Overrideprotected HorizontalScrollView createRefreshableView(Context context, AttributeSet attrs) {HorizontalScrollView scrollView;if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {scrollView = new InternalHorizontalScrollViewSDK9(context, attrs);} else {scrollView = new HorizontalScrollView(context, attrs);}scrollView.setId(R.id.scrollview);return scrollView;}@Overrideprotected boolean isReadyForPullStart() {return mRefreshableView.getScrollX() == 0;}@Overrideprotected boolean isReadyForPullEnd() {View scrollViewChild = mRefreshableView.getChildAt(0);if (null != scrollViewChild) {return mRefreshableView.getScrollX() >= (scrollViewChild.getWidth() - getWidth());}return false;}@TargetApi(9)final class InternalHorizontalScrollViewSDK9 extends HorizontalScrollView {public InternalHorizontalScrollViewSDK9(Context context, AttributeSet attrs) {super(context, attrs);}@Overrideprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);// Does all of the hard work...OverscrollHelper.overScrollBy(PullToRefreshHorizontalScrollView.this, deltaX, scrollX, deltaY, scrollY,getScrollRange(), isTouchEvent);return returnValue;}/*** Taken from the AOSP ScrollView source*/private int getScrollRange() {int scrollRange = 0;if (getChildCount() > 0) {View child = getChildAt(0);scrollRange = Math.max(0, child.getWidth() - (getWidth() - getPaddingLeft() - getPaddingRight()));}return scrollRange;}}}",PullToRefreshHorizontalScrollView.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.content.Context;import android.content.res.TypedArray;import android.util.AttributeSet;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.ViewGroup;import android.view.ViewParent;import android.widget.AbsListView;import android.widget.AbsListView.OnScrollListener;import android.widget.Adapter;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.FrameLayout;import android.widget.LinearLayout;import android.widget.ListAdapter;import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;import com.handmark.pulltorefresh.library.internal.IndicatorLayout;public abstract class PullToRefreshAdapterViewBase<T extends AbsListView> extends PullToRefreshBase<T> implementsOnScrollListener {private static FrameLayout.LayoutParams convertEmptyViewLayoutParams(ViewGroup.LayoutParams lp) {FrameLayout.LayoutParams newLp = null;if (null != lp) {newLp = new FrameLayout.LayoutParams(lp);if (lp instanceof LinearLayout.LayoutParams) {newLp.gravity = ((LinearLayout.LayoutParams) lp).gravity;} else {newLp.gravity = Gravity.CENTER;}}return newLp;}private boolean mLastItemVisible;private OnScrollListener mOnScrollListener;private OnLastItemVisibleListener mOnLastItemVisibleListener;private View mEmptyView;private IndicatorLayout mIndicatorIvTop;private IndicatorLayout mIndicatorIvBottom;private boolean mShowIndicator;private boolean mScrollEmptyView = true;public PullToRefreshAdapterViewBase(Context context) {super(context);mRefreshableView.setOnScrollListener(this);}public PullToRefreshAdapterViewBase(Context context, AttributeSet attrs) {super(context, attrs);mRefreshableView.setOnScrollListener(this);}public PullToRefreshAdapterViewBase(Context context, Mode mode) {super(context, mode);mRefreshableView.setOnScrollListener(this);}public PullToRefreshAdapterViewBase(Context context, Mode mode, AnimationStyle animStyle) {super(context, mode, animStyle);mRefreshableView.setOnScrollListener(this);}/*** Gets whether an indicator graphic should be displayed when the View is in* a state where a Pull-to-Refresh can happen. An example of this state is* when the Adapter View is scrolled to the top and the mode is set to* {@link Mode#PULL_FROM_START}. The default value is <var>true</var> if* {@link PullToRefreshBase#isPullToRefreshOverScrollEnabled()* isPullToRefreshOverScrollEnabled()} returns false.** @return true if the indicators will be shown*/public boolean getShowIndicator() {return mShowIndicator;}public final void onScroll(final AbsListView view, final int firstVisibleItem, final int visibleItemCount,final int totalItemCount) {if (DEBUG) {Log.d(LOG_TAG, ""First Visible: "" + firstVisibleItem + "". Visible Count: "" + visibleItemCount+ "". Total Items:"" + totalItemCount);}/*** Set whether the Last Item is Visible. lastVisibleItemIndex is a* zero-based index, so we minus one totalItemCount to check*/if (null != mOnLastItemVisibleListener) {mLastItemVisible = (totalItemCount > 0) && (firstVisibleItem + visibleItemCount >= totalItemCount - 1);}// If we're showing the indicator, check positions...if (getShowIndicatorInternal()) {updateIndicatorViewsVisibility();}// Finally call OnScrollListener if we have oneif (null != mOnScrollListener) {mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);}}public final void onScrollStateChanged(final AbsListView view, final int state) {/*** Check that the scrolling has stopped, and that the last item is* visible.*/if (state == OnScrollListener.SCROLL_STATE_IDLE && null != mOnLastItemVisibleListener && mLastItemVisible) {mOnLastItemVisibleListener.onLastItemVisible();}if (null != mOnScrollListener) {mOnScrollListener.onScrollStateChanged(view, state);}}/*** Pass-through method for {@link PullToRefreshBase#getRefreshableView()* getRefreshableView()}.* {@link AdapterView#setAdapter(android.widget.Adapter)}* setAdapter(adapter)}. This is just for convenience!** @param adapter - Adapter to set*/public void setAdapter(ListAdapter adapter) {((AdapterView<ListAdapter>) mRefreshableView).setAdapter(adapter);}/*** Sets the Empty View to be used by the Adapter View.* <p/>* We need it handle it ourselves so that we can Pull-to-Refresh when the* Empty View is shown.* <p/>* Please note, you do <strong>not</strong> usually need to call this method* yourself. Calling setEmptyView on the AdapterView will automatically call* this method and set everything up. This includes when the Android* Framework automatically sets the Empty View based on it's ID.** @param newEmptyView - Empty View to be used*/public final void setEmptyView(View newEmptyView) {FrameLayout refreshableViewWrapper = getRefreshableViewWrapper();if (null != newEmptyView) {// New view needs to be clickable so that Android recognizes it as a// target for Touch EventsnewEmptyView.setClickable(true);ViewParent newEmptyViewParent = newEmptyView.getParent();if (null != newEmptyViewParent && newEmptyViewParent instanceof ViewGroup) {((ViewGroup) newEmptyViewParent).removeView(newEmptyView);}// We need to convert any LayoutParams so that it works in our// FrameLayoutFrameLayout.LayoutParams lp = convertEmptyViewLayoutParams(newEmptyView.getLayoutParams());if (null != lp) {refreshableViewWrapper.addView(newEmptyView, lp);} else {refreshableViewWrapper.addView(newEmptyView);}}if (mRefreshableView instanceof EmptyViewMethodAccessor) {((EmptyViewMethodAccessor) mRefreshableView).setEmptyViewInternal(newEmptyView);} else {mRefreshableView.setEmptyView(newEmptyView);}mEmptyView = newEmptyView;}/*** Pass-through method for {@link PullToRefreshBase#getRefreshableView()* getRefreshableView()}.* {@link AdapterView#setOnItemClickListener(OnItemClickListener)* setOnItemClickListener(listener)}. This is just for convenience!** @param listener - OnItemClickListener to use*/public void setOnItemClickListener(OnItemClickListener listener) {mRefreshableView.setOnItemClickListener(listener);}public final void setOnLastItemVisibleListener(OnLastItemVisibleListener listener) {mOnLastItemVisibleListener = listener;}public final void setOnScrollListener(OnScrollListener listener) {mOnScrollListener = listener;}public final void setScrollEmptyView(boolean doScroll) {mScrollEmptyView = doScroll;}/*** Sets whether an indicator graphic should be displayed when the View is in* a state where a Pull-to-Refresh can happen. An example of this state is* when the Adapter View is scrolled to the top and the mode is set to* {@link Mode#PULL_FROM_START}** @param showIndicator - true if the indicators should be shown.*/public void setShowIndicator(boolean showIndicator) {mShowIndicator = showIndicator;if (getShowIndicatorInternal()) {// If we're set to Show Indicator, add/update themaddIndicatorViews();} else {// If not, then remove thenremoveIndicatorViews();}};@Overrideprotected void onPullToRefresh() {super.onPullToRefresh();if (getShowIndicatorInternal()) {switch (getCurrentMode()) {case PULL_FROM_END:mIndicatorIvBottom.pullToRefresh();break;case PULL_FROM_START:mIndicatorIvTop.pullToRefresh();break;default:// NO-OPbreak;}}}protected void onRefreshing(boolean doScroll) {super.onRefreshing(doScroll);if (getShowIndicatorInternal()) {updateIndicatorViewsVisibility();}}@Overrideprotected void onReleaseToRefresh() {super.onReleaseToRefresh();if (getShowIndicatorInternal()) {switch (getCurrentMode()) {case PULL_FROM_END:mIndicatorIvBottom.releaseToRefresh();break;case PULL_FROM_START:mIndicatorIvTop.releaseToRefresh();break;default:// NO-OPbreak;}}}@Overrideprotected void onReset() {super.onReset();if (getShowIndicatorInternal()) {updateIndicatorViewsVisibility();}}@Overrideprotected void handleStyledAttributes(TypedArray a) {// Set Show Indicator to the XML value, or default valuemShowIndicator = a.getBoolean(R.styleable.PullToRefresh_ptrShowIndicator, !isPullToRefreshOverScrollEnabled());}protected boolean isReadyForPullStart() {return isFirstItemVisible();}protected boolean isReadyForPullEnd() {return isLastItemVisible();}@Overrideprotected void onScrollChanged(int l, int t, int oldl, int oldt) {super.onScrollChanged(l, t, oldl, oldt);if (null != mEmptyView && !mScrollEmptyView) {mEmptyView.scrollTo(-l, -t);}}@Overrideprotected void updateUIForMode() {super.updateUIForMode();// Check Indicator Views consistent with new Modeif (getShowIndicatorInternal()) {addIndicatorViews();} else {removeIndicatorViews();}}private void addIndicatorViews() {Mode mode = getMode();FrameLayout refreshableViewWrapper = getRefreshableViewWrapper();if (mode.showHeaderLoadingLayout() && null == mIndicatorIvTop) {// If the mode can pull down, and we don't have one set alreadymIndicatorIvTop = new IndicatorLayout(getContext(), Mode.PULL_FROM_START);FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);params.rightMargin = getResources().getDimensionPixelSize(R.dimen.indicator_right_padding);params.gravity = Gravity.TOP | Gravity.RIGHT;refreshableViewWrapper.addView(mIndicatorIvTop, params);} else if (!mode.showHeaderLoadingLayout() && null != mIndicatorIvTop) {// If we can't pull down, but have a View then remove itrefreshableViewWrapper.removeView(mIndicatorIvTop);mIndicatorIvTop = null;}if (mode.showFooterLoadingLayout() && null == mIndicatorIvBottom) {// If the mode can pull down, and we don't have one set alreadymIndicatorIvBottom = new IndicatorLayout(getContext(), Mode.PULL_FROM_END);FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);params.rightMargin = getResources().getDimensionPixelSize(R.dimen.indicator_right_padding);params.gravity = Gravity.BOTTOM | Gravity.RIGHT;refreshableViewWrapper.addView(mIndicatorIvBottom, params);} else if (!mode.showFooterLoadingLayout() && null != mIndicatorIvBottom) {// If we can't pull down, but have a View then remove itrefreshableViewWrapper.removeView(mIndicatorIvBottom);mIndicatorIvBottom = null;}}private boolean getShowIndicatorInternal() {return mShowIndicator && isPullToRefreshEnabled();}private boolean isFirstItemVisible() {final Adapter adapter = mRefreshableView.getAdapter();if (null == adapter || adapter.isEmpty()) {if (DEBUG) {Log.d(LOG_TAG, ""isFirstItemVisible. Empty View."");}return true;} else {/*** This check should really just be:* mRefreshableView.getFirstVisiblePosition() == 0, but PtRListView* internally use a HeaderView which messes the positions up. For* now we'll just add one to account for it and rely on the inner* condition which checks getTop().*/if (mRefreshableView.getFirstVisiblePosition() <= 1) {final View firstVisibleChild = mRefreshableView.getChildAt(0);if (firstVisibleChild != null) {return firstVisibleChild.getTop() >= mRefreshableView.getTop();}}}return false;}private boolean isLastItemVisible() {final Adapter adapter = mRefreshableView.getAdapter();if (null == adapter || adapter.isEmpty()) {if (DEBUG) {Log.d(LOG_TAG, ""isLastItemVisible. Empty View."");}return true;} else {final int lastItemPosition = mRefreshableView.getCount() - 1;final int lastVisiblePosition = mRefreshableView.getLastVisiblePosition();if (DEBUG) {Log.d(LOG_TAG, ""isLastItemVisible. Last Item Position: "" + lastItemPosition + "" Last Visible Pos: ""+ lastVisiblePosition);}/*** This check should really just be: lastVisiblePosition ==* lastItemPosition, but PtRListView internally uses a FooterView* which messes the positions up. For me we'll just subtract one to* account for it and rely on the inner condition which checks* getBottom().*/if (lastVisiblePosition >= lastItemPosition - 1) {final int childIndex = lastVisiblePosition - mRefreshableView.getFirstVisiblePosition();final View lastVisibleChild = mRefreshableView.getChildAt(childIndex);if (lastVisibleChild != null) {return lastVisibleChild.getBottom() <= mRefreshableView.getBottom();}}}return false;}private void removeIndicatorViews() {if (null != mIndicatorIvTop) {getRefreshableViewWrapper().removeView(mIndicatorIvTop);mIndicatorIvTop = null;}if (null != mIndicatorIvBottom) {getRefreshableViewWrapper().removeView(mIndicatorIvBottom);mIndicatorIvBottom = null;}}private void updateIndicatorViewsVisibility() {if (null != mIndicatorIvTop) {if (!isRefreshing() && isReadyForPullStart()) {if (!mIndicatorIvTop.isVisible()) {mIndicatorIvTop.show();}} else {if (mIndicatorIvTop.isVisible()) {mIndicatorIvTop.hide();}}}if (null != mIndicatorIvBottom) {if (!isRefreshing() && isReadyForPullEnd()) {if (!mIndicatorIvBottom.isVisible()) {mIndicatorIvBottom.show();}} else {if (mIndicatorIvBottom.isVisible()) {mIndicatorIvBottom.hide();}}}}}",PullToRefreshAdapterViewBase.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.annotation.TargetApi;import android.content.Context;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.util.AttributeSet;import android.view.View;import android.widget.GridView;import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;public class PullToRefreshGridView extends PullToRefreshAdapterViewBase<GridView> {public PullToRefreshGridView(Context context) {super(context);}public PullToRefreshGridView(Context context, AttributeSet attrs) {super(context, attrs);}public PullToRefreshGridView(Context context, Mode mode) {super(context, mode);}public PullToRefreshGridView(Context context, Mode mode, AnimationStyle style) {super(context, mode, style);}@Overridepublic final Orientation getPullToRefreshScrollDirection() {return Orientation.VERTICAL;}@Overrideprotected final GridView createRefreshableView(Context context, AttributeSet attrs) {final GridView gv;if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {gv = new InternalGridViewSDK9(context, attrs);} else {gv = new InternalGridView(context, attrs);}// Use Generated ID (from res/values/ids.xml)gv.setId(R.id.gridview);return gv;}class InternalGridView extends GridView implements EmptyViewMethodAccessor {public InternalGridView(Context context, AttributeSet attrs) {super(context, attrs);}@Overridepublic void setEmptyView(View emptyView) {PullToRefreshGridView.this.setEmptyView(emptyView);}@Overridepublic void setEmptyViewInternal(View emptyView) {super.setEmptyView(emptyView);}}@TargetApi(9)final class InternalGridViewSDK9 extends InternalGridView {public InternalGridViewSDK9(Context context, AttributeSet attrs) {super(context, attrs);}@Overrideprotected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);// Does all of the hard work...OverscrollHelper.overScrollBy(PullToRefreshGridView.this, deltaX, scrollX, deltaY, scrollY, isTouchEvent);return returnValue;}}}",PullToRefreshGridView.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library;import android.view.View;import android.view.animation.Interpolator;import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;import com.handmark.pulltorefresh.library.PullToRefreshBase.OnPullEventListener;import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;import com.handmark.pulltorefresh.library.PullToRefreshBase.State;public interface IPullToRefresh<T extends View> {/*** Demos the Pull-to-Refresh functionality to the user so that they are* aware it is there. This could be useful when the user first opens your* app, etc. The animation will only happen if the Refresh View (ListView,* ScrollView, etc) is in a state where a Pull-to-Refresh could occur by a* user's touch gesture (i.e. scrolled to the top/bottom).** @return true - if the Demo has been started, false if not.*/public boolean demo();/*** Get the mode that this view is currently in. This is only really useful* when using <code>Mode.BOTH</code>.** @return Mode that the view is currently in*/public Mode getCurrentMode();/*** Returns whether the Touch Events are filtered or not. If true is* returned, then the View will only use touch events where the difference* in the Y-axis is greater than the difference in the X-axis. This means* that the View will not interfere when it is used in a horizontal* scrolling View (such as a ViewPager).** @return boolean - true if the View is filtering Touch Events*/public boolean getFilterTouchEvents();/*** Returns a proxy object which allows you to call methods on all of the* LoadingLayouts (the Views which show when Pulling/Refreshing).* <p />* You should not keep the result of this method any longer than you need* it.** @return Object which will proxy any calls you make on it, to all of the*         LoadingLayouts.*/public ILoadingLayout getLoadingLayoutProxy();/*** Returns a proxy object which allows you to call methods on the* LoadingLayouts (the Views which show when Pulling/Refreshing). The actual* LoadingLayout(s) which will be affected, are chosen by the parameters you* give.* <p />* You should not keep the result of this method any longer than you need* it.** @param includeStart - Whether to include the Start/Header Views* @param includeEnd - Whether to include the End/Footer Views* @return Object which will proxy any calls you make on it, to the*         LoadingLayouts included.*/public ILoadingLayout getLoadingLayoutProxy(boolean includeStart, boolean includeEnd);/*** Get the mode that this view has been set to. If this returns* <code>Mode.BOTH</code>, you can use <code>getCurrentMode()</code> to* check which mode the view is currently in** @return Mode that the view has been set to*/public Mode getMode();/*** Get the Wrapped Refreshable View. Anything returned here has already been* added to the content view.** @return The View which is currently wrapped*/public T getRefreshableView();/*** Get whether the 'Refreshing' View should be automatically shown when* refreshing. Returns true by default.** @return - true if the Refreshing View will be show*/public boolean getShowViewWhileRefreshing();/*** @return - The state that the View is currently in.*/public State getState();/*** Whether Pull-to-Refresh is enabled** @return enabled*/public boolean isPullToRefreshEnabled();/*** Gets whether Overscroll support is enabled. This is different to* Android's standard Overscroll support (the edge-glow) which is available* from GINGERBREAD onwards** @return true - if both PullToRefresh-OverScroll and Android's inbuilt*         OverScroll are enabled*/public boolean isPullToRefreshOverScrollEnabled();/*** Returns whether the Widget is currently in the Refreshing mState** @return true if the Widget is currently refreshing*/public boolean isRefreshing();/*** Returns whether the widget has enabled scrolling on the Refreshable View* while refreshing.** @return true if the widget has enabled scrolling while refreshing*/public boolean isScrollingWhileRefreshingEnabled();/*** Mark the current Refresh as complete. Will Reset the UI and hide the* Refreshing View*/public void onRefreshComplete();/*** Set the Touch Events to be filtered or not. If set to true, then the View* will only use touch events where the difference in the Y-axis is greater* than the difference in the X-axis. This means that the View will not* interfere when it is used in a horizontal scrolling View (such as a* ViewPager), but will restrict which types of finger scrolls will trigger* the View.** @param filterEvents - true if you want to filter Touch Events. Default is*            true.*/public void setFilterTouchEvents(boolean filterEvents);/*** Set the mode of Pull-to-Refresh that this view will use.** @param mode - Mode to set the View to*/public void setMode(Mode mode);/*** Set OnPullEventListener for the Widget** @param listener - Listener to be used when the Widget has a pull event to*            propogate.*/public void setOnPullEventListener(OnPullEventListener<T> listener);/*** Set OnRefreshListener for the Widget** @param listener - Listener to be used when the Widget is set to Refresh*/public void setOnRefreshListener(OnRefreshListener<T> listener);/*** Set OnRefreshListener for the Widget** @param listener - Listener to be used when the Widget is set to Refresh*/public void setOnRefreshListener(OnRefreshListener2<T> listener);/*** Sets whether Overscroll support is enabled. This is different to* Android's standard Overscroll support (the edge-glow). This setting only* takes effect when running on device with Android v2.3 or greater.** @param enabled - true if you want Overscroll enabled*/public void setPullToRefreshOverScrollEnabled(boolean enabled);/*** Sets the Widget to be in the refresh state. The UI will be updated to* show the 'Refreshing' view, and be scrolled to show such.*/public void setRefreshing();/*** Sets the Widget to be in the refresh state. The UI will be updated to* show the 'Refreshing' view.** @param doScroll - true if you want to force a scroll to the Refreshing*            view.*/public void setRefreshing(boolean doScroll);/*** Sets the Animation Interpolator that is used for animated scrolling.* Defaults to a DecelerateInterpolator** @param interpolator - Interpolator to use*/public void setScrollAnimationInterpolator(Interpolator interpolator);/*** By default the Widget disables scrolling on the Refreshable View while* refreshing. This method can change this behaviour.** @param scrollingWhileRefreshingEnabled - true if you want to enable*            scrolling while refreshing*/public void setScrollingWhileRefreshingEnabled(boolean scrollingWhileRefreshingEnabled);/*** A mutator to enable/disable whether the 'Refreshing' View should be* automatically shown when refreshing.** @param showView*/public void setShowViewWhileRefreshing(boolean showView);/*** Sets the ratio in which we start the release-to-refresh state (e.g. if ratio = 2, only when the* user pulls the list twice as much, then we'll enter the release-to-refresh state).* @param ratio the ratio*/public void setReleaseRatio(float ratio);}",IPullToRefresh.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.extras;import java.util.HashMap;import android.content.Context;import android.media.MediaPlayer;import android.view.View;import com.handmark.pulltorefresh.library.PullToRefreshBase;import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;import com.handmark.pulltorefresh.library.PullToRefreshBase.State;public class SoundPullEventListener<V extends View> implements PullToRefreshBase.OnPullEventListener<V> {private final Context mContext;private final HashMap<State, Integer> mSoundMap;private MediaPlayer mCurrentMediaPlayer;/*** Constructor** @param context - Context*/public SoundPullEventListener(Context context) {mContext = context;mSoundMap = new HashMap<State, Integer>();}@Overridepublic final void onPullEvent(PullToRefreshBase<V> refreshView, State event, Mode direction) {Integer soundResIdObj = mSoundMap.get(event);if (null != soundResIdObj) {playSound(soundResIdObj.intValue());}}/*** Set the Sounds to be played when a Pull Event happens. You specify which* sound plays for which events by calling this method multiple times for* each event.* <p/>* If you've already set a sound for a certain event, and add another sound* for that event, only the new sound will be played.** @param event - The event for which the sound will be played.* @param resId - Resource Id of the sound file to be played (e.g.*            <var>R.raw.pull_sound</var>)*/public void addSoundEvent(State event, int resId) {mSoundMap.put(event, resId);}/*** Clears all of the previously set sounds and events.*/public void clearSounds() {mSoundMap.clear();}/*** Gets the current (or last) MediaPlayer instance.*/public MediaPlayer getCurrentMediaPlayer() {return mCurrentMediaPlayer;}private void playSound(int resId) {// Stop current player, if there's one playingif (null != mCurrentMediaPlayer) {mCurrentMediaPlayer.stop();mCurrentMediaPlayer.release();}mCurrentMediaPlayer = MediaPlayer.create(mContext, resId);if (null != mCurrentMediaPlayer) {mCurrentMediaPlayer.start();}}}",SoundPullEventListener.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package com.handmark.pulltorefresh.library.extras;import java.util.concurrent.atomic.AtomicBoolean;import android.content.Context;import android.util.AttributeSet;import android.webkit.WebView;import com.handmark.pulltorefresh.library.PullToRefreshWebView;/*** An advanced version of {@link PullToRefreshWebView} which delegates the* triggering of the PullToRefresh gesture to the Javascript running within the* WebView. This means that you should only use this class if:* <p/>* <ul>* <li>{@link PullToRefreshWebView} doesn't work correctly because you're using* <code>overflow:scroll</code> or something else which means* {@link WebView#getScrollY()} doesn't return correct values.</li>* <li>You control the web content being displayed, as you need to write some* Javascript callbacks.</li>* </ul>* <p/>* <p/>* The way this call works is that when a PullToRefresh gesture is in action,* the following Javascript methods will be called:* <code>isReadyForPullDown()</code> and <code>isReadyForPullUp()</code>, it is* your job to calculate whether the view is in a state where a PullToRefresh* can happen, and return the result via the callback mechanism. An example can* be seen below:* <p/>** <pre>* function isReadyForPullDown() {*   var result = ...  // Probably using the .scrollTop DOM attribute*   ptr.isReadyForPullDownResponse(result);* }** function isReadyForPullUp() {*   var result = ...  // Probably using the .scrollBottom DOM attribute*   ptr.isReadyForPullUpResponse(result);* }* </pre>** @author Chris Banes*/public class PullToRefreshWebView2 extends PullToRefreshWebView {static final String JS_INTERFACE_PKG = ""ptr"";static final String DEF_JS_READY_PULL_DOWN_CALL = ""javascript:isReadyForPullDown();"";static final String DEF_JS_READY_PULL_UP_CALL = ""javascript:isReadyForPullUp();"";public PullToRefreshWebView2(Context context) {super(context);}public PullToRefreshWebView2(Context context, AttributeSet attrs) {super(context, attrs);}public PullToRefreshWebView2(Context context, Mode mode) {super(context, mode);}private JsValueCallback mJsCallback;private final AtomicBoolean mIsReadyForPullDown = new AtomicBoolean(false);private final AtomicBoolean mIsReadyForPullUp = new AtomicBoolean(false);@Overrideprotected WebView createRefreshableView(Context context, AttributeSet attrs) {WebView webView = super.createRefreshableView(context, attrs);// Need to add JS Interface so we can get the response backmJsCallback = new JsValueCallback();webView.addJavascriptInterface(mJsCallback, JS_INTERFACE_PKG);return webView;}@Overrideprotected boolean isReadyForPullStart() {// Call Javascript...getRefreshableView().loadUrl(DEF_JS_READY_PULL_DOWN_CALL);// Response will be given to JsValueCallback, which will update// mIsReadyForPullDownreturn mIsReadyForPullDown.get();}@Overrideprotected boolean isReadyForPullEnd() {// Call Javascript...getRefreshableView().loadUrl(DEF_JS_READY_PULL_UP_CALL);// Response will be given to JsValueCallback, which will update// mIsReadyForPullUpreturn mIsReadyForPullUp.get();}/*** Used for response from Javascript** @author Chris Banes*/final class JsValueCallback {public void isReadyForPullUpResponse(boolean response) {mIsReadyForPullUp.set(response);}public void isReadyForPullDownResponse(boolean response) {mIsReadyForPullDown.set(response);}}}",PullToRefreshWebView2.java,0
200,"package com.koushikdutta.urlimageviewhelper;import java.lang.ref.SoftReference;import java.util.Hashtable;public class SoftReferenceHashTable<K,V> {Hashtable<K, SoftReference<V>> mTable = new Hashtable<K, SoftReference<V>>();public V put(K key, V value) {SoftReference<V> old = mTable.put(key, new SoftReference<V>(value));if (old == null)return null;return old.get();}public V get(K key) {SoftReference<V> val = mTable.get(key);if (val == null)return null;V ret = val.get();if (ret == null)mTable.remove(key);return ret;}public V remove(K k) {SoftReference<V> v = mTable.remove(k);if (v == null)return null;return v.get();}}",SoftReferenceHashTable.java,0
200,"package com.koushikdutta.urlimageviewhelper;import java.io.InputStream;import android.content.Context;public interface UrlDownloader {public static interface UrlDownloaderCallback {public void onDownloadComplete(UrlDownloader downloader, InputStream in, String filename);}public void download(Context context, String url, String filename, UrlDownloaderCallback callback, Runnable completion);public boolean allowCache();public boolean canDownloadUrl(String url);}",UrlDownloader.java,0
200,"package com.koushikdutta.urlimageviewhelper;import java.io.InputStream;import android.content.ContentResolver;import android.content.Context;import android.net.Uri;import android.os.AsyncTask;public class ContentUrlDownloader implements UrlDownloader {@Overridepublic void download(final Context context, final String url, final String filename, final UrlDownloaderCallback callback, final Runnable completion) {final AsyncTask<Void, Void, Void> downloader = new AsyncTask<Void, Void, Void>() {@Overrideprotected Void doInBackground(final Void... params) {try {final ContentResolver cr = context.getContentResolver();InputStream is = cr.openInputStream(Uri.parse(url));callback.onDownloadComplete(ContentUrlDownloader.this, is, null);return null;}catch (final Throwable e) {e.printStackTrace();return null;}}@Overrideprotected void onPostExecute(final Void result) {completion.run();}};UrlImageViewHelper.executeTask(downloader);}@Overridepublic boolean allowCache() {return false;}@Overridepublic boolean canDownloadUrl(String url) {return url.startsWith(ContentResolver.SCHEME_CONTENT);}}",ContentUrlDownloader.java,0
200,"package com.koushikdutta.urlimageviewhelper;import android.graphics.drawable.Drawable;public final class DrawableCache extends SoftReferenceHashTable<String, Drawable> {private static DrawableCache mInstance = new DrawableCache();public static DrawableCache getInstance() {return mInstance;}private DrawableCache() {}}",DrawableCache.java,0
200,"package com.koushikdutta.urlimageviewhelper;import android.graphics.Bitmap;public class LruBitmapCache extends LruCache<String, Bitmap> {public LruBitmapCache(int maxSize) {super(maxSize);}@Overrideprotected int sizeOf(String key, Bitmap value) {return value.getRowBytes() * value.getHeight();}}",LruBitmapCache.java,0
200,"package com.koushikdutta.urlimageviewhelper;import java.io.InputStream;import android.content.ContentResolver;import android.content.Context;import android.net.Uri;import android.os.AsyncTask;import android.provider.ContactsContract;public class ContactContentUrlDownloader implements UrlDownloader {@Overridepublic void download(final Context context, final String url, final String filename, final UrlDownloaderCallback callback, final Runnable completion) {final AsyncTask<Void, Void, Void> downloader = new AsyncTask<Void, Void, Void>() {@Overrideprotected Void doInBackground(final Void... params) {try {final ContentResolver cr = context.getContentResolver();InputStream is = ContactsContract.Contacts.openContactPhotoInputStream(cr, Uri.parse(url));callback.onDownloadComplete(ContactContentUrlDownloader.this, is, null);return null;}catch (final Throwable e) {e.printStackTrace();return null;}}@Overrideprotected void onPostExecute(final Void result) {completion.run();}};UrlImageViewHelper.executeTask(downloader);}@Overridepublic boolean allowCache() {return false;}@Overridepublic boolean canDownloadUrl(String url) {return url.startsWith(ContactsContract.Contacts.CONTENT_URI.toString());}}",ContactContentUrlDownloader.java,0
200,"package com.koushikdutta.urlimageviewhelper;import java.io.InputStream;import android.content.Context;import android.os.AsyncTask;public class AssetUrlDownloader implements UrlDownloader {@Overridepublic void download(final Context context, final String url, final String filename,final UrlDownloaderCallback callback, final Runnable completion) {final AsyncTask<Void, Void, Void> downloader = new AsyncTask<Void, Void, Void>() {@Overrideprotected Void doInBackground(final Void... params) {try {String relativePath = url.replaceFirst(""file:///android_asset/"", """");InputStream is = context.getAssets().open(relativePath);callback.onDownloadComplete(AssetUrlDownloader.this, is, null);return null;}catch (final Throwable e) {e.printStackTrace();return null;}}@Overrideprotected void onPostExecute(final Void result) {completion.run();}};UrlImageViewHelper.executeTask(downloader);}@Overridepublic boolean allowCache() {return false;}@Overridepublic boolean canDownloadUrl(String url) {return url.startsWith(""file:///android_asset/"");}}",AssetUrlDownloader.java,0
200,"/** Copyright (C) 2011 The Android Open Source Project** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at**      http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*/package com.koushikdutta.urlimageviewhelper;import java.util.LinkedHashMap;import java.util.Map;/*** Static library version of {@link android.util.LruCache}. Used to write apps* that run on API levels prior to 12. When running on API level 12 or above,* this implementation is still used; it does not try to switch to the* framework's implementation. See the framework SDK documentation for a class* overview.*/public class LruCache<K, V> {private final LinkedHashMap<K, V> map;/** Size of this cache in units. Not necessarily the number of elements. */private int size;private int maxSize;private int putCount;private int createCount;private int evictionCount;private int hitCount;private int missCount;/*** @param maxSize for caches that do not override {@link #sizeOf}, this is*     the maximum number of entries in the cache. For all other caches,*     this is the maximum sum of the sizes of the entries in this cache.*/public LruCache(int maxSize) {if (maxSize <= 0) {throw new IllegalArgumentException(""maxSize <= 0"");}this.maxSize = maxSize;this.map = new LinkedHashMap<K, V>(0, 0.75f, true);}/*** Returns the value for {@code key} if it exists in the cache or can be* created by {@code #create}. If a value was returned, it is moved to the* head of the queue. This returns null if a value is not cached and cannot* be created.*/public final V get(K key) {if (key == null) {throw new NullPointerException(""key == null"");}V mapValue;synchronized (this) {mapValue = map.get(key);if (mapValue != null) {hitCount++;return mapValue;}missCount++;}/** Attempt to create a value. This may take a long time, and the map* may be different when create() returns. If a conflicting value was* added to the map while create() was working, we leave that value in* the map and release the created value.*/V createdValue = create(key);if (createdValue == null) {return null;}synchronized (this) {createCount++;mapValue = map.put(key, createdValue);if (mapValue != null) {// There was a conflict so undo that last putmap.put(key, mapValue);} else {size += safeSizeOf(key, createdValue);}}if (mapValue != null) {entryRemoved(false, key, createdValue, mapValue);return mapValue;} else {trimToSize(maxSize);return createdValue;}}/*** Caches {@code value} for {@code key}. The value is moved to the head of* the queue.** @return the previous value mapped by {@code key}.*/public final V put(K key, V value) {if (key == null || value == null) {throw new NullPointerException(""key == null || value == null"");}V previous;synchronized (this) {putCount++;size += safeSizeOf(key, value);previous = map.put(key, value);if (previous != null) {size -= safeSizeOf(key, previous);}}if (previous != null) {entryRemoved(false, key, previous, value);}trimToSize(maxSize);return previous;}/*** @param maxSize the maximum size of the cache before returning. May be -1*     to evict even 0-sized elements.*/private void trimToSize(int maxSize) {while (true) {K key;V value;synchronized (this) {if (size < 0 || (map.isEmpty() && size != 0)) {throw new IllegalStateException(getClass().getName()+ "".sizeOf() is reporting inconsistent results!"");}if (size <= maxSize || map.isEmpty()) {break;}Map.Entry<K, V> toEvict = map.entrySet().iterator().next();key = toEvict.getKey();value = toEvict.getValue();map.remove(key);size -= safeSizeOf(key, value);evictionCount++;}entryRemoved(true, key, value, null);}}/*** Removes the entry for {@code key} if it exists.** @return the previous value mapped by {@code key}.*/public final V remove(K key) {if (key == null) {throw new NullPointerException(""key == null"");}V previous;synchronized (this) {previous = map.remove(key);if (previous != null) {size -= safeSizeOf(key, previous);}}if (previous != null) {entryRemoved(false, key, previous, null);}return previous;}/*** Called for entries that have been evicted or removed. This method is* invoked when a value is evicted to make space, removed by a call to* {@link #remove}, or replaced by a call to {@link #put}. The default* implementation does nothing.** <p>The method is called without synchronization: other threads may* access the cache while this method is executing.** @param evicted true if the entry is being removed to make space, false*     if the removal was caused by a {@link #put} or {@link #remove}.* @param newValue the new value for {@code key}, if it exists. If non-null,*     this removal was caused by a {@link #put}. Otherwise it was caused by*     an eviction or a {@link #remove}.*/protected void entryRemoved(boolean evicted, K key, V oldValue, V newValue) {}/*** Called after a cache miss to compute a value for the corresponding key.* Returns the computed value or null if no value can be computed. The* default implementation returns null.** <p>The method is called without synchronization: other threads may* access the cache while this method is executing.** <p>If a value for {@code key} exists in the cache when this method* returns, the created value will be released with {@link #entryRemoved}* and discarded. This can occur when multiple threads request the same key* at the same time (causing multiple values to be created), or when one* thread calls {@link #put} while another is creating a value for the same* key.*/protected V create(K key) {return null;}private int safeSizeOf(K key, V value) {int result = sizeOf(key, value);if (result < 0) {throw new IllegalStateException(""Negative size: "" + key + ""="" + value);}return result;}/*** Returns the size of the entry for {@code key} and {@code value} in* user-defined units.  The default implementation returns 1 so that size* is the number of entries and max size is the maximum number of entries.** <p>An entry's size must not change while it is in the cache.*/protected int sizeOf(K key, V value) {return 1;}/*** Clear the cache, calling {@link #entryRemoved} on each removed entry.*/public final void evictAll() {trimToSize(-1); // -1 will evict 0-sized elements}/*** For caches that do not override {@link #sizeOf}, this returns the number* of entries in the cache. For all other caches, this returns the sum of* the sizes of the entries in this cache.*/public synchronized final int size() {return size;}/*** For caches that do not override {@link #sizeOf}, this returns the maximum* number of entries in the cache. For all other caches, this returns the* maximum sum of the sizes of the entries in this cache.*/public synchronized final int maxSize() {return maxSize;}/*** Returns the number of times {@link #get} returned a value.*/public synchronized final int hitCount() {return hitCount;}/*** Returns the number of times {@link #get} returned null or required a new* value to be created.*/public synchronized final int missCount() {return missCount;}/*** Returns the number of times {@link #create(Object)} returned a value.*/public synchronized final int createCount() {return createCount;}/*** Returns the number of times {@link #put} was called.*/public synchronized final int putCount() {return putCount;}/*** Returns the number of values that have been evicted.*/public synchronized final int evictionCount() {return evictionCount;}/*** Returns a copy of the current contents of the cache, ordered from least* recently accessed to most recently accessed.*/public synchronized final Map<K, V> snapshot() {return new LinkedHashMap<K, V>(map);}@Override public synchronized final String toString() {int accesses = hitCount + missCount;int hitPercent = accesses != 0 ? (100 * hitCount / accesses) : 0;return String.format(""LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]"",maxSize, hitCount, missCount, hitPercent);}}",LruCache.java,0
200,"package com.koushikdutta.urlimageviewhelper;import java.io.File;import java.net.URI;import android.content.Context;import android.os.AsyncTask;public class FileUrlDownloader implements UrlDownloader {@Overridepublic void download(final Context context, final String url, final String filename, final UrlDownloaderCallback callback, final Runnable completion) {final AsyncTask<Void, Void, Void> downloader = new AsyncTask<Void, Void, Void>() {@Overrideprotected Void doInBackground(final Void... params) {try {callback.onDownloadComplete(FileUrlDownloader.this, null, new File(new URI(url)).getAbsolutePath());return null;}catch (final Throwable e) {e.printStackTrace();return null;}}@Overrideprotected void onPostExecute(final Void result) {completion.run();}};UrlImageViewHelper.executeTask(downloader);}@Overridepublic boolean allowCache() {return false;}@Overridepublic boolean canDownloadUrl(String url) {return url.startsWith(""file:/"");}}",FileUrlDownloader.java,0
200,"package com.koushikdutta.urlimageviewhelper;import android.annotation.TargetApi;import android.app.ActivityManager;import android.content.Context;import android.content.res.AssetManager;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.BitmapFactory.Options;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.os.AsyncTask;import android.os.Build;import android.os.Looper;import android.util.DisplayMetrics;import android.util.Log;import android.view.WindowManager;import android.widget.ImageView;import org.apache.http.NameValuePair;import java.io.*;import java.util.ArrayList;import java.util.HashSet;import java.util.Hashtable;public final class UrlImageViewHelper {static void clog(String format, Object... args) {String log;if (args.length == 0)log = format;elselog = String.format(format, args);if (Constants.LOG_ENABLED)Log.i(Constants.LOGTAG, log);}public static int copyStream(final InputStream input, final OutputStream output) throws IOException {final byte[] stuff = new byte[8192];int read;int total = 0;while ((read = input.read(stuff)) != -1){output.write(stuff, 0, read);total += read;}return total;}static Resources mResources;static DisplayMetrics mMetrics;private static void prepareResources(final Context context) {if (mMetrics != null) {return;}mMetrics = new DisplayMetrics();//final Activity act = (Activity)context;//act.getWindowManager().getDefaultDisplay().getMetrics(mMetrics);((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getMetrics(mMetrics);final AssetManager mgr = context.getAssets();mResources = new Resources(mgr, mMetrics, context.getResources().getConfiguration());}private static boolean mUseBitmapScaling = true;/*** Bitmap scaling will use smart/sane values to limit the maximum* dimension of the bitmap during decode. This will prevent any dimension of the* bitmap from being larger than the dimensions of the device itself.* Doing this will conserve memory.* @param useBitmapScaling Toggle for smart resizing.*/public static void setUseBitmapScaling(boolean useBitmapScaling) {mUseBitmapScaling = useBitmapScaling;}/*** Bitmap scaling will use smart/sane values to limit the maximum* dimension of the bitmap during decode. This will prevent any dimension of the* bitmap from being larger than the dimensions of the device itself.* Doing this will conserve memory.*/public static boolean getUseBitmapScaling() {return mUseBitmapScaling;}private static Bitmap loadBitmapFromStream(final Context context, final String url, final String filename, final int targetWidth, final int targetHeight) {prepareResources(context);//        Log.v(Constants.LOGTAG,targetWidth);//        Log.v(Constants.LOGTAG,targetHeight);InputStream stream = null;clog(""Decoding: "" + url + "" "" + filename);try {BitmapFactory.Options o = null;if (mUseBitmapScaling) {o = new BitmapFactory.Options();o.inJustDecodeBounds = true;stream = new BufferedInputStream(new FileInputStream(filename), 8192);BitmapFactory.decodeStream(stream, null, o);stream.close();int scale = 0;while ((o.outWidth >> scale) > targetWidth || (o.outHeight >> scale) > targetHeight) {scale++;}o = new Options();o.inSampleSize = 1 << scale;}stream = new BufferedInputStream(new FileInputStream(filename), 8192);final Bitmap bitmap = BitmapFactory.decodeStream(stream, null, o);clog(String.format(""Loaded bitmap (%dx%d)."", bitmap.getWidth(), bitmap.getHeight()));return bitmap;} catch (final IOException e) {return null;} finally {if (stream != null) {try {stream.close();} catch (IOException e) {Log.w(Constants.LOGTAG, ""Failed to close FileInputStream"", e);}}}}public static final int CACHE_DURATION_INFINITE = Integer.MAX_VALUE;public static final int CACHE_DURATION_ONE_DAY = 1000 * 60 * 60 * 24;public static final int CACHE_DURATION_TWO_DAYS = CACHE_DURATION_ONE_DAY * 2;public static final int CACHE_DURATION_THREE_DAYS = CACHE_DURATION_ONE_DAY * 3;public static final int CACHE_DURATION_FOUR_DAYS = CACHE_DURATION_ONE_DAY * 4;public static final int CACHE_DURATION_FIVE_DAYS = CACHE_DURATION_ONE_DAY * 5;public static final int CACHE_DURATION_SIX_DAYS = CACHE_DURATION_ONE_DAY * 6;public static final int CACHE_DURATION_ONE_WEEK = CACHE_DURATION_ONE_DAY * 7;/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultResource The Android resid of the {@link Drawable} that*            should be displayed while the image is being downloaded.*/public static void setUrlDrawable(final ImageView imageView, final String url, final int defaultResource) {setUrlDrawable(imageView.getContext(), imageView, url, defaultResource, CACHE_DURATION_THREE_DAYS);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView} once it finishes loading.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.*/public static void setUrlDrawable(final ImageView imageView, final String url) {setUrlDrawable(imageView.getContext(), imageView, url, null, CACHE_DURATION_THREE_DAYS, null);}public static void loadUrlDrawable(final Context context, final String url) {setUrlDrawable(context, null, url, null, CACHE_DURATION_THREE_DAYS, null);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultDrawable A {@link Drawable} that should be displayed in*            {@code imageView} while the image has not been loaded. This*            image will also be displayed if the image fails to load. This*            can be set to {@code null}.*/public static void setUrlDrawable(final ImageView imageView, final String url, final Drawable defaultDrawable) {setUrlDrawable(imageView.getContext(), imageView, url, defaultDrawable, CACHE_DURATION_THREE_DAYS, null);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultResource The Android resid of the {@link Drawable} that*            should be displayed while the image is being downloaded.* @param cacheDurationMs The length of time, in milliseconds, that this*            image should be cached locally.*/public static void setUrlDrawable(final ImageView imageView, final String url, final int defaultResource, final long cacheDurationMs) {setUrlDrawable(imageView.getContext(), imageView, url, defaultResource, cacheDurationMs);}public static void loadUrlDrawable(final Context context, final String url, final long cacheDurationMs) {setUrlDrawable(context, null, url, null, cacheDurationMs, null);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultDrawable A {@link Drawable} that should be displayed in*            {@code imageView} while the image has not been loaded. This*            image will also be displayed if the image fails to load. This*            can be set to {@code null}.* @param cacheDurationMs The length of time, in milliseconds, that this*            image should be cached locally.*/public static void setUrlDrawable(final ImageView imageView, final String url, final Drawable defaultDrawable, final long cacheDurationMs) {setUrlDrawable(imageView.getContext(), imageView, url, defaultDrawable, cacheDurationMs, null);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param context A {@link Context} to allow setUrlDrawable to load and save*            files.* @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultResource The Android resid of the {@link Drawable} that*            should be displayed while the image is being downloaded.* @param cacheDurationMs The length of time, in milliseconds, that this*            image should be cached locally.*/private static void setUrlDrawable(final Context context, final ImageView imageView, final String url, final int defaultResource, final long cacheDurationMs) {Drawable d = null;if (defaultResource != 0) {d = imageView.getResources().getDrawable(defaultResource);}setUrlDrawable(context, imageView, url, d, cacheDurationMs, null);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultResource The Android resid of the {@link Drawable} that*            should be displayed while the image is being downloaded.* @param callback An instance of {@link UrlImageViewCallback} that is*            called when the image successfully finishes loading. This*            value can be null.*/public static void setUrlDrawable(final ImageView imageView, final String url, final int defaultResource, final UrlImageViewCallback callback) {setUrlDrawable(imageView.getContext(), imageView, url, defaultResource, CACHE_DURATION_THREE_DAYS, callback);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param callback An instance of {@link UrlImageViewCallback} that is*            called when the image successfully finishes loading. This*            value can be null.*/public static void setUrlDrawable(final ImageView imageView, final String url, final UrlImageViewCallback callback) {setUrlDrawable(imageView.getContext(), imageView, url, null, CACHE_DURATION_THREE_DAYS, callback);}public static void loadUrlDrawable(final Context context, final String url, final UrlImageViewCallback callback) {setUrlDrawable(context, null, url, null, CACHE_DURATION_THREE_DAYS, callback);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultDrawable A {@link Drawable} that should be displayed in*            {@code imageView} while the image has not been loaded. This*            image will also be displayed if the image fails to load. This*            can be set to {@code null}.* @param callback An instance of {@link UrlImageViewCallback} that is*            called when the image successfully finishes loading. This*            value can be null.*/public static void setUrlDrawable(final ImageView imageView, final String url, final Drawable defaultDrawable, final UrlImageViewCallback callback) {setUrlDrawable(imageView.getContext(), imageView, url, defaultDrawable, CACHE_DURATION_THREE_DAYS, callback);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultResource The Android resid of the {@link Drawable} that*            should be displayed while the image is being downloaded.* @param cacheDurationMs The length of time, in milliseconds, that this*            image should be cached locally.* @param callback An instance of {@link UrlImageViewCallback} that is*            called when the image successfully finishes loading. This*            value can be null.*/public static void setUrlDrawable(final ImageView imageView, final String url, final int defaultResource, final long cacheDurationMs, final UrlImageViewCallback callback) {setUrlDrawable(imageView.getContext(), imageView, url, defaultResource, cacheDurationMs, callback);}public static void loadUrlDrawable(final Context context, final String url, final long cacheDurationMs, final UrlImageViewCallback callback) {setUrlDrawable(context, null, url, null, cacheDurationMs, callback);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultDrawable A {@link Drawable} that should be displayed in*            {@code imageView} while the image has not been loaded. This*            image will also be displayed if the image fails to load. This*            can be set to {@code null}.* @param cacheDurationMs The length of time, in milliseconds, that this*            image should be cached locally.* @param callback An instance of {@link UrlImageViewCallback} that is*            called when the image successfully finishes loading. This*            value can be null.*/public static void setUrlDrawable(final ImageView imageView, final String url, final Drawable defaultDrawable, final long cacheDurationMs, final UrlImageViewCallback callback) {setUrlDrawable(imageView.getContext(), imageView, url, defaultDrawable, cacheDurationMs, callback);}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param context A {@link Context} to allow setUrlDrawable to load and save*            files.* @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultResource The Android resid of the {@link Drawable} that*            should be displayed while the image is being downloaded.* @param cacheDurationMs The length of time, in milliseconds, that this*            image should be cached locally.* @param callback An instance of {@link UrlImageViewCallback} that is*            called when the image successfully finishes loading. This*            value can be null.*/private static void setUrlDrawable(final Context context, final ImageView imageView, final String url, final int defaultResource, final long cacheDurationMs, final UrlImageViewCallback callback) {Drawable d = null;if (defaultResource != 0) {d = imageView.getResources().getDrawable(defaultResource);}setUrlDrawable(context, imageView, url, d, cacheDurationMs, callback);}private static boolean isNullOrEmpty(final CharSequence s) {return (s == null || s.equals("""") || s.equals(""null"") || s.equals(""NULL""));}private static boolean mHasCleaned = false;public static String getFilenameForUrl(final String url) {return url.hashCode() + "".urlimage"";}/*** Clear out cached images.* @param context* @param age The max age of a file. Files older than this age*              will be removed.*/public static void cleanup(final Context context, long age) {if (mHasCleaned) {return;}mHasCleaned = true;try {// purge any *.urlimage files over a week oldfinal String[] files = context.getFilesDir().list();if (files == null) {return;}for (final String file : files) {if (!file.endsWith("".urlimage"")) {continue;}final File f = new File(context.getFilesDir().getAbsolutePath() + '/' + file);if (System.currentTimeMillis() > f.lastModified() + age) {f.delete();}}} catch (final Exception e) {e.printStackTrace();}}/*** Clear out all cached images older than a week.* The same as calling cleanup(context, CACHE_DURATION_ONE_WEEK);* @param context*/public static void cleanup(final Context context) {cleanup(context, CACHE_DURATION_ONE_WEEK);}private static boolean checkCacheDuration(File file, long cacheDurationMs) {return cacheDurationMs == CACHE_DURATION_INFINITE || System.currentTimeMillis() < file.lastModified() + cacheDurationMs;}public static Bitmap getCachedBitmap(String url) {if (url == null)return null;Bitmap ret = null;if (mDeadCache != null)ret = mDeadCache.get(url);if (ret != null)return ret;if (mLiveCache != null) {Drawable drawable = mLiveCache.get(url);if (drawable instanceof ZombieDrawable)return ((ZombieDrawable)drawable).getBitmap();}return null;}/*** Download and shrink an Image located at a specified URL, and display it* in the provided {@link ImageView}.** @param context A {@link Context} to allow setUrlDrawable to load and save*            files.* @param imageView The {@link ImageView} to display the image to after it*            is loaded.* @param url The URL of the image that should be loaded.* @param defaultDrawable A {@link Drawable} that should be displayed in*            {@code imageView} while the image has not been loaded. This*            image will also be displayed if the image fails to load. This*            can be set to {@code null}.* @param cacheDurationMs The length of time, in milliseconds, that this*            image should be cached locally.* @param callback An instance of {@link UrlImageViewCallback} that is*            called when the image successfully finishes loading. This*            value can be null.*/private static void setUrlDrawable(final Context context, final ImageView imageView, final String url, final Drawable defaultDrawable, final long cacheDurationMs, final UrlImageViewCallback callback) {assert (Looper.getMainLooper().getThread() == Thread.currentThread()) : ""setUrlDrawable and loadUrlDrawable should only be called from the main thread."";cleanup(context);// disassociate this ImageView from any pending downloadsif (isNullOrEmpty(url)) {if (imageView != null) {mPendingViews.remove(imageView);imageView.setImageDrawable(defaultDrawable);}return;}final int tw;final int th;if (mMetrics == null)prepareResources(context);tw = mMetrics.widthPixels;th = mMetrics.heightPixels;final String filename = context.getFileStreamPath(getFilenameForUrl(url)).getAbsolutePath();final File file = new File(filename);// check the dead and live cache to see if we can find this url's bitmapif (mDeadCache == null) {mDeadCache = new LruBitmapCache(getHeapSize(context) / 8);}Drawable drawable = null;Bitmap bitmap = mDeadCache.remove(url);if (bitmap != null) {clog(""zombie load: "" + url);} else {drawable = mLiveCache.get(url);}// if something was found, verify it was fresh.if (drawable != null || bitmap != null) {clog(""Cache hit on: "" + url);// if the file age is older than the cache duration, force a refresh.// note that the file must exist, otherwise it is using a default.// not checking for file existence would do a network call on every// 404 or failed load.if (file.exists() && !checkCacheDuration(file, cacheDurationMs)) {clog(""Cache hit, but file is stale. Forcing reload: "" + url);if (drawable != null && drawable instanceof ZombieDrawable)((ZombieDrawable)drawable).headshot();drawable = null;bitmap = null;}else {clog(""Using cached: "" + url);}}// if the bitmap is fresh, set the imageviewif (drawable != null || bitmap != null) {if (imageView != null) {mPendingViews.remove(imageView);if (drawable instanceof ZombieDrawable) {Bitmap newBitmap = ((ZombieDrawable) drawable).getBitmap();if (callback != null) {newBitmap = callback.onPreSetBitmap(imageView, newBitmap, url, true);}if (newBitmap != ((ZombieDrawable) drawable).getBitmap()) {drawable = new ZombieDrawable(url, mResources, newBitmap);} else {drawable = ((ZombieDrawable) drawable).clone(mResources);}} else if (bitmap != null) {if (callback != null) {bitmap = callback.onPreSetBitmap(imageView, bitmap, url, true);}drawable = new ZombieDrawable(url, mResources, bitmap);}imageView.setImageDrawable(drawable);}// invoke any bitmap callbacksif (callback != null) {// when invoking the callback from cache, check to see if this was// a drawable that was successfully loaded from the filesystem or url.// this will be indicated by it being a ZombieDrawable (ie, something we are managing).// The default drawables will be BitmapDrawables (or whatever else the user passed in).if (bitmap == null && drawable instanceof ZombieDrawable)bitmap = ((ZombieDrawable)drawable).getBitmap();callback.onLoaded(imageView, bitmap, url, true);}return;}// oh noes, at this point we definitely do not have the file available in memory// let's prepare for an asynchronous load of the image.// null it while it is downloading// since listviews reuse their views, we need to// take note of which url this view is waiting for.// This may change rapidly as the list scrolls or is filtered, etc.clog(""Waiting for "" + url + "" "" + imageView);if (imageView != null) {imageView.setImageDrawable(defaultDrawable);mPendingViews.put(imageView, url);}final ArrayList<ImageView> currentDownload = mPendingDownloads.get(url);if (currentDownload != null && currentDownload.size() != 0) {// Also, multiple vies may be waiting for this url.// So, let's maintain a list of these views.// When the url is downloaded, it sets the imagedrawable for// every view in the list. It needs to also validate that// the imageview is still waiting for this url.if (imageView != null) {currentDownload.add(imageView);}return;}final ArrayList<ImageView> downloads = new ArrayList<ImageView>();if (imageView != null) {downloads.add(imageView);}mPendingDownloads.put(url, downloads);final int targetWidth = tw <= 0 ? Integer.MAX_VALUE : tw;final int targetHeight = th <= 0 ? Integer.MAX_VALUE : th;final Loader loader = new Loader() {@Overridepublic void onDownloadComplete(UrlDownloader downloader, InputStream in, String existingFilename) {try {assert (in == null || existingFilename == null);if (in == null && existingFilename == null)return;String targetFilename = filename;if (in != null) {in = new BufferedInputStream(in, 8192);OutputStream fout = new BufferedOutputStream(new FileOutputStream(filename), 8192);copyStream(in, fout);fout.close();}else {targetFilename = existingFilename;}result = loadBitmapFromStream(context, url, targetFilename, targetWidth, targetHeight);}catch (final Exception ex) {// always delete busted files when we throw.new File(filename).delete();if (Constants.LOG_ENABLED)Log.e(Constants.LOGTAG, ""Error loading "" + url, ex);}finally {// if we're not supposed to cache this thing, delete the temp file.if (downloader != null && !downloader.allowCache())new File(filename).delete();}}};final Runnable completion = new Runnable() {@Overridepublic void run() {assert (Looper.myLooper().equals(Looper.getMainLooper()));Bitmap bitmap = loader.result;Drawable usableResult = null;if (bitmap != null) {if (callback != null) {bitmap = callback.onPreSetBitmap(imageView, bitmap, url, (imageView != null));}usableResult = new ZombieDrawable(url, mResources, bitmap);}if (usableResult == null) {clog(""No usable result, defaulting "" + url);usableResult = defaultDrawable;mLiveCache.put(url, usableResult);}mPendingDownloads.remove(url);//                mLiveCache.put(url, usableResult);if (callback != null && imageView == null)callback.onLoaded(null, loader.result, url, false);int waitingCount = 0;for (final ImageView iv: downloads) {// validate the url it is waiting forfinal String pendingUrl = mPendingViews.get(iv);if (!url.equals(pendingUrl)) {clog(""Ignoring out of date request to update view for "" + url + "" "" + pendingUrl + "" "" + iv);continue;}waitingCount++;mPendingViews.remove(iv);if (usableResult != null) {//                        System.out.println(String.format(""imageView: %dx%d, %dx%d"", imageView.getMeasuredWidth(), imageView.getMeasuredHeight(), imageView.getWidth(), imageView.getHeight()));iv.setImageDrawable(usableResult);//                        System.out.println(String.format(""imageView: %dx%d, %dx%d"", imageView.getMeasuredWidth(), imageView.getMeasuredHeight(), imageView.getWidth(), imageView.getHeight()));// onLoaded is called with the loader's result (not what is actually used). null indicates failure.}if (callback != null && iv == imageView) {callback.onLoaded(iv, loader.result, url, false);}}clog(""Populated: "" + waitingCount);}};if (file.exists()) {try {if (checkCacheDuration(file, cacheDurationMs)) {clog(""File Cache hit on: "" + url + "". "" + (System.currentTimeMillis() - file.lastModified()) + ""ms old."");final AsyncTask<Void, Void, Void> fileloader = new AsyncTask<Void, Void, Void>() {@Overrideprotected Void doInBackground(final Void... params) {loader.onDownloadComplete(null, null, filename);return null;}@Overrideprotected void onPostExecute(final Void result) {completion.run();}};executeTask(fileloader);return;}else {clog(""File cache has expired. Refreshing."");}}catch (final Exception ex) {}}for (UrlDownloader downloader: mDownloaders) {if (downloader.canDownloadUrl(url)) {downloader.download(context, url, filename, loader, completion);return;}}imageView.setImageDrawable(defaultDrawable);}private static abstract class Loader implements UrlDownloader.UrlDownloaderCallback {Bitmap result;}private static HttpUrlDownloader mHttpDownloader = new HttpUrlDownloader();private static ContentUrlDownloader mContentDownloader = new ContentUrlDownloader();private static ContactContentUrlDownloader mContactDownloader = new ContactContentUrlDownloader();private static AssetUrlDownloader mAssetDownloader = new AssetUrlDownloader();private static FileUrlDownloader mFileDownloader = new FileUrlDownloader();private static ArrayList<UrlDownloader> mDownloaders = new ArrayList<UrlDownloader>();public static ArrayList<UrlDownloader> getDownloaders() {return mDownloaders;}static {mDownloaders.add(mHttpDownloader);mDownloaders.add(mContactDownloader);mDownloaders.add(mContentDownloader);mDownloaders.add(mAssetDownloader);mDownloaders.add(mFileDownloader);}public static interface RequestPropertiesCallback {public ArrayList<NameValuePair> getHeadersForRequest(Context context, String url);}private static RequestPropertiesCallback mRequestPropertiesCallback;public static RequestPropertiesCallback getRequestPropertiesCallback() {return mRequestPropertiesCallback;}public static void setRequestPropertiesCallback(final RequestPropertiesCallback callback) {mRequestPropertiesCallback = callback;}private static DrawableCache mLiveCache = DrawableCache.getInstance();private static LruBitmapCache mDeadCache;private static HashSet<Bitmap> mAllCache = new HashSet<Bitmap>();private static int getHeapSize(final Context context) {return ((ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass() * 1024 * 1024;}/**** Remove a url from the cache* @param url* @return The bitmap removed, if any.*/public static Bitmap remove(String url) {new File(getFilenameForUrl(url)).delete();Drawable drawable = mLiveCache.remove(url);if (drawable instanceof ZombieDrawable) {ZombieDrawable zombie = (ZombieDrawable)drawable;Bitmap ret = zombie.getBitmap();zombie.headshot();return ret;}return null;}/**** ZombieDrawable refcounts Bitmaps by hooking the finalizer.**/private static class ZombieDrawable extends BitmapDrawable {private static class Brains {int mRefCounter;boolean mHeadshot;}public ZombieDrawable(final String url, Resources resources, final Bitmap bitmap) {this(url, resources, bitmap, new Brains());}Brains mBrains;private ZombieDrawable(final String url, Resources resources, final Bitmap bitmap, Brains brains) {super(resources, bitmap);mUrl = url;mBrains = brains;mAllCache.add(bitmap);mDeadCache.remove(url);mLiveCache.put(url, this);mBrains.mRefCounter++;}public ZombieDrawable clone(Resources resources) {return new ZombieDrawable(mUrl, resources, getBitmap(), mBrains);}String mUrl;@Overrideprotected void finalize() throws Throwable {super.finalize();mBrains.mRefCounter--;if (mBrains.mRefCounter == 0) {if (!mBrains.mHeadshot)mDeadCache.put(mUrl, getBitmap());mAllCache.remove(getBitmap());mLiveCache.remove(mUrl);clog(""Zombie GC event "" + mUrl);}}// kill this zombie, forever.public void headshot() {clog(""BOOM! Headshot: "" + mUrl);mBrains.mHeadshot = true;mLiveCache.remove(mUrl);mAllCache.remove(getBitmap());}}static void executeTask(final AsyncTask<Void, Void, Void> task) {if (Build.VERSION.SDK_INT < Constants.HONEYCOMB) {task.execute();} else {executeTaskHoneycomb(task);}}@TargetApi(Constants.HONEYCOMB)private static void executeTaskHoneycomb(final AsyncTask<Void, Void, Void> task) {task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);}public static  int getPendingDownloads() {return mPendingDownloads.size();}private static Hashtable<ImageView, String> mPendingViews = new Hashtable<ImageView, String>();private static Hashtable<String, ArrayList<ImageView>> mPendingDownloads = new Hashtable<String, ArrayList<ImageView>>();}",UrlImageViewHelper.java,0
200,"package com.koushikdutta.urlimageviewhelper;import android.graphics.Bitmap;import android.widget.ImageView;/*** Callback that is invoked with a success/failure after attempting to* load a drawable from an url.* Note: If an ImageView has multiple setUrlDrawable calls made on it, only the last callback* will be invoked. This scenario arises when using ListViews which recycle their views.* This is done to prevent callbacks from being erroneosly invoked on ImageViews that are no* longer interested in the url that was loaded.* To guarantee a callback is invoked, one can do the following:* First call loadUrlDrawable (with a callback), and then setUrlDrawable. Both loads just get queued into the same request,* so you don't need to worry about that being inefficient or that it is making two network calls.* @author koush**/public interface UrlImageViewCallback {/**** @param imageView ImageView for the load request.* @param loadedBitmap The bitmap that was loaded by the request.*                          If the drawable failed to load, this will be null.* @param url The url that was loaded.* @param loadedFromCache This will indicate whether the load operation result came from cache, or was retrieved.*/void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache);/*** Allows processing of the downloaded bitmap before being set to the image view* @param imageView ImageView for the load request.* @param loadedBitmap The bitmap that was loaded by the request.*                          If the drawable failed to load, this will be null.* @param url The url that was loaded.* @param loadedFromCache This will indicate whether the load operation result came from cache, or was retrieved.* @return The new bitmap*/Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache);}",UrlImageViewCallback.java,0
200,"package com.koushikdutta.urlimageviewhelper;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import org.apache.http.NameValuePair;import android.content.Context;import android.os.AsyncTask;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper.RequestPropertiesCallback;public class HttpUrlDownloader implements UrlDownloader {private RequestPropertiesCallback mRequestPropertiesCallback;public RequestPropertiesCallback getRequestPropertiesCallback() {return mRequestPropertiesCallback;}public void setRequestPropertiesCallback(final RequestPropertiesCallback callback) {mRequestPropertiesCallback = callback;}@Overridepublic void download(final Context context, final String url, final String filename, final UrlDownloaderCallback callback, final Runnable completion) {final AsyncTask<Void, Void, Void> downloader = new AsyncTask<Void, Void, Void>() {@Overrideprotected Void doInBackground(final Void... params) {try {InputStream is = null;String thisUrl = url;HttpURLConnection urlConnection;while (true) {final URL u = new URL(thisUrl);urlConnection = (HttpURLConnection)u.openConnection();urlConnection.setInstanceFollowRedirects(true);if (mRequestPropertiesCallback != null) {final ArrayList<NameValuePair> props = mRequestPropertiesCallback.getHeadersForRequest(context, url);if (props != null) {for (final NameValuePair pair: props) {urlConnection.addRequestProperty(pair.getName(), pair.getValue());}}}if (urlConnection.getResponseCode() != HttpURLConnection.HTTP_MOVED_TEMP && urlConnection.getResponseCode() != HttpURLConnection.HTTP_MOVED_PERM)break;thisUrl = urlConnection.getHeaderField(""Location"");}if (urlConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {UrlImageViewHelper.clog(""Response Code: "" + urlConnection.getResponseCode());return null;}is = urlConnection.getInputStream();callback.onDownloadComplete(HttpUrlDownloader.this, is, null);return null;}catch (final Throwable e) {e.printStackTrace();return null;}}@Overrideprotected void onPostExecute(final Void result) {completion.run();}};UrlImageViewHelper.executeTask(downloader);}@Overridepublic boolean allowCache() {return true;}@Overridepublic boolean canDownloadUrl(String url) {return url.startsWith(""http"");}}",HttpUrlDownloader.java,0
200,"package com.koushikdutta.urlimageviewhelper;public interface Constants {public static final String LOGTAG = ""UrlImageViewHelper"";public static final boolean LOG_ENABLED = false; //set to True to enable verbose logging//set here and not in Build to maintain proper backwards compatibilitypublic static final int HONEYCOMB = 11;}",Constants.java,0
200,"package org.inaturalist.android;import android.app.Activity;import android.content.Intent;import android.database.DataSetObserver;import android.os.Handler;import android.support.test.espresso.IdlingResource;import android.support.test.rule.ActivityTestRule;import android.support.test.runner.AndroidJUnit4;import android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry;import android.support.test.runner.lifecycle.Stage;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.ListView;import org.hamcrest.Description;import org.hamcrest.Matcher;import org.hamcrest.TypeSafeMatcher;import org.junit.Rule;import org.junit.Test;import org.junit.runner.RunWith;import java.util.Collection;import java.util.Objects;import static android.support.test.InstrumentationRegistry.getInstrumentation;import static android.support.test.espresso.Espresso.onView;import static android.support.test.espresso.Espresso.registerIdlingResources;import static android.support.test.espresso.action.ViewActions.click;import static android.support.test.espresso.action.ViewActions.typeText;import static android.support.test.espresso.matcher.ViewMatchers.withId;@RunWith(AndroidJUnit4.class)public class ObservationManagementTest {@Rulepublic ActivityTestRule<ObservationEditor> observationEditorRule = new ActivityTestRule(ObservationEditor.class, true, false);@Rulepublic ActivityTestRule<ObservationListActivity> observationListRule = new ActivityTestRule(ObservationListActivity.class, true, false);// This class is used to test whether or not at least 3 taxon results were loaded into the list view// (this means the listview contains results that were returned from the server, and not the default ones)private class TaxonLoaderIdlingResource implements IdlingResource {private ResourceCallback mCallback;private Activity mActivity;private int mCount = 0;public TaxonLoaderIdlingResource(Activity activity) {mActivity = activity;final ListView listView = (ListView) mActivity.findViewById(android.R.id.list);listView.getAdapter().registerDataSetObserver(new DataSetObserver() {@Overridepublic void onChanged() {super.onChanged();mCount = listView.getAdapter().getCount();if (mCount >= 3) {mCallback.onTransitionToIdle();}}@Overridepublic void onInvalidated() {super.onInvalidated();}});}@Overridepublic String getName() {return ""TaxonLoaderIdlingResource"";}@Overridepublic boolean isIdleNow() {return mCount >= 3;}@Overridepublic void registerIdleTransitionCallback(ResourceCallback callback) {mCallback = callback;}}// Utility method to retrieve the currently-displayed activitypublic Activity getCurrentActivity(){final Activity currentActivity[] = new Activity[] { null };getInstrumentation().runOnMainSync(new Runnable() {public void run() {Collection resumedActivities = ActivityLifecycleMonitorRegistry.getInstance().getActivitiesInStage(Stage.RESUMED);if (resumedActivities.iterator().hasNext()){currentActivity[0] = (Activity) resumedActivities.iterator().next();}}});return currentActivity[0];}@Testpublic void addNewObservation() {// Add a new observation// New observation (no photo)Intent intent = new Intent(Intent.ACTION_INSERT, Observation.CONTENT_URI);observationEditorRule.launchActivity(intent);// Set some detailsonView(withId(R.id.description)).perform(typeText(""Some notes...""));// Taxon text - This triggers the taxon search activityonView(withId(R.id.speciesGuess)).perform(typeText(""Human""));// This will delay the rest of the tests until the taxon results are loaded up from the serverregisterIdlingResources(new TaxonLoaderIdlingResource(getCurrentActivity()));// Choose a taxon result (that was downloaded from the server)onView(withId(android.R.id.list)).perform(click());// Back in observation editor screen// Click the save observation buttononView(withId(R.id.save_observation)).perform(click());}@Testpublic void viewObservationAndEdit() {// Views an existing observation and edit it// View all observationsIntent intent = new Intent();observationListRule.launchActivity(intent);// Choose first observation to viewonView(withId(R.id.observations_list)).perform(click());// Now we're in the observation viewer screen - click the edit buttononView(withId(R.id.edit_observation)).perform(click());// Click the save observation buttononView(withId(R.id.save_observation)).perform(click());}}",ObservationManagementTest.java,0
200,"/*** Like a normal EditText except it has a DONE button.* http://stackoverflow.com/questions/5014219/multiline-edittext-with-done-softinput-action-label-on-2-3*/package org.inaturalist.android;import android.content.Context;import android.util.AttributeSet;import android.view.inputmethod.EditorInfo;import android.view.inputmethod.InputConnection;import android.widget.EditText;public class MultilineEditText extends EditText {public MultilineEditText(Context context) {super(context);}public MultilineEditText(Context context, AttributeSet attrs) {super(context, attrs);}public MultilineEditText(Context context, AttributeSet attrs, int defStyle) {super(context, attrs, defStyle);}@Overridepublic InputConnection onCreateInputConnection(EditorInfo outAttrs) {InputConnection connection = super.onCreateInputConnection(outAttrs);int imeActions = outAttrs.imeOptions&EditorInfo.IME_MASK_ACTION;if ((imeActions&EditorInfo.IME_ACTION_DONE) != 0) {// clear the existing actionoutAttrs.imeOptions ^= imeActions;// set the DONE actionoutAttrs.imeOptions |= EditorInfo.IME_ACTION_DONE;}if ((outAttrs.imeOptions&EditorInfo.IME_FLAG_NO_ENTER_ACTION) != 0) {outAttrs.imeOptions &= ~EditorInfo.IME_FLAG_NO_ENTER_ACTION;}return connection;}}",MultilineEditText.java,0
200,"/*** BetterJSONObject** Wraps JSONObject with simpler getters.  I'm sure there some smarter way to delegate calls than this...*/package org.inaturalist.android;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.Serializable;import java.sql.Timestamp;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.util.Log;public class BetterJSONObject implements Serializable {public final static String TAG = ""BetterJSONObject"";private transient JSONObject mJSONObject;private transient DateFormat mDateTimeFormat;private transient DateFormat mDateFormat;private SimpleDateFormat mDateTimeFormat2;public BetterJSONObject() {this(new JSONObject());}public BetterJSONObject(String json) {try {mJSONObject = new JSONObject(json);} catch (JSONException e) {e.printStackTrace();mJSONObject = new JSONObject();}initRegExIfNeeded();}public BetterJSONObject(JSONObject o) {mJSONObject = o;initRegExIfNeeded();}private void initRegExIfNeeded() {if (mDateFormat == null) mDateFormat = new SimpleDateFormat(""yyyy-MM-dd"", Locale.US);if (mDateTimeFormat == null) mDateTimeFormat = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"", Locale.US);if (mDateTimeFormat2 == null) mDateTimeFormat2 = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZZZ"", Locale.US);}public JSONObject getJSONObject() {return mJSONObject;}public SerializableJSONArray getJSONArray(String name) {try {return new SerializableJSONArray(mJSONObject.getJSONArray(name));} catch (JSONException e) {return null;}}public boolean has(String name) {return mJSONObject.has(name);}public JSONObject getJSONObject(String name) {try {return mJSONObject.getJSONObject(name);} catch (JSONException e) {return null;}}public Object get(String name) {if (mJSONObject.isNull(name)) {return null;}try {return mJSONObject.get(name);} catch (JSONException e) {return null;}}public String getString(String name) {Object value = get(name);return value == null ? null : value.toString();}public Boolean getBoolean(String name) {Object value = get(name);return value == null ? null : (Boolean) value;}public Integer getInt(String name) {Object value = get(name);return value == null ? null : (Integer) value;}public Integer getInteger(String name) {return getInt(name);}public Double getDouble(String name) {Object value = get(name);return (value == null ? null : Double.parseDouble(value.toString()));}public Float getFloat(String name) {Object value = get(name);return value == null ? null : Float.parseFloat(value.toString());}public Timestamp getTimestamp(String name) {initRegExIfNeeded();String value = getString(name);if (value == null) { return null; }Date date;try {date = mDateTimeFormat.parse(value);} catch (ParseException e) {try {date = mDateTimeFormat2.parse(value);} catch (ParseException e1) {try {date =  mDateFormat.parse(value);} catch (ParseException e2) {return null;}}}return new Timestamp(date.getTime());}public void put(String name, Object value) {try {mJSONObject.put(name, value);} catch (JSONException e1) {try {mJSONObject.put(name, value.toString());} catch (JSONException e2) {Log.e(TAG, ""Failed to put "" + name + "", "" + value + "": "" + e2);}}}private void writeObject(ObjectOutputStream oos) throws IOException {oos.defaultWriteObject();oos.writeObject(mJSONObject.toString());}private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException, JSONException {ois.defaultReadObject();mJSONObject = new JSONObject((String) ois.readObject());}}",BetterJSONObject.java,0
200,"package org.inaturalist.android;import android.content.Context;import android.text.Html;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.Filter;import android.widget.Filterable;import android.widget.ImageView;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.util.ArrayList;import java.util.List;/*** Created by yaron on 10/07/2016.*/public class ProjectsAdapter extends ArrayAdapter<JSONObject> implements Filterable {private static final String TAG = ""ProjectsAdapter"";private final int mDefaultIcon;private List<JSONObject> mItems;private List<JSONObject> mOriginalItems;private Context mContext;private Filter mFilter;protected String mCurrentSearchString;private String mSearchUrl;private ActivityHelper mHelper;public interface OnLoading {public void onLoading(Boolean loading);}private OnLoading mOnLoading;private ArrayList<JSONObject> autocomplete(String input) {// Retrieve the autocomplete results.String search = input.toString().toLowerCase();ArrayList<JSONObject> resultList = null;HttpURLConnection conn = null;StringBuilder jsonResults = new StringBuilder();try {StringBuilder sb = new StringBuilder(mSearchUrl);sb.append(""?q="");sb.append(URLEncoder.encode(search, ""utf8""));URL url = new URL(sb.toString());conn = (HttpURLConnection) url.openConnection();InputStreamReader in = new InputStreamReader(conn.getInputStream());// Load the results into a StringBuilderint read;char[] buff = new char[1024];while ((read = in.read(buff)) != -1) {jsonResults.append(buff, 0, read);}} catch (MalformedURLException e) {Log.e(TAG, ""Error processing search API URL"", e);} catch (IOException e) {Log.e(TAG, ""Error connecting to search API"", e);} finally {if (conn != null) {conn.disconnect();}}try {JSONArray predsJsonArray = new JSONArray(jsonResults.toString());// Extract the Place descriptions from the resultsresultList = new ArrayList<JSONObject>(predsJsonArray.length());for (int i = 0; i < predsJsonArray.length(); i++) {resultList.add(predsJsonArray.getJSONObject(i));}} catch (JSONException e) {Log.e(TAG, ""Cannot process JSON results"", e);}return resultList;}public void updateItem(int index, JSONObject object) {mItems.set(index, object);}public ProjectsAdapter(Context context, String searchUrl, OnLoading onLoading, List<JSONObject> objects) {this(context, searchUrl, onLoading, objects, R.drawable.ic_work_black_24dp);}public ProjectsAdapter(Context context, String searchUrl, OnLoading onLoading, List<JSONObject> objects, int defaultIcon) {super(context, R.layout.project_item, objects);mSearchUrl = searchUrl;mItems = objects;mOriginalItems = new ArrayList<JSONObject>(mItems);mContext = context;mHelper = new ActivityHelper(mContext);mOnLoading = onLoading;mDefaultIcon = defaultIcon;mFilter = new Filter() {@Overrideprotected FilterResults performFiltering(CharSequence constraint) {FilterResults filterResults = new FilterResults();if (constraint != null) {if (constraint.length() == 0) {filterResults.values = mOriginalItems;filterResults.count = 0;} else {if (mOnLoading != null) mOnLoading.onLoading(true);// Retrieve the autocomplete results.ArrayList<JSONObject> results;mCurrentSearchString = (String) constraint;results = autocomplete(constraint.toString());if (!constraint.equals(mCurrentSearchString)) {// In the meanwhile, new searches were initiated by the user - ignore this resultreturn null;}// Assign the data to the FilterResultsif (results == null) {results = new ArrayList<JSONObject>();}filterResults.values = results;filterResults.count = results.size();}}if (mOnLoading != null) mOnLoading.onLoading(false);return filterResults;}@Overrideprotected void publishResults(CharSequence constraint, FilterResults results) {if (results != null && results.count > 0) {mItems = (List<JSONObject>) results.values;notifyDataSetChanged();} else {if (results != null) {mItems = (ArrayList<JSONObject>) results.values;}notifyDataSetInvalidated();}}};}public List<JSONObject> getItems() {return mItems;}public void addItemAtBeginning(JSONObject newItem) {mItems.add(0, newItem);}@Overridepublic int getCount() {return (mItems != null ? mItems.size() : 0);}@Overridepublic JSONObject getItem(int index) {return mItems.get(index);}@Overridepublic Filter getFilter() {return mFilter;}@Overridepublic View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view = inflater.inflate(R.layout.observation_project_item, parent, false);final BetterJSONObject item = new BetterJSONObject(mItems.get(position));TextView projectName = (TextView) view.findViewById(R.id.project_name);final String projectTitle = item.getString(""title"");projectName.setText(projectTitle);ImageView projectPic = (ImageView) view.findViewById(R.id.project_pic);String iconUrl = item.getString(""icon_url"");if ((iconUrl == null) || (iconUrl.length() == 0)) {projectPic.setVisibility(View.GONE);view.findViewById(R.id.project_pic_none).setVisibility(View.VISIBLE);((ImageView)view.findViewById(R.id.project_pic_none)).setImageResource(mDefaultIcon);} else {projectPic.setVisibility(View.VISIBLE);projectPic.setImageResource(mDefaultIcon);UrlImageViewHelper.setUrlDrawable(projectPic, iconUrl);view.findViewById(R.id.project_pic_none).setVisibility(View.GONE);}final String noHTMLDescription = Html.fromHtml(item.getString(""description"")).toString();if (noHTMLDescription.length() > 0) {((ViewGroup) view.findViewById(R.id.project_pic_container)).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mHelper.alert(projectTitle, noHTMLDescription);}});} else {// No description - Hide the info buttonview.findViewById(R.id.project_pic_info).setVisibility(View.GONE);}view.setTag(item);return view;}private String getShortDescription(String description) {// Strip HTML tagsif (description == null) return """";String noHTML = Html.fromHtml(description).toString();return noHTML;}}",ProjectsAdapter.java,0
200,"package org.inaturalist.android;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.text.Editable;import android.text.Html;import android.text.TextWatcher;import android.text.method.LinkMovementMethod;import android.util.Log;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import android.widget.ViewFlipper;import com.facebook.login.widget.LoginButton;import com.flurry.android.FlurryAgent;import org.json.JSONArray;public class LoginSignupActivity extends AppCompatActivity implements SignInTask.SignInTaskStatus {private static String TAG = ""LoginSignupActivity"";private INaturalistApp mApp;private ActivityHelper mHelper;private ImageView mBackgroundImage;public static final String BACKGROUND_ID = ""background_id"";public static final String SIGNUP = ""signup"";private ImageView mEmailIcon;private EditText mEmail;private ImageView mPasswordIcon;private EditText mPassword;private ImageView mUsernameIcon;private EditText mUsername;private TextView mPasswordWarning;private TextView mCheckboxDescription;private ImageView mCheckbox;private boolean mUseCCLicense;private Button mSignup;private boolean mIsSignup;private SignInTask mSignInTask;private LoginButton mFacebookLoginButton;private UserRegisterReceiver mUserRegisterReceiver;private TextView mTerms;@Overrideprotected void onStart() {super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop() {super.onStop();FlurryAgent.onEndSession(this);}private class UserRegisterReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {unregisterReceiver(mUserRegisterReceiver);mHelper.stopLoading();boolean status = intent.getBooleanExtra(INaturalistService.REGISTER_USER_STATUS, false);String error = intent.getStringExtra(INaturalistService.REGISTER_USER_ERROR);if (!status) {mHelper.alert(getString(R.string.could_not_register_user), error);} else {// Registration successful - login the userrecreateSignInTaskIfNeeded();mSignInTask.signIn(INaturalistService.LoginType.OAUTH_PASSWORD, mUsername.getText().toString(), mPassword.getText().toString());}}}// Recreates a new instance of the sign in task if it finished running before (since an AsyncTask can only be run once).private void recreateSignInTaskIfNeeded() {if (mSignInTask.getStatus() == AsyncTask.Status.FINISHED) {mSignInTask = new SignInTask(this, this, mFacebookLoginButton);}}@Overridepublic void onCreate(Bundle savedInstanceState) {requestWindowFeature(Window.FEATURE_NO_TITLE);super.onCreate(savedInstanceState);getSupportActionBar().hide();overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.login_signup);mHelper = new ActivityHelper(this);mBackgroundImage = (ImageView) findViewById(R.id.background_image);int backgroundId = getIntent().getIntExtra(BACKGROUND_ID, 0);mIsSignup = getIntent().getBooleanExtra(SIGNUP, false);switch (backgroundId) {case 2:mBackgroundImage.setImageResource(R.drawable.signup_background_3_blurred);break;case 1:mBackgroundImage.setImageResource(R.drawable.signup_background_2_blurred);break;case 0:default:mBackgroundImage.setImageResource(R.drawable.signup_background_1_blurred);break;}View backButton = findViewById(R.id.back);backButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {onBackPressed();}});mEmailIcon = (ImageView) findViewById(R.id.email_icon);mEmailIcon.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mEmail.requestFocus();getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);}});mEmail = (EditText) findViewById(R.id.email);mEmail.setOnFocusChangeListener(new View.OnFocusChangeListener() {@Overridepublic void onFocusChange(View view, boolean focused) {if (focused) {mEmailIcon.getDrawable().setAlpha(0xff);} else {mEmailIcon.getDrawable().setAlpha(0x7f);}}});mEmail.addTextChangedListener(new TextWatcher() {@Overridepublic void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void afterTextChanged(Editable editable) {checkFields();}});mPasswordIcon = (ImageView) findViewById(R.id.password_icon);mPasswordIcon.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mPassword.requestFocus();}});mPassword = (EditText) findViewById(R.id.password);mPassword.setOnFocusChangeListener(new View.OnFocusChangeListener() {@Overridepublic void onFocusChange(View view, boolean focused) {if (focused) {mPasswordIcon.getDrawable().setAlpha(0xff);} else {mPasswordIcon.getDrawable().setAlpha(0x7f);}}});mUsernameIcon = (ImageView) findViewById(R.id.username_icon);mUsernameIcon.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mUsername.requestFocus();}});mUsername = (EditText) findViewById(R.id.username);mUsername.setOnFocusChangeListener(new View.OnFocusChangeListener() {@Overridepublic void onFocusChange(View view, boolean focused) {if (focused) {mUsernameIcon.getDrawable().setAlpha(0xff);} else {mUsernameIcon.getDrawable().setAlpha(0x7f);}}});mUsername.addTextChangedListener(new TextWatcher() {@Overridepublic void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void afterTextChanged(Editable editable) {checkFields();}});mEmailIcon.getDrawable().setAlpha(0x7f);mPasswordIcon.getDrawable().setAlpha(0x7f);mUsernameIcon.getDrawable().setAlpha(0x7f);mPasswordWarning = (TextView) findViewById(R.id.password_warning);mPassword.addTextChangedListener(new TextWatcher() {@Overridepublic void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void afterTextChanged(Editable editable) {if (mPassword.getText().length() >= (mIsSignup ? 6 : 1)) {mPasswordWarning.setVisibility(View.GONE);} else {mPasswordWarning.setVisibility(View.VISIBLE);}checkFields();}});mUseCCLicense = true;mCheckboxDescription = (TextView) findViewById(R.id.checkbox_description);mCheckboxDescription.setText(Html.fromHtml(mCheckboxDescription.getText().toString()));mCheckboxDescription.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mHelper.alert(R.string.content_licensing, R.string.content_licensing_description);}});mTerms = (TextView) findViewById(R.id.terms);mTerms.setText(Html.fromHtml(mTerms.getText().toString()));mTerms.setMovementMethod(LinkMovementMethod.getInstance());mCheckbox = (ImageView) findViewById(R.id.checkbox);mCheckbox.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mUseCCLicense = !mUseCCLicense;if (mUseCCLicense) {mCheckbox.setImageResource(R.drawable.ic_check_box_white_24dp);} else {mCheckbox.setImageResource(R.drawable.ic_check_box_outline_blank_white_24dp);}}});mSignup = (Button) findViewById(R.id.sign_up);mSignup.setEnabled(false);if (!mIsSignup) {TextView title = (TextView) findViewById(R.id.action_bar_title);title.setText(R.string.log_in);View emailContainer = (View) findViewById(R.id.email_container);emailContainer.setVisibility(View.GONE);View checkboxContainer = (View) findViewById(R.id.checkbox_container);checkboxContainer.setVisibility(View.GONE);mUsername.setHint(R.string.username_or_email);mTerms.setVisibility(View.GONE);View usernameContainer = (View) findViewById(R.id.username_container);ViewGroup parent = (ViewGroup)usernameContainer.getParent();parent.removeView(usernameContainer);parent.addView(usernameContainer, 0);mSignup.setText(R.string.log_in);mPasswordWarning.setText(R.string.forgot);mPasswordWarning.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {// Open the forgot password page on the user's browserString inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);Intent i = new Intent(Intent.ACTION_VIEW);i.setData(Uri.parse(""http://"" + inatHost + ""/forgot_password.mobile""));startActivity(i);}});} else {View loginButtons = findViewById(R.id.login_buttons_container);loginButtons.setVisibility(View.GONE);View loginWith = findViewById(R.id.login_with);loginWith.setVisibility(View.GONE);mTerms.setVisibility(View.VISIBLE);}mFacebookLoginButton = (LoginButton) findViewById(R.id.facebook_login_button);View loginWithFacebook = findViewById(R.id.login_with_facebook);loginWithFacebook.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {recreateSignInTaskIfNeeded();mFacebookLoginButton.performClick();}});View loginWithGoogle = findViewById(R.id.login_with_gplus);loginWithGoogle.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {if (!isNetworkAvailable()) {Toast.makeText(getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();return;}recreateSignInTaskIfNeeded();mSignInTask.signIn(INaturalistService.LoginType.GOOGLE, null, null);}});mSignInTask = new SignInTask(this, this, mFacebookLoginButton);mSignup.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {if (!mIsSignup) {// LoginrecreateSignInTaskIfNeeded();mSignInTask.signIn(INaturalistService.LoginType.OAUTH_PASSWORD, mUsername.getText().toString(), mPassword.getText().toString());} else {// Sign upmUserRegisterReceiver = new UserRegisterReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_REGISTER_USER_RESULT);registerReceiver(mUserRegisterReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_REGISTER_USER, null, LoginSignupActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.EMAIL, mEmail.getText().toString());serviceIntent.putExtra(INaturalistService.USERNAME, mUsername.getText().toString());serviceIntent.putExtra(INaturalistService.PASSWORD, mPassword.getText().toString());serviceIntent.putExtra(INaturalistService.LICENSE, (mUseCCLicense ? ""CC-BY-NC"" : ""on""));startService(serviceIntent);mHelper.loading(getString(R.string.registering));}}});if (getCurrentFocus() != null) {// Hide keyboardgetWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);}getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);((EditText)findViewById(R.id.hide_focus)).requestFocus();}private void checkFields() {if (((mEmail.getText().length() == 0) && (mIsSignup)) || (mPassword.getText().length() < (mIsSignup ? 6 : 1)) || (mUsername.getText().length() == 0)) {mSignup.setEnabled(false);} else {mSignup.setEnabled(true);}}public void onBackPressed(){mSignInTask.pause();setResult(RESULT_CANCELED);finish();overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);mSignInTask.onActivityResult(requestCode, resultCode, data);}@Overridepublic void onLoginSuccessful() {mSignInTask.pause();setResult(RESULT_OK);finish();}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}@Overridepublic void onPause() {super.onPause();try {if (mUserRegisterReceiver != null) {unregisterReceiver(mUserRegisterReceiver);}} catch (Exception exc) {exc.printStackTrace();}}}",LoginSignupActivity.java,0
200,"package org.inaturalist.android;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.util.Log;public abstract class BaseProjectsTab extends BaseTab {private static final int PROJECT_REQUEST_CODE = 101;private int mIndex;protected void onItemSelected(BetterJSONObject item, int index) {// Show project detailsIntent intent = new Intent(getActivity(), ProjectDetails.class);intent.putExtra(""project"", item);startActivityForResult(intent, PROJECT_REQUEST_CODE);mIndex = index;}@Overridepublic void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if (requestCode == PROJECT_REQUEST_CODE) {if ((resultCode == Activity.RESULT_OK) || (resultCode == ProjectDetails.RESULT_REFRESH_RESULTS)) {BetterJSONObject project = (BetterJSONObject) data.getSerializableExtra(""project"");if (project != null) updateProject(mIndex, project);}}}public static String getSearchFilterTextHint(Context context) {return context.getResources().getString(R.string.search_projects);}protected String getNoItemsFoundText() {return getResources().getString(R.string.no_projects);}protected String getNoInternetText() {return getResources().getString(R.string.no_internet_projects);}public static String getSearchUrl(INaturalistApp app) {String inatNetwork = app.getInaturalistNetworkMember();String inatHost = app.getStringResourceByName(""inat_host_"" + inatNetwork);return ""http://"" + inatHost + ""/projects/search.json"";}protected boolean recallServiceActionIfNoResults() {return false;}}",BaseProjectsTab.java,0
200,"package org.inaturalist.android;import android.content.ContentUris;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.Matrix;import android.os.Bundle;import android.provider.MediaStore;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager.LayoutParams;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.ProgressBar;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;import uk.co.senab.photoview.HackyViewPager;import uk.co.senab.photoview.PhotoViewAttacher;public class ProfilePhotoViewer extends AppCompatActivity {private static String TAG = ""ProfilePhotoViewer"";private INaturalistApp mApp;private ActivityHelper mHelper;private JSONObject mUser;private HackyViewPager mViewPager;public static final String USER = ""observation"";@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.profile_photo);Intent intent = getIntent();try {if (savedInstanceState == null) {mUser = new JSONObject(intent.getStringExtra(USER));} else {mUser = new JSONObject(savedInstanceState.getString(""mUser""));}String fullName = mUser.getString(""name"");if ((fullName == null) || (fullName.length() == 0)) {actionBar.setTitle(mUser.getString(""login""));} else {actionBar.setTitle(fullName);}} catch (JSONException e) {e.printStackTrace();}mViewPager = (HackyViewPager) findViewById(R.id.user_pic_view_pager);if (mUser != null) {mViewPager.setAdapter(new ProfilePhotoPagerAdapter(mUser));}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putString(""mUser"", mUser.toString());super.onSaveInstanceState(outState);}class ProfilePhotoPagerAdapter extends PagerAdapter {List<String> mImages;// Load online photos for profilepublic ProfilePhotoPagerAdapter(JSONObject profile) {mImages = new ArrayList<String>();String url;if (profile.has(""original_user_icon_url"") && !profile.isNull(""original_user_icon_url"")) {url = profile.optString(""original_user_icon_url"");} else if (profile.has(""medium_user_icon_url"") && !profile.isNull(""medium_user_icon_url"")) {url = profile.optString(""medium_user_icon_url"");} else {url = profile.optString(""user_icon_url"");}mImages.add(url);}@Overridepublic int getCount() {return mImages.size();}@Overridepublic View instantiateItem(ViewGroup container, int position) {View layout = (View) getLayoutInflater().inflate(R.layout.observation_photo, null, false);container.addView(layout, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);ImageView imageView = (ImageView) layout.findViewById(R.id.id_pic);final ProgressBar loading = (ProgressBar) layout.findViewById(R.id.id_pic_loading);String imageUrl = mImages.get(position);loading.setVisibility(View.VISIBLE);imageView.setVisibility(View.INVISIBLE);final PhotoViewAttacher attacher = new PhotoViewAttacher(imageView);// Show a photoUrlImageViewHelper.setUrlDrawable(imageView, imageUrl, R.drawable.ic_account_circle_black_48dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {loading.setVisibility(View.GONE);imageView.setVisibility(View.VISIBLE);attacher.update();}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Scale down the image if it's too big for the GL rendererloadedBitmap = ImageUtils.scaleDownBitmapIfNeeded(ProfilePhotoViewer.this, loadedBitmap);return loadedBitmap;}});return layout;}@Overridepublic void destroyItem(ViewGroup container, int position, Object object) {container.removeView((View) object);}@Overridepublic boolean isViewFromObject(View view, Object object) {return view == object;}}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:finish();return true;default:return super.onOptionsItemSelected(item);}}}",ProfilePhotoViewer.java,0
200,"package org.inaturalist.android;import android.content.Context;import android.graphics.Bitmap;import android.text.Html;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONException;import org.json.JSONObject;import org.w3c.dom.Text;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.regex.Matcher;import java.util.regex.Pattern;class ProjectNewsAdapter extends ArrayAdapter<String> {private ArrayList<JSONObject> mResultList;private Context mContext;private JSONObject mProject;public ProjectNewsAdapter(Context context, JSONObject project, ArrayList<JSONObject> results) {super(context, android.R.layout.simple_list_item_1);mContext = context;mResultList = results;Collections.sort(mResultList, new Comparator<JSONObject>() {@Overridepublic int compare(JSONObject news1, JSONObject news2) {BetterJSONObject news1json = new BetterJSONObject(news1);BetterJSONObject news2json = new BetterJSONObject(news2);return news2json.getTimestamp(""updated_at"").compareTo(news1json.getTimestamp(""updated_at""));}});mProject = project;}@Overridepublic int getCount() {return (mResultList != null ? mResultList.size() : 0);}public View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view = inflater.inflate(R.layout.project_news_item, parent, false);JSONObject item = mResultList.get(position);try {ImageView projectPic = (ImageView) view.findViewById(R.id.project_pic);ImageView postPic = (ImageView) view.findViewById(R.id.post_pic);TextView projectTitle = (TextView) view.findViewById(R.id.project_title);TextView newsDate = (TextView) view.findViewById(R.id.news_date);TextView newsTitle = (TextView) view.findViewById(R.id.news_title);TextView newsContent = (TextView) view.findViewById(R.id.news_content);JSONObject project = mProject != null ? mProject : item.getJSONObject(""parent"");if (project.has(""icon_url"") && !project.isNull(""icon_url"")) {UrlImageViewHelper.setUrlDrawable(projectPic, project.getString(""icon_url""));}projectTitle.setText(project.optString(""title"", project.optString(""name"")));newsTitle.setText(item.getString(""title""));String html = item.getString(""body"");String firstPhotoUrl = findFirstPhotoUrl(html);html = html.replaceAll(""<img .+?>"", """"); // Image tags do not get removed cleanly by toStringString noHTML = Html.fromHtml(html).toString().trim();newsContent.setText(noHTML);BetterJSONObject newsItem = new BetterJSONObject(item);newsDate.setText(CommentsIdsAdapter.formatIdDate(newsItem.getTimestamp(""updated_at"")));if (firstPhotoUrl != null) {// Set the article photopostPic.setVisibility(View.VISIBLE);UrlImageViewHelper.setUrlDrawable(postPic, firstPhotoUrl, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {Bitmap centerCrop = ImageUtils.centerCropBitmap(loadedBitmap);return centerCrop;}});} else {// No article photopostPic.setVisibility(View.GONE);}view.setTag(item);} catch (JSONException e) {e.printStackTrace();}return view;}private String findFirstPhotoUrl(String html) {// Find an <img> HTML tag and retrieve its ""src"" attributeString regex = ""<img[^>]+src\\s*=\\s*['\""]([^'\""]+)['\""][^>]*>"";Pattern p = Pattern.compile(regex);Matcher m = p.matcher(html);if (m.find()) {return m.group(1);} else {return null;}}}",ProjectNewsAdapter.java,0
200,package org.inaturalist.android;public class NearByProjectsTab extends BaseProjectsTab {@Overrideprotected boolean requiresLocation() {return true;}@Overrideprotected String getActionName() {return INaturalistService.ACTION_GET_NEARBY_PROJECTS;}@Overrideprotected String getFilterResultName() {return INaturalistService.ACTION_NEARBY_PROJECTS_RESULT;}@Overrideprotected String getFilterResultParamName() {return INaturalistService.PROJECTS_RESULT;}},NearByProjectsTab.java,0
200,"package org.inaturalist.android;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Typeface;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONException;import org.json.JSONObject;import java.text.DecimalFormat;import java.util.ArrayList;class UserSpeciesAdapter extends ArrayAdapter<String> {private ArrayList<JSONObject> mResultList;private Context mContext;public UserSpeciesAdapter(Context context, ArrayList<JSONObject> results) {super(context, android.R.layout.simple_list_item_1);mContext = context;mResultList = results;}@Overridepublic int getCount() {return (mResultList != null ? mResultList.size() : 0);}public View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view = inflater.inflate(R.layout.user_profile_species_item, parent, false);JSONObject item = null;try {item = mResultList.get(position).getJSONObject(""taxon"");} catch (JSONException e) {e.printStackTrace();return view;}// Get the taxon display name according to device localetry {ImageView speciesPic = (ImageView) view.findViewById(R.id.species_pic);TextView speciesName = (TextView) view.findViewById(R.id.species_name);TextView scienceName = (TextView) view.findViewById(R.id.species_science_name);JSONObject defaultName = item.optJSONObject(""default_name"");if (defaultName != null) {speciesName.setText(defaultName.getString(""name""));scienceName.setText(item.getString(""name""));} else {speciesName.setText(item.getString(""name""));scienceName.setVisibility(View.GONE);}if (item.has(""photo_url"") && !item.isNull(""photo_url"")) {String photoUrl = item.getString(""photo_url"");UrlImageViewHelper.setUrlDrawable(speciesPic, photoUrl, ObservationPhotosViewer.observationIcon(item), new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {if (loadedBitmap != null)imageView.setImageBitmap(ImageUtils.getRoundedCornerBitmap(loadedBitmap, 4));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});} else {speciesPic.setImageResource(R.drawable.iconic_taxon_unknown);}TextView speciesCount = (TextView) view.findViewById(R.id.species_count);int count = item.getInt(""observations_count"");DecimalFormat formatter = new DecimalFormat(""#,###,###"");speciesCount.setText(formatter.format(count));view.setTag(item);} catch (JSONException e) {e.printStackTrace();}return view;}}",UserSpeciesAdapter.java,0
200,"package org.inaturalist.android;import org.w3c.dom.Node;/*** Represents a GuideTaxonSection XML node*/public class GuideTaxonSectionXML extends BaseGuideXMLParser {/*** Initialize the GuideTaxonSectionXML class with the root XML node for it* @param root*/public GuideTaxonSectionXML(Node root) {setRootNode(root);}/*** Returns the section's title* @return the section's title*/public String getTitle() {return getValueByXPath(""dc:title"");}/*** Returns the section's body* @return the section's body*/public String getBody() {return getValueByXPath(""dc:body"");}/*** Returns the section's attribution* @return the section's attribution*/public String getAttribution() {return getValueByXPath(""attribution"");}/*** Returns the section's rights holder* @return the section's rights holder*/public String getRightsHolder() {return getValueByXPath(""dcterms:rightsHolder"");}}",GuideTaxonSectionXML.java,0
200,"package org.inaturalist.android;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Typeface;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONException;import org.json.JSONObject;import java.text.DecimalFormat;import java.util.ArrayList;class ProjectUserAdapter extends ArrayAdapter<String> {private ArrayList<JSONObject> mResultList;private Context mContext;public ProjectUserAdapter(Context context, ArrayList<JSONObject> results) {super(context, android.R.layout.simple_list_item_1);mContext = context;mResultList = results;}@Overridepublic int getCount() {return (mResultList != null ? mResultList.size() : 0);}public View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view = inflater.inflate(R.layout.project_user_item, parent, false);JSONObject item = null;int count;try {JSONObject jsonObject = mResultList.get(position);if (jsonObject.has(""observation_count"")) {count = jsonObject.getInt(""observation_count"");} else {count = jsonObject.getInt(""count"");}item = jsonObject.getJSONObject(""user"");} catch (JSONException e) {e.printStackTrace();return view;}// Get the taxon display name according to device localetry {ImageView userPic = (ImageView) view.findViewById(R.id.user_pic);TextView username = (TextView) view.findViewById(R.id.username);TextView rank = (TextView) view.findViewById(R.id.rank);TextView countText = (TextView) view.findViewById(R.id.count);DecimalFormat formatter = new DecimalFormat(""#,###,###"");rank.setText(formatter.format(position + 1));username.setText(item.getString(""login""));countText.setText(formatter.format(count));if (item.has(""icon_url"") && !item.isNull(""icon_url"")) {UrlImageViewHelper.setUrlDrawable(userPic, item.getString(""icon_url""), R.drawable.ic_account_circle_black_24dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) { }@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Return a circular version of the profile pictureBitmap centerCrop = ImageUtils.centerCropBitmap(loadedBitmap);return ImageUtils.getCircleBitmap(centerCrop);}});} else {userPic.setImageResource(R.drawable.ic_account_circle_black_24dp);}view.setTag(item);} catch (JSONException e) {e.printStackTrace();}return view;}}",ProjectUserAdapter.java,0
200,"// BEGIN GENERATED BY /Users/kueda/projects/eclipse/workspace/iNaturalist/rails2android.rb AT Mon Dec 26 19:18:32 -0500 2011package org.inaturalist.android;import java.io.Serializable;import java.sql.Timestamp;import java.util.ArrayList;import java.util.HashMap;import org.apache.http.NameValuePair;import org.apache.http.message.BasicNameValuePair;import org.json.JSONException;import org.json.JSONObject;import android.content.ContentUris;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.provider.BaseColumns;import android.util.Log;public class ObservationPhoto implements BaseColumns, Serializable {public Integer _id;public Timestamp _created_at;public Integer _observation_id;public Integer _photo_id;public Timestamp _synced_at;public Timestamp _updated_at;public Timestamp created_at;public Integer id;public Integer observation_id;public Integer photo_id;public Integer position;public Timestamp updated_at;public String photo_url;public String photo_filename;public String uuid;public Timestamp _created_at_was;public Integer _observation_id_was;public Integer _photo_id_was;public Timestamp _synced_at_was;public Timestamp _updated_at_was;public Timestamp created_at_was;public Integer id_was;public Integer observation_id_was;public Integer photo_id_was;public Integer position_was;public Timestamp updated_at_was;public static final String TAG = ""ObservationPhoto"";public static final String TABLE_NAME = ""observation_photos"";public static final int OBSERVATION_PHOTOS_URI_CODE = 1801;public static final int OBSERVATION_PHOTO_ID_URI_CODE = 1686;public static HashMap<String, String> PROJECTION_MAP;public static final String AUTHORITY = ""org.inaturalist.android.observation_photo"";public static final Uri    CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/observation_photos"");public static final String CONTENT_TYPE = ""vnd.android.cursor.dir/vnd.google.observation_photo"";public static final String CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/vnd.google.observation_photo"";public static final String DEFAULT_SORT_ORDER = ""position ASC, id ASC, _id ASC"";public static final String _CREATED_AT = ""_created_at"";public static final String _OBSERVATION_ID = ""_observation_id"";public static final String _PHOTO_ID = ""_photo_id"";public static final String _SYNCED_AT = ""_synced_at"";public static final String _UPDATED_AT = ""_updated_at"";public static final String CREATED_AT = ""created_at"";public static final String UUID = ""uuid"";public static final String PHOTO_URL = ""photo_url"";public static final String PHOTO_FILENAME = ""photo_filename"";public static final String ID = ""id"";public static final String OBSERVATION_ID = ""observation_id"";public static final String PHOTO_ID = ""photo_id"";public static final String POSITION = ""position"";public static final String UPDATED_AT = ""updated_at"";public static final String[] PROJECTION = new String[] {ObservationPhoto._ID,ObservationPhoto._CREATED_AT,ObservationPhoto._OBSERVATION_ID,ObservationPhoto._PHOTO_ID,ObservationPhoto._SYNCED_AT,ObservationPhoto._UPDATED_AT,ObservationPhoto.CREATED_AT,ObservationPhoto.UUID,ObservationPhoto.ID,ObservationPhoto.OBSERVATION_ID,ObservationPhoto.PHOTO_ID,ObservationPhoto.POSITION,ObservationPhoto.UPDATED_AT,ObservationPhoto.PHOTO_URL,ObservationPhoto.PHOTO_FILENAME};static {PROJECTION_MAP = new HashMap<String, String>();PROJECTION_MAP.put(ObservationPhoto._ID, ObservationPhoto._ID);PROJECTION_MAP.put(ObservationPhoto._CREATED_AT, ObservationPhoto._CREATED_AT);PROJECTION_MAP.put(ObservationPhoto._OBSERVATION_ID, ObservationPhoto._OBSERVATION_ID);PROJECTION_MAP.put(ObservationPhoto._PHOTO_ID, ObservationPhoto._PHOTO_ID);PROJECTION_MAP.put(ObservationPhoto._SYNCED_AT, ObservationPhoto._SYNCED_AT);PROJECTION_MAP.put(ObservationPhoto._UPDATED_AT, ObservationPhoto._UPDATED_AT);PROJECTION_MAP.put(ObservationPhoto.CREATED_AT, ObservationPhoto.CREATED_AT);PROJECTION_MAP.put(ObservationPhoto.UUID, ObservationPhoto.UUID);PROJECTION_MAP.put(ObservationPhoto.ID, ObservationPhoto.ID);PROJECTION_MAP.put(ObservationPhoto.OBSERVATION_ID, ObservationPhoto.OBSERVATION_ID);PROJECTION_MAP.put(ObservationPhoto.PHOTO_ID, ObservationPhoto.PHOTO_ID);PROJECTION_MAP.put(ObservationPhoto.POSITION, ObservationPhoto.POSITION);PROJECTION_MAP.put(ObservationPhoto.UPDATED_AT, ObservationPhoto.UPDATED_AT);PROJECTION_MAP.put(ObservationPhoto.PHOTO_URL, ObservationPhoto.PHOTO_URL);PROJECTION_MAP.put(ObservationPhoto.PHOTO_FILENAME, ObservationPhoto.PHOTO_FILENAME);}public ObservationPhoto() {}public ObservationPhoto(Cursor c) {if (c.getPosition() == -1) c.moveToFirst();BetterCursor bc = new BetterCursor(c);this._id = bc.getInt(_ID);this._created_at = bc.getTimestamp(_CREATED_AT);this._created_at_was = this._created_at;this._observation_id = bc.getInteger(_OBSERVATION_ID);this._observation_id_was = this._observation_id;this._photo_id = bc.getInteger(_PHOTO_ID);this._photo_id_was = this._photo_id;this._synced_at = bc.getTimestamp(_SYNCED_AT);this._synced_at_was = this._synced_at;this._updated_at = bc.getTimestamp(_UPDATED_AT);this._updated_at_was = this._updated_at;this.created_at = bc.getTimestamp(CREATED_AT);this.created_at_was = this.created_at;this.uuid = bc.getString(UUID);this.id = bc.getInteger(ID);this.id_was = this.id;this.observation_id = bc.getInteger(OBSERVATION_ID);this.observation_id_was = this.observation_id;this.photo_id = bc.getInteger(PHOTO_ID);this.photo_id_was = this.photo_id;this.position = bc.getInteger(POSITION);this.position_was = this.position;this.updated_at = bc.getTimestamp(UPDATED_AT);this.updated_at_was = this.updated_at;this.photo_url = bc.getString(PHOTO_URL);this.photo_filename = bc.getString(PHOTO_FILENAME);}public ObservationPhoto(BetterJSONObject o) {this._created_at = o.getTimestamp(""_created_at"");this._created_at_was = this._created_at;this._observation_id = o.getInteger(""_observation_id"");this._observation_id_was = this._observation_id;this._photo_id = o.getInteger(""_photo_id"");this._photo_id_was = this._photo_id;this._synced_at = o.getTimestamp(""_synced_at"");this._synced_at_was = this._synced_at;this._updated_at = o.getTimestamp(""_updated_at"");this._updated_at_was = this._updated_at;this.created_at = o.getTimestamp(""created_at"");this.created_at_was = this.created_at;this.uuid = o.getString(""uuid"");this.id = o.getInteger(""id"");this.id_was = this.id;this.observation_id = o.getInteger(""observation_id"");this.observation_id_was = this.observation_id;this.photo_id = o.getInteger(""photo_id"");this.photo_id_was = this.photo_id;this.position = o.getInteger(""position"");this.position_was = this.position;this.updated_at = o.getTimestamp(""updated_at"");this.updated_at_was = this.updated_at;String photoUrlSize = ""medium_url"";if (o.has(photoUrlSize)) {this.photo_url = o.getString(photoUrlSize);} else {try {this.photo_url = o.getJSONObject(""photo"").getString(photoUrlSize);} catch (Exception e) {e.printStackTrace();}}}@Overridepublic String toString() {return ""ObservationPhoto(id: "" + id + "", _id: "" + _id + "")"";}public JSONObject toJSONObject() {BetterJSONObject bo = new BetterJSONObject();bo.put(""_created_at"", _created_at);bo.put(""_observation_id"", _observation_id);bo.put(""_photo_id"", _photo_id);bo.put(""_synced_at"", _synced_at);bo.put(""_updated_at"", _updated_at);bo.put(""created_at"", created_at);bo.put(""uuid"", uuid);bo.put(""id"", id);bo.put(""observation_id"", observation_id);bo.put(""photo_id"", photo_id);bo.put(""position"", position);bo.put(""updated_at"", updated_at);return bo.getJSONObject();}public Uri getUri() {if (_id == null) {return null;} else {return ContentUris.withAppendedId(CONTENT_URI, _id);}}public void merge(ObservationPhoto observation_photo) {if (observation_photo.updated_at != null && this._updated_at.before(observation_photo.updated_at)) {// overwritethis.created_at = observation_photo.created_at;this.id = observation_photo.id;this.observation_id = observation_photo.observation_id;this.photo_id = observation_photo.photo_id;this.position = observation_photo.position;this.updated_at = observation_photo.updated_at;this.uuid = observation_photo.uuid;} else {// set if nullif (this.created_at == null) { this.created_at = observation_photo.created_at; }if (this.id == null) { this.id = observation_photo.id; }if (this.observation_id == null) { this.observation_id = observation_photo.observation_id; }if (this.photo_id == null) { this.photo_id = observation_photo.photo_id; }if (this.position == null) { this.position = observation_photo.position; }if (this.updated_at == null) { this.updated_at = observation_photo.updated_at; }if (this.uuid == null) { this.uuid = observation_photo.uuid; }}}public ContentValues getContentValues() {ContentValues cv = new ContentValues();if (created_at != null) { cv.put(CREATED_AT, created_at.getTime()); }cv.put(ID, id);cv.put(OBSERVATION_ID, observation_id);cv.put(_OBSERVATION_ID, _observation_id);cv.put(PHOTO_ID, photo_id);cv.put(POSITION, position);cv.put(PHOTO_URL, photo_url);cv.put(PHOTO_FILENAME, photo_filename);if (updated_at != null) { cv.put(UPDATED_AT, updated_at.getTime()); }if (uuid != null) { cv.put(UUID, uuid); }return cv;}public ArrayList<NameValuePair> getParams() {final ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();if (observation_id != null) { params.add(new BasicNameValuePair(""observation_photo[observation_id]"", observation_id.toString())); }if (photo_id != null) { params.add(new BasicNameValuePair(""observation_photo[photo_id]"", photo_id.toString())); }if (position != null) { params.add(new BasicNameValuePair(""observation_photo[position]"", position.toString())); }if (uuid != null) { params.add(new BasicNameValuePair(""observation_photo[uuid]"", uuid)); }return params;}public static String sqlCreate() {return ""CREATE TABLE "" + TABLE_NAME + "" (""+ ObservationPhoto._ID + "" INTEGER PRIMARY KEY,""+ ""_created_at INTEGER,""+ ""_observation_id INTEGER,""+ ""_photo_id INTEGER,""+ ""_synced_at INTEGER,""+ ""_updated_at INTEGER,""+ ""created_at INTEGER,""+ ""uuid TEXT,""+ ""id INTEGER,""+ ""observation_id INTEGER,""+ ""photo_id INTEGER,""+ ""position INTEGER,""+ ""updated_at INTEGER,""+ ""photo_url TEXT,""+ ""photo_filename TEXT""+ "");"";}public boolean _created_at_changed() { return !String.valueOf(_created_at).equals(String.valueOf(_created_at_was)); }public boolean _observation_id_changed() { return !String.valueOf(_observation_id).equals(String.valueOf(_observation_id_was)); }public boolean _photo_id_changed() { return !String.valueOf(_photo_id).equals(String.valueOf(_photo_id_was)); }public boolean _synced_at_changed() { return !String.valueOf(_synced_at).equals(String.valueOf(_synced_at_was)); }public boolean _updated_at_changed() { return !String.valueOf(_updated_at).equals(String.valueOf(_updated_at_was)); }public boolean created_at_changed() { return !String.valueOf(created_at).equals(String.valueOf(created_at_was)); }public boolean id_changed() { return !String.valueOf(id).equals(String.valueOf(id_was)); }public boolean observation_id_changed() { return !String.valueOf(observation_id).equals(String.valueOf(observation_id_was)); }public boolean photo_id_changed() { return !String.valueOf(photo_id).equals(String.valueOf(photo_id_was)); }public boolean position_changed() { return !String.valueOf(position).equals(String.valueOf(position_was)); }public boolean updated_at_changed() { return !String.valueOf(updated_at).equals(String.valueOf(updated_at_was)); }public boolean isDirty() {if (_created_at_changed()) { return true; }if (_observation_id_changed()) { return true; }if (_photo_id_changed()) { return true; }if (_synced_at_changed()) { return true; }if (_updated_at_changed()) { return true; }if (created_at_changed()) { return true; }if (id_changed()) { return true; }if (observation_id_changed()) { return true; }if (photo_id_changed()) { return true; }if (position_changed()) { return true; }if (updated_at_changed()) { return true; }return false;}}// END GENERATED BY /Users/kueda/projects/eclipse/workspace/iNaturalist/rails2android.rb AT Mon Dec 26 19:18:32 -0500 2011",ObservationPhoto.java,0
200,"/*** BetterCursor** Wraps Cursor with simpler getters*/package org.inaturalist.android;import java.io.Serializable;import java.sql.Timestamp;import android.database.Cursor;public class BetterCursor implements Serializable {public final static String TAG = ""BetterCursor"";private Cursor mCursor;private Integer mPosition;public BetterCursor(Cursor c) {mCursor = c;if (mCursor.getPosition() == -1) mCursor.moveToFirst();mPosition = mCursor.getPosition();}public Object get(String name) {mCursor.moveToPosition(mPosition);if (mCursor.isNull(mCursor.getColumnIndexOrThrow(name))) {return null;}return mCursor.getString(mCursor.getColumnIndexOrThrow(name));}public String getString(String name) {Object value = get(name);return value == null ? null : value.toString();}public Boolean getBoolean(String name) {mCursor.moveToPosition(mPosition);return (1 == mCursor.getInt(mCursor.getColumnIndexOrThrow(name)));}public Integer getInt(String name) {mCursor.moveToPosition(mPosition);if (mCursor.isNull(mCursor.getColumnIndexOrThrow(name))) {return null;}return mCursor.getInt(mCursor.getColumnIndexOrThrow(name));}public Integer getInteger(String name) {return getInt(name);}public Double getDouble(String name) {if (mCursor.isNull(mCursor.getColumnIndexOrThrow(name))) {return null;}return mCursor.getDouble(mCursor.getColumnIndexOrThrow(name));}public Float getFloat(String name) {mCursor.moveToPosition(mPosition);if (mCursor.isNull(mCursor.getColumnIndexOrThrow(name))) {return null;}return mCursor.getFloat(mCursor.getColumnIndexOrThrow(name));}public Timestamp getTimestamp(String name) {mCursor.moveToPosition(mPosition);if (mCursor.isNull(mCursor.getColumnIndexOrThrow(name))) {return null;}return new Timestamp(mCursor.getLong(mCursor.getColumnIndexOrThrow(name)));}public int getCount() {return mCursor.getCount();}}",BetterCursor.java,0
200,"package org.inaturalist.android;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.Window;import android.widget.Button;import android.widget.Toast;import android.widget.ViewFlipper;import com.facebook.login.widget.LoginButton;import com.flurry.android.FlurryAgent;public class OnboardingActivity extends AppCompatActivity implements SignInTask.SignInTaskStatus {private static final int REQUEST_CODE_SIGNUP = 0x1000;private static final int REQUEST_CODE_LOGIN = 0x1001;public static final String LOGIN = ""login"";public static final String SHOW_SKIP = ""show_skip"";private static String TAG = ""OnboardingActivity"";private INaturalistApp mApp;private ActivityHelper mHelper;private ViewFlipper mBackgroundImage;private LoginButton mFacebookLoginButton;private SharedPreferences mPreferences;private SharedPreferences.Editor mPrefEditor;private SignInTask mSignInTask;@Overrideprotected void onStart() {super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop() {super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {requestWindowFeature(Window.FEATURE_NO_TITLE);super.onCreate(savedInstanceState);getSupportActionBar().hide();mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.onboarding);Intent intent = getIntent();Boolean shouldLogin = false;Boolean showSkip = false;if (savedInstanceState == null) {shouldLogin = intent.getBooleanExtra(LOGIN, false);showSkip = intent.getBooleanExtra(SHOW_SKIP, false);}mHelper = new ActivityHelper(this);mPreferences = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);mPrefEditor = mPreferences.edit();mBackgroundImage = (ViewFlipper) findViewById(R.id.background_image);mBackgroundImage.startFlipping();View closeButton = (View) findViewById(R.id.close);closeButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {onBackPressed();}});View signUpWithEmail = findViewById(R.id.sign_up_with_email);signUpWithEmail.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mSignInTask.pause();Intent intent = new Intent(OnboardingActivity.this, LoginSignupActivity.class);intent.putExtra(LoginSignupActivity.SIGNUP, true);intent.putExtra(LoginSignupActivity.BACKGROUND_ID, mBackgroundImage.indexOfChild(mBackgroundImage.getCurrentView()));startActivityForResult(intent, REQUEST_CODE_SIGNUP);overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);}});View login = (View) findViewById(R.id.login_with_email);login.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mSignInTask.pause();Intent intent = new Intent(OnboardingActivity.this, LoginSignupActivity.class);intent.putExtra(LoginSignupActivity.SIGNUP, false);intent.putExtra(LoginSignupActivity.BACKGROUND_ID, mBackgroundImage.indexOfChild(mBackgroundImage.getCurrentView()));startActivityForResult(intent, REQUEST_CODE_LOGIN);overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);}});Button skip = (Button) findViewById(R.id.skip);skip.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mSignInTask.pause();setResult(RESULT_CANCELED);finish();}});if (!showSkip) {skip.setVisibility(View.INVISIBLE);} else {// Don't show both skip and the X (close) buttons togethercloseButton.setVisibility(View.INVISIBLE);}mFacebookLoginButton = (LoginButton) findViewById(R.id.facebook_login_button);View loginWithFacebook = findViewById(R.id.login_with_facebook);loginWithFacebook.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mFacebookLoginButton.performClick();}});View loginWithGoogle = findViewById(R.id.login_with_gplus);loginWithGoogle.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {if (!isNetworkAvailable()) {Toast.makeText(getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();return;}mSignInTask.signIn(INaturalistService.LoginType.GOOGLE, null, null);}});mSignInTask = new SignInTask(this, this, mFacebookLoginButton);if (shouldLogin) {// Show login screenlogin.performClick();}}@Overridepublic void onLoginSuccessful() {// Close this screenmSignInTask.pause();setResult(RESULT_OK);finish();}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);mSignInTask.onActivityResult(requestCode, resultCode, data);if ((requestCode == REQUEST_CODE_LOGIN) || (requestCode == REQUEST_CODE_SIGNUP)) {if (resultCode == RESULT_OK) {// Successfully registered / logged-in from the sub-activity we've openedmSignInTask.pause();setResult(RESULT_OK);finish();} else {mSignInTask.resume();}}}public void onBackPressed(){mSignInTask.pause();setResult(RESULT_CANCELED);finish();}}",OnboardingActivity.java,0
200,"package org.inaturalist.android;import android.app.Activity;import android.app.NotificationManager;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Typeface;import android.media.projection.MediaProjection;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.os.Handler;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Filter;import android.widget.Filterable;import android.widget.HeaderViewListAdapter;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.io.InputStreamReader;import java.lang.reflect.InvocationTargetException;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.util.ArrayList;import java.util.List;import java.util.Locale;public class ItemSearchActivity extends AppCompatActivity implements AdapterView.OnItemClickListener, ProjectsAdapter.OnLoading {private static final String LOG_TAG = ""ItemSearchActivity"";public static final String RESULT_VIEWER_ACTIVITY = ""result_viewer_activity"";public static final String RESULT_VIEWER_ACTIVITY_PARAM_NAME = ""result_viewer_activity_param_name"";public static final String SEARCH_HINT_TEXT = ""search_hint_text"";public static final String SEARCH_URL = ""search_url"";private Class<Activity> mViewerActivity;private String mViewerActivityParamName;private String mHintText;private String mSearchUrl;private String mSearchString = """";private ProjectsAdapter mAdapter;private ProgressBar mProgress;private INaturalistApp mApp;private EditText mSearchEditText;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overridepublic void onResume() {super.onResume();if (mApp == null) { mApp = (INaturalistApp) getApplicationContext(); }}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:setResult(RESULT_CANCELED);finish();return true;}return super.onOptionsItemSelected(item);}@Overridepublic void onBackPressed() {setResult(RESULT_CANCELED);finish();}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);if (mApp == null) { mApp = (INaturalistApp) getApplicationContext(); }final Intent intent = getIntent();mViewerActivity = (Class<Activity>) intent.getSerializableExtra(RESULT_VIEWER_ACTIVITY);mViewerActivityParamName = intent.getStringExtra(RESULT_VIEWER_ACTIVITY_PARAM_NAME);mHintText = intent.getStringExtra(SEARCH_HINT_TEXT);mSearchUrl = intent.getStringExtra(SEARCH_URL);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setDisplayShowCustomEnabled(true);LayoutInflater li = LayoutInflater.from(this);View customView = li.inflate(R.layout.taxon_search_action_bar, null);actionBar.setCustomView(customView);actionBar.setLogo(R.drawable.ic_arrow_back);setContentView(R.layout.taxon_search);mProgress = (ProgressBar) findViewById(R.id.progress);mProgress.setVisibility(View.GONE);mSearchEditText = (EditText) customView.findViewById(R.id.search_text);if (savedInstanceState == null) {mAdapter = new ProjectsAdapter(this, mSearchUrl, this, new ArrayList<JSONObject>());} else {mSearchString = savedInstanceState.getString(""mSearchString"");mSearchEditText.setText(mSearchString);mAdapter = new ProjectsAdapter(this, mSearchUrl, this, loadListFromBundle(savedInstanceState, ""mProjects""));}if (mHintText != null) mSearchEditText.setHint(mHintText);mSearchEditText.addTextChangedListener(new TextWatcher() {@Overridepublic void onTextChanged(final CharSequence s, int start, int before, int count) {if (!s.toString().equals(mSearchString)) {mSearchString = s.toString();if (mAdapter != null) ((Filterable) mAdapter).getFilter().filter(s);}}@Overridepublic void beforeTextChanged(CharSequence s, int start, int count, int after) { }@Overridepublic void afterTextChanged(Editable s) { }});setListAdapter(mAdapter);getListView().setOnItemClickListener(this);}public void onItemClick(AdapterView<?> adapterView, View v, int position, long id) {BetterJSONObject item = (BetterJSONObject) v.getTag();if (item != null) {Intent intent = new Intent(this, mViewerActivity);intent.putExtra(mViewerActivityParamName, item);startActivity(intent);}}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}private ListView mListView;protected ListView getListView() {if (mListView == null) {mListView = (ListView) findViewById(android.R.id.list);}return mListView;}protected void setListAdapter(ListAdapter adapter) {getListView().setAdapter(adapter);}@Overridepublic void onLoading(final Boolean isLoading) {runOnUiThread(new Runnable() {@Overridepublic void run() {if (isLoading) {getListView().setVisibility(View.GONE);mProgress.setVisibility(View.VISIBLE);} else {mProgress.setVisibility(View.GONE);getListView().setVisibility(View.VISIBLE);}}});}@Overrideprotected void onSaveInstanceState(Bundle outState) {saveListToBundle(outState, mAdapter.getItems(), ""mProjects"");outState.putString(""mSearchString"", mSearchString);super.onSaveInstanceState(outState);}private void saveListToBundle(Bundle outState, List<JSONObject> list, String key) {if (list != null) {JSONArray arr = new JSONArray(list);outState.putString(key, arr.toString());}}private List<JSONObject> loadListFromBundle(Bundle savedInstanceState, String key) {List<JSONObject> results = new ArrayList<JSONObject>();String obsString = savedInstanceState.getString(key);if (obsString != null) {try {JSONArray arr = new JSONArray(obsString);for (int i = 0; i < arr.length(); i++) {results.add(arr.getJSONObject(i));}return results;} catch (JSONException exc) {exc.printStackTrace();return null;}} else {return null;}}}",ItemSearchActivity.java,0
200,"package org.inaturalist.android;import android.app.NotificationManager;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Typeface;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.Locale;class UserIdentificationsAdapter extends ArrayAdapter<String> {private ArrayList<JSONObject> mResultList;private Context mContext;private String mUsername;public UserIdentificationsAdapter(Context context, ArrayList<JSONObject> results, String username) {super(context, android.R.layout.simple_list_item_1);mContext = context;mResultList = results;mUsername = username;}@Overridepublic int getCount() {return (mResultList != null ? mResultList.size() : 0);}public View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view = inflater.inflate(R.layout.user_profile_identifications_item, parent, false);JSONObject item = null;item = mResultList.get(position);((ViewGroup)view.findViewById(R.id.taxon_result)).setVisibility(View.VISIBLE);// Get the taxon display name according to device localetry {ImageView idPic = (ImageView) view.findViewById(R.id.id_pic);TextView idName = (TextView) view.findViewById(R.id.id_name);TextView idTaxonName = (TextView) view.findViewById(R.id.id_taxon_name);JSONObject observation = item.getJSONObject(""observation"");JSONObject taxon = item.getJSONObject(""taxon"");idName.setText(observation.optString(""species_guess""));idTaxonName.setText(String.format(mContext.getString(R.string.users_identification), mUsername, getTaxonName(taxon)));idPic.setImageResource(R.drawable.iconic_taxon_unknown);JSONArray photos = observation.optJSONArray(""photos"");if ((photos != null) && (photos.length() > 0)) {UrlImageViewHelper.setUrlDrawable(idPic, photos.getJSONObject(0).getString(""square_url""), ObservationPhotosViewer.observationIcon(item), new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {if (loadedBitmap != null)imageView.setImageBitmap(ImageUtils.getRoundedCornerBitmap(loadedBitmap, 4));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});}view.setTag(item);} catch (JSONException e) {e.printStackTrace();}return view;}private String getTaxonName(JSONObject item) {JSONObject defaultName;String displayName = null;// Get the taxon display name according to device localeNotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = mContext.getResources().getConfiguration().locale;String deviceLexicon =   deviceLocale.getLanguage();try {JSONArray taxonNames = item.getJSONArray(""taxon_names"");for (int i = 0; i < taxonNames.length(); i++) {JSONObject taxonName = taxonNames.getJSONObject(i);String lexicon = taxonName.getString(""lexicon"");if (lexicon.equals(deviceLexicon)) {// Found the appropriate lexicon for the taxondisplayName = taxonName.getString(""name"");break;}}} catch (JSONException e3) {//e3.printStackTrace();}if (displayName == null) {// Couldn't extract the display name from the taxon names list - use the default onetry {displayName = item.getString(""unique_name"");} catch (JSONException e2) {displayName = null;}try {defaultName = item.getJSONObject(""default_name"");displayName = defaultName.getString(""name"");} catch (JSONException e1) {// alasJSONObject commonName = item.optJSONObject(""common_name"");if (commonName != null) {displayName = commonName.optString(""name"");} else {displayName = item.optString(""name"");}}}return displayName;}}",UserIdentificationsAdapter.java,0
200,"package org.inaturalist.android;import java.io.IOException;import java.io.InputStreamReader;import java.io.Serializable;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.sql.Timestamp;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Locale;import android.app.NotificationManager;import android.graphics.Bitmap;import android.graphics.Typeface;import org.inaturalist.android.R;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.Dialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.database.Cursor;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.location.Criteria;import android.location.Location;import android.location.LocationManager;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.support.v7.app.ActionBar;import android.text.Editable;import android.text.Html;import android.text.TextWatcher;import android.util.Log;import android.util.TypedValue;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.Window;import android.view.inputmethod.EditorInfo;import android.view.inputmethod.InputMethodManager;import android.widget.AbsListView;import android.widget.AbsListView.OnScrollListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TabHost;import android.widget.TabHost.OnTabChangeListener;import android.widget.TextView;import android.widget.Toast;import com.flurry.android.FlurryAgent;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.GooglePlayServicesUtil;import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;import com.google.android.gms.location.LocationServices;import com.google.android.gms.maps.CameraUpdate;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;import com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener;import com.google.android.gms.maps.GoogleMap.OnMapLoadedCallback;import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.BitmapDescriptor;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.google.android.gms.maps.model.CameraPosition;import com.google.android.gms.maps.model.Circle;import com.google.android.gms.maps.model.CircleOptions;import com.google.android.gms.maps.model.LatLngBounds;import com.google.android.gms.maps.model.LatLngBounds.Builder;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.VisibleRegion;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;public class INaturalistMapActivity extends BaseFragmentActivity implements OnMarkerClickListener, OnInfoWindowClickListener, OnTabChangeListener {public final static String TAG = ""INaturalistMapActivity"";private GoogleMap mMap;private Circle mCircle;private NearbyObservationsReceiver mNearbyReceiver;private ActivityHelper mHelper;private HashMap<String, JSONObject> mMarkerObservations;private INaturalistApp mApp;private ActionBar mTopActionBar;private ListView mSearchResults;private EditText mSearchText;private View mSearchBar;private View mSearchToggle;private View mSearchBarBackground;protected String mCurrentSearch;protected int mSearchType;private View mActiveFilters;private View mRestricToMap;private View mRefreshView;private View mLoading;private boolean mActiveSearch;protected Integer mTaxonId;protected String mTaxonName;private View mCancelFilters;private View mCancelRestricToMap;private TextView mActiveFiltersDescription;private String mUsername;private String mFullName;private String mLocationName;private Integer mLocationId;private String mProjectName;private Integer mProjectId;private GoogleApiClient mLocationClient;private double mMinx;private double mMaxx;private double mMiny;private double mMaxy;private float mZoom;private Intent mServiceIntent;private TabHost mTabHost;private View mSearchToggle2;private View mGridContainer;private View mMapContainer;private View mListContainer;private String mViewType;private ProgressBar mLoadingObservationsGrid;private ProgressBar mLoadingObservationsList;private TextView mObservationsGridEmpty;private TextView mObservationsListEmpty;private GridViewExtended mObservationsGrid;private ListView mObservationsList;private ObservationGridAdapter mGridAdapter;private boolean mClearMapLimit;private List<JSONObject> mObservations;private int mPage;private boolean mIsLoading;private ObservationListAdapter mListAdapter;private final static int NO_SEARCH = -1;private final static int FIND_NEAR_BY_OBSERVATIONS = 0;private final static int FIND_MY_OBSERVATIONS = 1;private final static int FIND_CRITTERS = 0;private final static int FIND_PEOPLE = 1;private final static int FIND_LOCATIONS = 2;private final static int FIND_PROJECTS = 3;private final static String VIEW_TYPE_MAP = ""map"";private final static String VIEW_TYPE_GRID = ""grid"";private final static String VIEW_TYPE_LIST = ""list"";private final static String ID_PLEASE_TAG_TEXT_COLOR = ""#85743D"";private final static String ID_PLEASE_TAG_BACKGROUND_COLOR = ""#FFEE91"";private final static String RESEARCH_TAG_TEXT_COLOR = ""#529214"";private final static String RESEARCH_TAG_BACKGROUND_COLOR = ""#DCEEA3"";private int mObservationListIndex;private int mObservationListOffset;private int mObservationGridOffset;private int mObservationGridIndex;private static final int VIEW_OBSERVATION_REQUEST_CODE = 0x100;private View mProjectInfo;private BetterJSONObject mProject;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@SuppressLint(""NewApi"")@Overridepublic void onCreate(Bundle savedInstanceState) {setTheme(R.style.NoActionBarShadowTheme);super.onCreate(savedInstanceState);setContentView(R.layout.map);onDrawerCreate(savedInstanceState);getSupportActionBar().setElevation(0);mLoadingObservationsList = (ProgressBar) findViewById(R.id.loading_observations_list);mObservationsListEmpty = (TextView) findViewById(R.id.observations_list_empty);mObservationsList = (ListView) findViewById(R.id.observations_list);mLoadingObservationsGrid = (ProgressBar) findViewById(R.id.loading_observations_grid);mObservationsGridEmpty = (TextView) findViewById(R.id.observations_grid_empty);mObservationsGrid = (GridViewExtended) findViewById(R.id.observations_grid);mObservations = new ArrayList<JSONObject>();if (savedInstanceState != null) {mCurrentSearch = savedInstanceState.getString(""mCurrentSearch"");mSearchType = savedInstanceState.getInt(""mSearchType"");mViewType = savedInstanceState.getString(""mViewType"");mClearMapLimit = savedInstanceState.getBoolean(""mClearMapLimit"");mTaxonId = (Integer) savedInstanceState.getSerializable(""mTaxonId"");mTaxonName = savedInstanceState.getString(""mTaxonName"");mUsername = savedInstanceState.getString(""mUsername"");mFullName = savedInstanceState.getString(""mFullName"");mLocationId = (Integer) savedInstanceState.getSerializable(""mLocationId"");mLocationName = savedInstanceState.getString(""mLocationName"");mProjectId = (Integer) savedInstanceState.getSerializable(""mProjectId"");mProjectName = savedInstanceState.getString(""mProjectName"");mMinx = savedInstanceState.getDouble(""minx"");mMaxx = savedInstanceState.getDouble(""maxx"");mMiny = savedInstanceState.getDouble(""miny"");mMaxy = savedInstanceState.getDouble(""maxy"");mZoom = savedInstanceState.getFloat(""zoom"");mPage = savedInstanceState.getInt(""mPage"");mIsLoading = false;try {String obsString = savedInstanceState.getString(""mObservations"");JSONArray arr = new JSONArray();if (obsString != null) arr = new JSONArray(obsString);if (mObservations == null) {mObservations = new ArrayList<JSONObject>();}mObservations.clear();for (int i = 0; i < arr.length(); i++) {mObservations.add(arr.getJSONObject(i));}} catch (JSONException e) {e.printStackTrace();}if (mViewType.equals(VIEW_TYPE_LIST)) {mObservationListIndex = savedInstanceState.getInt(""mObservationListIndex"");mObservationListOffset = savedInstanceState.getInt(""mObservationListOffset"");} else if (mViewType.equals(VIEW_TYPE_GRID)) {mObservationGridIndex = savedInstanceState.getInt(""mObservationGridIndex"");mObservationGridOffset = savedInstanceState.getInt(""mObservationGridOffset"");}mLoadingObservationsGrid.setVisibility(View.GONE);mLoadingObservationsList.setVisibility(View.GONE);if (mObservations.size() == 0) {mObservationsGridEmpty.setVisibility(View.VISIBLE);mObservationsListEmpty.setVisibility(View.VISIBLE);} else {mObservationsGridEmpty.setVisibility(View.GONE);mObservationsListEmpty.setVisibility(View.GONE);}} else {mCurrentSearch = """";mSearchType = NO_SEARCH;mTaxonId = null;mUsername = null;mLocationId = null;mProjectId = null;mViewType = VIEW_TYPE_MAP;mClearMapLimit = false;mPage = 1;mIsLoading = false;}mTopActionBar = getSupportActionBar();mTopActionBar.setDisplayShowCustomEnabled(true);mTopActionBar.setCustomView(R.layout.explore_action_bar);mSearchBar = (View)findViewById(R.id.search_bar);mSearchBarBackground = (View)findViewById(R.id.search_bar_background);mSearchBarBackground.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {mSearchToggle.performClick();}});mRefreshView = (View) mTopActionBar.getCustomView().findViewById(R.id.refresh);mRefreshView.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View arg0) {mActiveSearch = false;mPage = 1;loadObservations();}});mLoading = (View) mTopActionBar.getCustomView().findViewById(R.id.loading);mSearchToggle = (View) mTopActionBar.getCustomView().findViewById(R.id.search);mSearchToggle.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {if (mSearchBar.getVisibility() == View.GONE) {mSearchBar.setVisibility(View.VISIBLE);mSearchBarBackground.setVisibility(View.VISIBLE);} else {mSearchBar.setVisibility(View.GONE);mSearchBarBackground.setVisibility(View.GONE);mSearchText.clearFocus();InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);imm.hideSoftInputFromWindow(mSearchText.getWindowToken(), 0);mSearchText.setText("""");}}});mSearchToggle2 = (View) mTopActionBar.getCustomView().findViewById(R.id.middle_bar);mSearchToggle2.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {mSearchToggle.performClick();}});mSearchResults = (ListView)findViewById(R.id.search_results);mSearchResults.setOnItemClickListener(new OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View arg1, int index, long arg3) {mCurrentSearch = mSearchText.getText().toString().trim();mSearchType = index;mSearchToggle.performClick();mActiveSearch = true;loadObservations();}});prepareSearchResults("""");mSearchText = (EditText)findViewById(R.id.search_filter);mSearchText.addTextChangedListener(new TextWatcher() {@Overridepublic void onTextChanged(CharSequence s, int start, int before, int count) {}@Overridepublic void beforeTextChanged(CharSequence s, int start, int count, int after) {}@Overridepublic void afterTextChanged(Editable s) {prepareSearchResults(s.toString());}});mSearchText.setOnEditorActionListener(new EditText.OnEditorActionListener() {@Overridepublic boolean onEditorAction(TextView v, int actionId, KeyEvent event) {final boolean isEnterEvent = event != null&& event.getKeyCode() == KeyEvent.KEYCODE_ENTER;final boolean isEnterUpEvent = isEnterEvent && event.getAction() == KeyEvent.ACTION_UP;final boolean isEnterDownEvent = isEnterEvent && event.getAction() == KeyEvent.ACTION_DOWN;if (actionId == EditorInfo.IME_ACTION_SEARCH || isEnterUpEvent) {// Do your action heremSearchResults.performItemClick(null, 0, 0);return true;} else if (isEnterDownEvent) {// Capture this event to receive ACTION_UPreturn true;} else {// We do not care on other actionsreturn false;}}});mActiveFilters = (View)findViewById(R.id.active_filters);mActiveFiltersDescription = (TextView)findViewById(R.id.filter_name);mRestricToMap = (View)findViewById(R.id.restric_to_map);mCancelFilters = (View)findViewById(R.id.cancel_filters);mProjectInfo = (View)findViewById(R.id.project_info);mCancelRestricToMap = (View)findViewById(R.id.cancel_restrict_to_current_map);mCancelRestricToMap.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View arg0) {mClearMapLimit = true;mPage = 1;refreshActiveFilters();loadObservations();}});mProjectInfo.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {if ((mProjectId == null) || (mProject == null)) {return;}mProject.put(""joined"", INaturalistService.hasJoinedProject(INaturalistMapActivity.this, mProjectId));Intent intent = new Intent(INaturalistMapActivity.this, ProjectDetails.class);intent.putExtra(""project"", mProject);startActivity(intent);}});mCancelFilters.setOnClickListener(new OnClickListener() {public void onClick(View arg0) {// Clear out all filtersmCurrentSearch = """";mTaxonId = null;mProjectId = null;mProject = null;mUsername = null;mLocationId = null;mSearchType = FIND_NEAR_BY_OBSERVATIONS;mPage = 1;refreshActiveFilters();loadObservations();}});mTabHost = (TabHost) findViewById(R.id.tabhost);mTabHost.setup();INaturalistMapActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(VIEW_TYPE_MAP).setIndicator("""", getResources().getDrawable(R.drawable.ic_map_black_24dp)));INaturalistMapActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(VIEW_TYPE_GRID).setIndicator("""", getResources().getDrawable(R.drawable.ic_view_module_black_24dp)));INaturalistMapActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(VIEW_TYPE_LIST).setIndicator("""", getResources().getDrawable(R.drawable.ic_list_black_24dp)));mTabHost.getTabWidget().getChildAt(0).setBackgroundDrawable(getResources().getDrawable(R.drawable.inatapptheme_tab_indicator_holo));mTabHost.getTabWidget().getChildAt(1).setBackgroundDrawable(getResources().getDrawable(R.drawable.inatapptheme_tab_indicator_holo));mTabHost.getTabWidget().getChildAt(2).setBackgroundDrawable(getResources().getDrawable(R.drawable.inatapptheme_tab_indicator_holo));	mTabHost.getTabWidget().setDividerDrawable(null);mTabHost.setOnTabChangedListener(this);mGridContainer = findViewById(R.id.grid_container);mListContainer = findViewById(R.id.list_container);mMapContainer = findViewById(R.id.map_container);mObservationsList.setOnItemClickListener(new OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View view, int position, long arg3) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(INaturalistMapActivity.this, ObservationViewerActivity.class);intent.putExtra(""observation"", item.toString());intent.putExtra(""read_only"", true);startActivityForResult(intent, VIEW_OBSERVATION_REQUEST_CODE);}});mObservationsGrid.setOnItemClickListener(new OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View view, int position, long arg3) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(INaturalistMapActivity.this, ObservationViewerActivity.class);intent.putExtra(""observation"", item.toString());intent.putExtra(""read_only"", true);startActivityForResult(intent, VIEW_OBSERVATION_REQUEST_CODE);}});mObservationsList.setOnScrollListener(new OnScrollListener() {@Overridepublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {if((firstVisibleItem + visibleItemCount >= totalItemCount) && (totalItemCount > 0)) {// End has been reached - load more observationsif ((mObservations != null) && (!mIsLoading) && (mPage >= 1)) {mPage++;reloadObservations();}}}@Overridepublic void onScrollStateChanged(AbsListView view, int scrollState){ }});mObservationsGrid.setOnScrollListener(new OnScrollListener() {@Overridepublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {if((firstVisibleItem + visibleItemCount >= totalItemCount) && (totalItemCount > 0)) {// End has been reached - load more observationsif ((mObservations != null) && (!mIsLoading) && (mPage >= 1)) {mPage++;reloadObservations();}}}@Overridepublic void onScrollStateChanged(AbsListView view, int scrollState){ }});}@Overridepublic void onTabChanged(String tag) {mViewType = tag;refreshViewType();}private void refreshViewType() {if (mViewType.equals(VIEW_TYPE_MAP)) {mTabHost.setCurrentTab(0);mMapContainer.setVisibility(View.VISIBLE);mGridContainer.setVisibility(View.GONE);mListContainer.setVisibility(View.GONE);if (mClearMapLimit) {// Switched back from other view type, after the user removed the ""restrict-to-current-map-area""// filter - now we reset that filter and need to reload the observationsmClearMapLimit = false;mActiveSearch = false;mPage = 1;loadObservations();}} else if (mViewType.equals(VIEW_TYPE_GRID)) {mTabHost.setCurrentTab(1);mMapContainer.setVisibility(View.GONE);mGridContainer.setVisibility(View.VISIBLE);mListContainer.setVisibility(View.GONE);} else if (mViewType.equals(VIEW_TYPE_LIST)) {mTabHost.setCurrentTab(2);mMapContainer.setVisibility(View.GONE);mGridContainer.setVisibility(View.GONE);mListContainer.setVisibility(View.VISIBLE);}refreshActiveFilters();}// Method to add a TabHostprivate static void AddTab(INaturalistMapActivity activity, TabHost tabHost, TabHost.TabSpec tabSpec) {tabSpec.setContent(new MyTabFactory(activity));tabHost.addTab(tabSpec);}// Loads observations according to current search criteriaprivate void loadObservations() {if (mCurrentSearch.length() == 0) {switch (mSearchType) {case NO_SEARCH:mSearchType = FIND_NEAR_BY_OBSERVATIONS;String inatNetwork = mApp.getInaturalistNetworkMember();final String countryCoordinates = mApp.getStringResourceByName(""inat_country_coordinates_"" + inatNetwork);if ((countryCoordinates != null) && (countryCoordinates.length() > 0)) {// Change initial view according to the iNat network settings (e.g. show Mexico)String[] parts = countryCoordinates.split("","");mMinx = Double.valueOf(parts[1]); // swlngmMiny = Double.valueOf(parts[0]); // swlatmMaxx = Double.valueOf(parts[3]); // nelngmMaxy = Double.valueOf(parts[2]); // nelatLatLngBounds bounds = new LatLngBounds(new LatLng(mMiny, mMinx), new LatLng(mMaxy, mMaxx));mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 0));} else {getCurrentLocationAndLoadNearbyObservations();}break;case FIND_NEAR_BY_OBSERVATIONS:// Find observations near meif (mActiveSearch) {// Find out current locationgetCurrentLocationAndLoadNearbyObservations();} else {// Load near by observations according to current map coordinatesreloadObservations();}break;case FIND_MY_OBSERVATIONS:// Find my observationsif (!isLoggedIn()) {// User not logged-in - redirect to onboarding screenstartActivity(new Intent(INaturalistMapActivity.this, OnboardingActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));return;}loadMyObservations();if (mActiveSearch) {refreshActiveFilters();}break;}} else {// Find critters/people/projects/locations by nameif (mActiveSearch) {// Show search dialog for critters/people/... firstfindByName(mSearchType);} else {reloadObservations();}}}private void prepareSearchResults(String text) {String[] results;if (text.length() == 0) {results = getResources().getStringArray(R.array.explore_results_empty);} else {results = getResources().getStringArray(R.array.explore_results_with_text);for (int i = 0; i < results.length; i++) {results[i] = String.format(results[i], text);}}ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, results) {@Overridepublic View getView(int position, View convertView, ViewGroup parent) {View row;if (null == convertView) {LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);row = inflater.inflate(android.R.layout.simple_list_item_1, null);} else {row = convertView;}TextView tv = (TextView) row.findViewById(android.R.id.text1);tv.setTextColor(Color.BLACK);tv.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);tv.setText(Html.fromHtml(getItem(position)));return row;}};mSearchResults.setAdapter(adapter);}@Overridepublic void onResume() {super.onResume();mHelper = new ActivityHelper(this);if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}mNearbyReceiver = new NearbyObservationsReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_NEARBY);registerReceiver(mNearbyReceiver, filter);setUpMapIfNeeded();if (mSearchType != NO_SEARCH) {loadExistingObservations(true);refreshActiveFilters();refreshViewType();}if (mViewType.equals(VIEW_TYPE_LIST)) {mObservationsList.setSelectionFromTop(mObservationListIndex, mObservationListOffset);} else if (mViewType.equals(VIEW_TYPE_GRID)) {mObservationsGrid.setSelection(mObservationGridIndex);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {// Save away the original text, so we still have it if the activity// needs to be killed while paused.outState.putString(""mCurrentSearch"", mCurrentSearch);outState.putInt(""mSearchType"", mSearchType);outState.putString(""mViewType"", mViewType);outState.putBoolean(""mClearMapLimit"", mClearMapLimit);outState.putSerializable(""mTaxonId"", mTaxonId);outState.putString(""mTaxonName"", mTaxonName);outState.putString(""mUsername"", mUsername);outState.putString(""mFullName"", mFullName);outState.putSerializable(""mLocationId"", mLocationId);outState.putString(""mLocationName"", mLocationName);outState.putSerializable(""mProjectId"", mProjectId);outState.putSerializable(""mProject"", mProject);outState.putString(""mProjectName"", mProjectName);if (mMap != null) {VisibleRegion vr = mMap.getProjection().getVisibleRegion();outState.putDouble(""minx"", vr.farLeft.longitude);outState.putDouble(""maxx"", vr.farRight.longitude);outState.putDouble(""miny"", vr.nearLeft.latitude);outState.putDouble(""maxy"", vr.farRight.latitude);}if (mObservations != null) {JSONArray arr = new JSONArray(mObservations);outState.putString(""mObservations"", arr.toString());}outState.putInt(""mPage"", mPage);if (mViewType.equals(VIEW_TYPE_LIST)) {View firstVisibleRow = mObservationsList.getChildAt(0);if (firstVisibleRow != null && mObservationsList != null) {mObservationListOffset = firstVisibleRow.getTop() - mObservationsList.getPaddingTop();mObservationListIndex = mObservationsList.getFirstVisiblePosition();outState.putInt(""mObservationListIndex"", mObservationListIndex);outState.putInt(""mObservationListOffset"", mObservationListOffset);}} else if (mViewType.equals(VIEW_TYPE_GRID)) {View firstVisibleRow = mObservationsGrid.getChildAt(0);if (firstVisibleRow != null && mObservationsGrid != null) {mObservationGridOffset = firstVisibleRow.getTop() - mObservationsGrid.getPaddingTop();mObservationGridIndex = mObservationsGrid.getFirstVisiblePosition();outState.putInt(""mObservationGridIndex"", mObservationGridIndex);outState.putInt(""mObservationGridOffset"", mObservationGridOffset);}}super.onSaveInstanceState(outState);}private void setUpMapIfNeeded() {if (mMarkerObservations == null) {mMarkerObservations = new HashMap<String, JSONObject>();}if (mMap == null) {mMap = ((SupportMapFragment)getSupportFragmentManager().findFragmentById(R.id.map)).getMap();// Check if we were successful in obtaining the map.if (mMap != null) {// The Map is verified. It is now safe to manipulate the map.mMap.setMyLocationEnabled(true);mMap.setOnMarkerClickListener(this);mMap.setOnInfoWindowClickListener(this);mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);mMap.setOnCameraChangeListener(new OnCameraChangeListener() {@Overridepublic void onCameraChange(CameraPosition arg0) {mClearMapLimit = false;mActiveSearch = false;mPage = 1;loadObservations();}});if ((mMiny != 0) && (mMinx != 0) && (mMaxy != 0) && (mMaxx != 0)) {mMap.setOnMapLoadedCallback(new OnMapLoadedCallback() {@Overridepublic void onMapLoaded() {LatLngBounds bounds = new LatLngBounds(new LatLng(mMiny, mMinx), new LatLng(mMaxy, mMaxx));mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 0));}});} else {mMap.setOnMapLoadedCallback(new OnMapLoadedCallback() {@Overridepublic void onMapLoaded() {if (mSearchType == NO_SEARCH) {loadObservations();refreshActiveFilters();}}});}}}}private void loadMyObservations() {if (mMap == null) return;SharedPreferences preferences = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = preferences.getString(""username"", null);if (username == null) {Toast.makeText(getApplicationContext(), R.string.must_login_to_show_my_observations, Toast.LENGTH_LONG).show();return;}mUsername = username;mFullName = null;mSearchType = FIND_PEOPLE;reloadObservations();}private void addObservation(JSONObject o) throws JSONException {if (o == null) return;if ((!o.has(""private_latitude"") || o.isNull(""private_latitude"")) && (!o.has(""latitude"") || o.isNull(""latitude""))) {return;}LatLng latLng;if ((o.has(""private_latitude"") && !o.isNull(""private_latitude"")) && mApp.currentUserLogin().equalsIgnoreCase(o.getString(""user_login""))) {latLng = new LatLng(o.getDouble(""private_latitude""), o.getDouble(""private_longitude""));} else {latLng = new LatLng(o.getDouble(""latitude""), o.getDouble(""longitude""));}String iconicTaxonName = o.has(""iconic_taxon_name"") ? o.getString(""iconic_taxon_name"") : null;MarkerOptions opts = new MarkerOptions().position(latLng).icon(INaturalistMapActivity.observationIcon(iconicTaxonName));Marker m = mMap.addMarker(opts);mMarkerObservations.put(m.getId(), o);}private void showLoading() {mIsLoading = true;mRefreshView.setVisibility(View.GONE);mLoading.setVisibility(View.VISIBLE);if (mPage == 1) {// Only hide the grid/list views if this is the first observations result page being fetchedmObservationsGrid.setVisibility(View.GONE);mObservationsGridEmpty.setVisibility(View.GONE);mLoadingObservationsGrid.setVisibility(View.VISIBLE);mObservationsList.setVisibility(View.GONE);mLoadingObservationsList.setVisibility(View.VISIBLE);mObservationsListEmpty.setVisibility(View.GONE);}}private void hideLoading() {mIsLoading = false;mRefreshView.setVisibility(View.VISIBLE);mLoading.setVisibility(View.GONE);mLoadingObservationsGrid.setVisibility(View.GONE);mLoadingObservationsList.setVisibility(View.GONE);if (mPage == 1) {// Only re-show the grid/list views if this is the first observations result page being fetchedif (mObservations.size() == 0) {mObservationsGrid.setVisibility(View.GONE);mObservationsGridEmpty.setVisibility(View.VISIBLE);mObservationsList.setVisibility(View.GONE);mObservationsListEmpty.setVisibility(View.VISIBLE);} else {mObservationsGrid.setVisibility(View.VISIBLE);mObservationsGridEmpty.setVisibility(View.GONE);mObservationsList.setVisibility(View.VISIBLE);mObservationsListEmpty.setVisibility(View.GONE);}}}private void reloadObservations() {showLoading();if (mServiceIntent != null) {stopService(mServiceIntent);}mServiceIntent = new Intent(INaturalistService.ACTION_NEARBY, null, this, INaturalistService.class);/* prevent crash on devices without Google services installed */if (mMap == null) {return;}VisibleRegion vr = mMap.getProjection().getVisibleRegion();mServiceIntent.putExtra(""minx"", vr.farLeft.longitude);mServiceIntent.putExtra(""maxx"", vr.farRight.longitude);mServiceIntent.putExtra(""miny"", vr.nearLeft.latitude);mServiceIntent.putExtra(""maxy"", vr.farRight.latitude);mServiceIntent.putExtra(""zoom"", mMap.getCameraPosition().zoom);mServiceIntent.putExtra(""page"", mPage);if (mTaxonId != null) mServiceIntent.putExtra(""taxon_id"", mTaxonId.intValue());if (mUsername != null) mServiceIntent.putExtra(""username"", mUsername);if (mLocationId != null) mServiceIntent.putExtra(""location_id"", mLocationId.intValue());if (mProjectId != null) mServiceIntent.putExtra(""project_id"", mProjectId.intValue());mServiceIntent.putExtra(""clear_map_limit"", mClearMapLimit);startService(mServiceIntent);}private class NearbyObservationsReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Bundle extras = intent.getExtras();String error = extras.getString(""error"");if (error != null) {mHelper.alert(String.format(getString(R.string.couldnt_load_nearby_observations), error));return;}mMap.clear();mMarkerObservations.clear();SerializableJSONArray resultsJSON = (SerializableJSONArray) mApp.getServiceResult(INaturalistService.ACTION_NEARBY);JSONArray results = resultsJSON.getJSONArray();List<JSONObject> resultsArray = new ArrayList<JSONObject>();for (int i = 0; i < results.length(); i++) {try {JSONObject item = results.getJSONObject(i);resultsArray.add(item);} catch (JSONException e) {e.printStackTrace();}}if (mActiveSearch) {Toast.makeText(getApplicationContext(), String.format(getString(R.string.found_observations), results.length()), Toast.LENGTH_SHORT).show();mActiveSearch = false;}if (mPage == 1) {mObservations = resultsArray;loadExistingObservations(true);} else {// Append to existing observations listif (resultsArray.size() < INaturalistService.NEAR_BY_OBSERVATIONS_PER_PAGE) {// No more pages to fetchmPage = -1;} else {// Prevent duplicate observation resultsfor (int i = 0; i < resultsArray.size(); i++) {boolean found = false;JSONObject currentResult = resultsArray.get(i);for (int c = 0; c < mObservations.size(); c++) {if (mObservations.get(c).optInt(""id"", -1) == currentResult.optInt(""id"", -1)) {found = true;break;}}if (!found) {mObservations.add(currentResult);}}}loadExistingObservations(false);}hideLoading();}}private void loadExistingObservations(boolean refreshAdapters) {if ((refreshAdapters) || (mGridAdapter == null) || (mListAdapter == null)) {mGridAdapter = new ObservationGridAdapter(INaturalistMapActivity.this, mObservationsGrid.getColumnWidth(), mObservations);mObservationsGrid.setAdapter(mGridAdapter);mListAdapter = new ObservationListAdapter(INaturalistMapActivity.this, mObservations);mObservationsList.setAdapter(mListAdapter);} else {mGridAdapter.notifyDataSetChanged();mListAdapter.notifyDataSetChanged();}mMap.clear();mMarkerObservations.clear();for (int i = 0; i < mObservations.size(); i++) {JSONObject item = mObservations.get(i);try {addObservation(item);} catch (JSONException e) {e.printStackTrace();}}}@Overridepublic boolean onMarkerClick(Marker marker) {JSONObject o = mMarkerObservations.get(marker.getId());Intent intent = new Intent(this, ObservationViewerActivity.class);intent.putExtra(""observation"", o.toString());intent.putExtra(""read_only"", true);startActivityForResult(intent, VIEW_OBSERVATION_REQUEST_CODE);return false;}public static BitmapDescriptor observationIcon(String iconic_taxon_name) {if (iconic_taxon_name == null) {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_unknown);}if (iconic_taxon_name.equals(""Animalia"") ||iconic_taxon_name.equals(""Actinopterygii"") ||iconic_taxon_name.equals(""Amphibia"") ||iconic_taxon_name.equals(""Reptilia"") ||iconic_taxon_name.equals(""Aves"") ||iconic_taxon_name.equals(""Mammalia"")) {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_dodger_blue);} else if (iconic_taxon_name.equals(""Insecta"") ||iconic_taxon_name.equals(""Arachnida"") ||iconic_taxon_name.equals(""Mollusca"")) {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_orange_red);} else if (iconic_taxon_name.equals(""Protozoa"")) {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_dark_magenta);} else if (iconic_taxon_name.equals(""Plantae"")) {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_inat_green);} else if (iconic_taxon_name.equals(""Fungi"")) {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_hot_pink);} else if (iconic_taxon_name.equals(""Chromista"")) {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_chromista_brown);} else {return BitmapDescriptorFactory.fromResource(R.drawable.mm_34_unknown);}}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}public interface DialogChooserCallbacks {/** Returns an array of title, sub title, image URL for the input JSON object */String[] getItem(JSONObject object);/** When an item was selected from the list */void onItemSelected(JSONObject object);/** Whether or not should we display the image on the left as circular */boolean isImageCircular();}/** Helper class for creating a pop up dialog with a list of results and a cancel button */private class DialogChooser {private DialogChooserCallbacks mCallbacks;private String mTitle;private JSONArray mResults;private Dialog mDialog;private ListView mResultsList;private Button mCancel;private DialogChooser(int title, JSONArray results, DialogChooserCallbacks callbacks) {mCallbacks = callbacks;mTitle = getResources().getString(title);mResults = results;mDialog = new Dialog(INaturalistMapActivity.this);mDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);mDialog.setContentView(R.layout.dialog_chooser);((TextView)mDialog.findViewById(R.id.title)).setText(mTitle);mResultsList = (ListView) mDialog.findViewById(R.id.search_results);List<JSONObject> res = new ArrayList<JSONObject>(mResults.length());for (int i = 0; i < mResults.length(); i++) {try {res.add(mResults.getJSONObject(i));} catch (JSONException e) {e.printStackTrace();}}ArrayAdapter<JSONObject> adapter = new ArrayAdapter<JSONObject>(INaturalistMapActivity.this, R.layout.dialog_chooser_result_item, res) {@Overridepublic View getView(int position, View convertView, ViewGroup parent) {View row;if (null == convertView) {LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);row = inflater.inflate(R.layout.dialog_chooser_result_item, null);} else {row = convertView;}JSONObject object;try {object = mResults.getJSONObject(position);} catch (JSONException e) {e.printStackTrace();return row;}String[] values = mCallbacks.getItem(object);TextView title = (TextView) row.findViewById(R.id.title);TextView subtitle = (TextView) row.findViewById(R.id.subtitle);ImageView image = (ImageView) row.findViewById(R.id.pic);title.setText(values[0]);subtitle.setText(values[1]);UrlImageViewHelper.setUrlDrawable(image, values[2], new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Nothing to do here}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {if (mCallbacks.isImageCircular()) {// Return a circular version of the profile picturereturn ImageUtils.getCircleBitmap(loadedBitmap);} else {// Return original, unmodified imagereturn loadedBitmap;}}});return row;}};mResultsList.setAdapter(adapter);mResultsList.setOnItemClickListener(new OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View arg1, int position, long arg3) {try {mDialog.cancel();mCallbacks.onItemSelected(mResults.getJSONObject(position));} catch (JSONException e) {e.printStackTrace();}}});mCancel = (Button) mDialog.findViewById(R.id.cancel);mCancel.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View arg0) {mDialog.cancel();}});}public void show() {mDialog.show();}public void cancel() {mDialog.cancel();}}private void getPlace(final int placeId) {new Thread(new Runnable() {@Overridepublic void run() {HttpURLConnection conn = null;StringBuilder jsonResults = new StringBuilder();try {String urlString = String.format(""%s/places/%d.json"", INaturalistService.HOST, placeId);URL url = new URL(urlString.toString());conn = (HttpURLConnection) url.openConnection();InputStreamReader in = new InputStreamReader(conn.getInputStream());// Load the results into a StringBuilderint read;char[] buff = new char[1024];while ((read = in.read(buff)) != -1) {jsonResults.append(buff, 0, read);}} catch (MalformedURLException e) {Log.e(TAG, ""Error processing Places API URL"", e);return;} catch (IOException e) {Log.e(TAG, ""Error connecting to Places API"", e);return;} finally {if (conn != null) {conn.disconnect();}}try {JSONObject place = new JSONObject(jsonResults.toString());if (place != null) {if (!place.isNull(""swlat"") && !place.isNull(""swlat"") && !place.isNull(""swlat"") && !place.isNull(""swlat"")) {mMinx = Double.valueOf(place.getString(""swlng""));mMaxx = Double.valueOf(place.getString(""nelng""));mMiny = Double.valueOf(place.getString(""swlat""));mMaxy = Double.valueOf(place.getString(""nelat""));final LatLngBounds bounds = new LatLngBounds(new LatLng(mMiny, mMinx), new LatLng(mMaxy, mMaxx));runOnUiThread(new Runnable() {@Overridepublic void run() {mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 0));}});}}} catch (JSONException e) {Log.e(TAG, ""Cannot process JSON result"", e);}return;}}).start();}private JSONArray find(String type, String search) {HttpURLConnection conn = null;StringBuilder jsonResults = new StringBuilder();try {StringBuilder sb = new StringBuilder(INaturalistService.HOST + ""/"" + type + ""/search.json?per_page=25&q="");sb.append(URLEncoder.encode(search, ""utf8""));URL url = new URL(sb.toString());conn = (HttpURLConnection) url.openConnection();InputStreamReader in = new InputStreamReader(conn.getInputStream());// Load the results into a StringBuilderint read;char[] buff = new char[1024];while ((read = in.read(buff)) != -1) {jsonResults.append(buff, 0, read);}} catch (MalformedURLException e) {Log.e(TAG, ""Error processing Places API URL"", e);return null;} catch (IOException e) {Log.e(TAG, ""Error connecting to Places API"", e);return null;} finally {if (conn != null) {conn.disconnect();}}try {JSONArray predsJsonArray = new JSONArray(jsonResults.toString());return predsJsonArray;} catch (JSONException e) {Log.e(TAG, ""Cannot process JSON results"", e);}return null;}private void findByName(final int type) {int loading = 0;final int noResults;final String typeName;switch (type) {case FIND_CRITTERS:loading = R.string.searching_for_critters;noResults = R.string.no_critters_found;typeName = ""taxa"";break;case FIND_PEOPLE:loading = R.string.searching_for_people;noResults = R.string.no_person_found;typeName = ""people"";break;case FIND_LOCATIONS:loading = R.string.searching_for_places;noResults = R.string.no_place_found;typeName = ""places"";break;case FIND_PROJECTS:loading = R.string.searching_for_projects;noResults = R.string.no_project_found;typeName = ""projects"";break;default:noResults = 0;typeName = """";}mHelper.loading(getResources().getString(loading));new Thread(new Runnable() {@Overridepublic void run() {final JSONArray results = find(typeName, mCurrentSearch);mHelper.stopLoading();if ((results == null) || (results.length() == 0)) {runOnUiThread(new Runnable() {@Overridepublic void run() {mHelper.alert(getResources().getString(noResults));}});return;} else {runOnUiThread(new Runnable() {@Overridepublic void run() {showChooserDialog(type, results);}});}}}).start();}private void showChooserDialog(final int type, JSONArray results) {int title = 0;switch (type) {case FIND_CRITTERS:title = R.string.which_critter;break;case FIND_PEOPLE:title = R.string.which_person;break;case FIND_LOCATIONS:title = R.string.which_place;break;case FIND_PROJECTS:title = R.string.which_project;break;}DialogChooser chooser = new DialogChooser(title, results, new DialogChooserCallbacks() {@Overridepublic void onItemSelected(JSONObject item) {try {switch (type) {case FIND_CRITTERS:mTaxonId = item.getInt(""id"");String taxonName = item.getString(""name"");String idName = getTaxonName(item);if (idName == null) idName = getResources().getString(R.string.unknown);mTaxonName = String.format(""%s (%s)"", idName, taxonName);break;case FIND_PEOPLE:mUsername = item.getString(""login"");mFullName = (!item.has(""name"") || item.isNull(""name"")) ? null : item.getString(""name"");break;case FIND_LOCATIONS:mLocationName = item.getString(""display_name"");mLocationId = item.getInt(""id"");if (!item.isNull(""latitude"") && !item.isNull(""longitude"")) {if (!item.isNull(""swlat"") && !item.isNull(""swlat"") && !item.isNull(""swlat"") && !item.isNull(""swlat"")) {mMinx = Double.valueOf(item.getString(""swlng""));mMaxx = Double.valueOf(item.getString(""nelng""));mMiny = Double.valueOf(item.getString(""swlat""));mMaxy = Double.valueOf(item.getString(""nelat""));LatLngBounds bounds = new LatLngBounds(new LatLng(mMiny, mMinx), new LatLng(mMaxy, mMaxx));mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 0));}}break;case FIND_PROJECTS:mProjectName = item.getString(""title"");mProjectId = item.getInt(""id"");mProject = new BetterJSONObject(item);if (!item.isNull(""place_id"")) {// Project has a place associated to it - get its coordinatesint placeId = item.getInt(""place_id"");getPlace(placeId);}break;}reloadObservations();refreshActiveFilters();} catch (JSONException e) {e.printStackTrace();}}@Overridepublic boolean isImageCircular() {switch (type) {case FIND_PEOPLE:return true; // Return a circular image for userscase FIND_CRITTERS:case FIND_LOCATIONS:case FIND_PROJECTS:default:return false;}}@Overridepublic String[] getItem(JSONObject item) {try {switch (type) {case FIND_CRITTERS:String displayName = getTaxonName(item);if (displayName == null) displayName = getResources().getString(R.string.unknown);return new String[] {displayName,item.getString(""name""),item.getString(""image_url"")};case FIND_PEOPLE:String title;String subtitle;if ((!item.has(""name"")) || (item.isNull(""name"")) || (item.getString(""name"").length() == 0)) {title = item.getString(""login"");subtitle = """";} else {title = item.getString(""name"");subtitle = item.getString(""login"");}String url;if (!item.isNull(""icon_url"")) {url = item.getString(""icon_url"");} else {url = ""http://www.inaturalist.org/attachment_defaults/users/icons/defaults/thumb.png"";}return new String[] {title,subtitle,url};case FIND_LOCATIONS:return new String[] {item.getString(""display_name""),item.isNull(""place_type_name"") ? """" : item.getString(""place_type_name""),null};case FIND_PROJECTS:return new String[] {item.getString(""title""),String.format(getResources().getString(R.string.observed_taxa), item.getInt(""observed_taxa_count"")),item.getString(""icon_url"")};}} catch (JSONException e) {e.printStackTrace();}return new String[] { """", """", """" };}});chooser.show();}// Refreshes the active filters barprivate void refreshActiveFilters() {String filterText = """";if (mTaxonId != null) {filterText = String.format(getResources().getString(R.string.named), mTaxonName);}if (mUsername != null) {if (filterText.length() > 0) filterText += "" "" + getResources().getString(R.string.and) + "" "";filterText += String.format(getResources().getString(R.string.seen_by), ((mFullName != null) && (mFullName.length() > 0) ? mFullName : mUsername));}if (mLocationId != null) {if (filterText.length() > 0) filterText += "" "" + getResources().getString(R.string.and) + "" "";filterText += String.format(getResources().getString(R.string.seen_at), mLocationName);}if (mProjectId != null) {if (filterText.length() > 0) filterText += "" "" + getResources().getString(R.string.and) + "" "";filterText += String.format(getResources().getString(R.string.in_project), mProjectName);}if (filterText.length() > 0) {filterText = Character.toUpperCase(filterText.charAt(0)) + filterText.substring(1); // Upper case first lettermActiveFiltersDescription.setText(filterText);mActiveFilters.setVisibility(View.VISIBLE);if (mProjectId != null) {mProjectInfo.setVisibility(View.VISIBLE);} else {mProjectInfo.setVisibility(View.GONE);}} else {mActiveFilters.setVisibility(View.GONE);}if (mViewType.equals(VIEW_TYPE_MAP)) {mRestricToMap.setVisibility(View.GONE);} else {mRestricToMap.setVisibility(mClearMapLimit ? View.GONE : View.VISIBLE);}}private String getTaxonName(JSONObject item) {JSONObject defaultName;String displayName = null;// Get the taxon display name according to device localeNotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = getResources().getConfiguration().locale;String deviceLexicon =   deviceLocale.getLanguage();try {JSONArray taxonNames = item.getJSONArray(""taxon_names"");for (int i = 0; i < taxonNames.length(); i++) {JSONObject taxonName = taxonNames.getJSONObject(i);String lexicon = taxonName.getString(""lexicon"");if (lexicon.equals(deviceLexicon)) {// Found the appropriate lexicon for the taxondisplayName = taxonName.getString(""name"");break;}}} catch (JSONException e3) {//e3.printStackTrace();}if (displayName == null) {// Couldn't extract the display name from the taxon names list - use the default onetry {displayName = item.getString(""unique_name"");} catch (JSONException e2) {displayName = null;}try {defaultName = item.getJSONObject(""default_name"");displayName = defaultName.getString(""name"");} catch (JSONException e1) {// alasJSONObject commonName = item.optJSONObject(""common_name"");if (commonName != null) {displayName = commonName.optString(""name"");} else {displayName = item.optString(""name"");}}}return displayName;}private void getCurrentLocationAndLoadNearbyObservations() {int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getApplicationContext());// If Google Play services is availableif ((ConnectionResult.SUCCESS == resultCode) && ((mLocationClient == null) || (!mLocationClient.isConnected())))  {// Use Google Location Services to determine locationmLocationClient = new GoogleApiClient.Builder(this).addApi(LocationServices.API).addConnectionCallbacks(new ConnectionCallbacks() {@Overridepublic void onConnected(Bundle bundle) {loadNearbyObservations();}@Overridepublic void onConnectionSuspended(int i) {}}).addOnConnectionFailedListener(new OnConnectionFailedListener() {@Overridepublic void onConnectionFailed(ConnectionResult connectionResult) {// Couldn't connect to client - load by GPSloadNearbyObservations();}}).build();mLocationClient.connect();} else {// Use GPS for the locationloadNearbyObservations();}}private void loadNearbyObservations() {Location currentLocation = getLastLocation();if (currentLocation != null) {double latitude = currentLocation.getLatitude();double longitude = currentLocation.getLongitude();final LatLng latLng = new LatLng(latitude, longitude);CameraPosition camPos = new CameraPosition.Builder().target(latLng).zoom(13).build();CameraUpdate camUpdate = CameraUpdateFactory.newCameraPosition(camPos);mMap.moveCamera(camUpdate);}reloadObservations();}private Location getLastLocation() {Location location = null;if ((mLocationClient != null) && (mLocationClient.isConnected())) {// Use location client for the latest locationtry {location = LocationServices.FusedLocationApi.getLastLocation(mLocationClient);} catch (IllegalStateException ex) {ex.printStackTrace();}}if (location == null) {// Use GPS for current locationLocationManager locationManager = (LocationManager)mApp.getSystemService(Context.LOCATION_SERVICE);Criteria criteria = new Criteria();String provider = locationManager.getBestProvider(criteria, false);location = locationManager.getLastKnownLocation(provider);}return location;}private class ObservationListAdapter extends ArrayAdapter<JSONObject> {private List<JSONObject> mItems;private Context mContext;private ArrayList<JSONObject> mOriginalItems;public ObservationListAdapter(Context context, List<JSONObject> objects) {super(context, R.layout.explore_list_item, objects);mItems = objects;mOriginalItems = new ArrayList<JSONObject>(mItems);mContext = context;}public void addItemAtBeginning(JSONObject newItem) {mItems.add(0, newItem);}@Overridepublic int getCount() {return mItems.size();}@Overridepublic JSONObject getItem(int index) {return mItems.get(index);}@SuppressLint(""NewApi"")@Overridepublic View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);final View view = inflater.inflate(R.layout.explore_list_item, parent, false);final JSONObject item = mItems.get(position);TextView username = (TextView) view.findViewById(R.id.username);username.setText(item.optString(""user_login""));OnClickListener showUser = new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(mContext, UserProfile.class);try {intent.putExtra(""user"", new BetterJSONObject(item.getJSONObject(""user"")));mContext.startActivity(intent);} catch (JSONException e) {e.printStackTrace();}}};username.setOnClickListener(showUser);TextView idName = (TextView) view.findViewById(R.id.id_name);TextView taxonName = (TextView) view.findViewById(R.id.id_taxon_name);idName.setTextColor(mHelper.observationColor(new Observation(new BetterJSONObject(item))));final JSONObject taxon = item.optJSONObject(""taxon"");if (taxon != null) {String idNameString = getTaxonName(taxon);if (idNameString != null) {idName.setText(idNameString);taxonName.setText(taxon.optString(""name"", """"));} else {idName.setText(taxon.optString(""name"", getResources().getString(R.string.unknown)));taxonName.setText("""");idName.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.ITALIC));}String rank = (taxon.isNull(""rank"") ? null : taxon.optString(""rank"", null));if (rank != null) {if ((rank.equalsIgnoreCase(""genus"")) || (rank.equalsIgnoreCase(""species""))) {taxonName.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.ITALIC));}}} else {String idNameStr = item.isNull(""species_guess"") ?getResources().getString(R.string.unknown) :item.optString(""species_guess"", getResources().getString(R.string.unknown));idName.setText(idNameStr);taxonName.setText("""");}ImageView taxonPic = (ImageView) view.findViewById(R.id.image);JSONArray observationPhotos;try {observationPhotos = item.getJSONArray(""observation_photos"");} catch (JSONException e1) {e1.printStackTrace();observationPhotos = new JSONArray();}if (observationPhotos.length() > 0) {JSONObject observationPhoto;try {observationPhoto = observationPhotos.getJSONObject(0);JSONObject innerPhoto = observationPhoto.optJSONObject(""photo"");String url = (innerPhoto.isNull(""small_url"") ? innerPhoto.optString(""original_url"") : innerPhoto.optString(""small_url""));UrlImageViewHelper.setUrlDrawable(taxonPic, url, ObservationPhotosViewer.observationIcon(item));} catch (JSONException e) {e.printStackTrace();} catch (Exception e) {// Could happen if user scrolls really fast and there a LOT of thumbnails being downloaded at once (too many threads at once)e.printStackTrace();}}TextView observedOnDate = (TextView) view.findViewById(R.id.observed_on);BetterJSONObject json = new BetterJSONObject(item);Timestamp observedOn = json.getTimestamp(""time_observed_at"");if (observedOn != null) {observedOnDate.setText(mApp.formatDate(observedOn));} else {if (!item.isNull(""observed_on"")) {observedOnDate.setText(item.optString(""observed_on"", """"));} else {observedOnDate.setText("""");}}TextView tag = (TextView) view.findViewById(R.id.tag);String qualityGrade = item.isNull(""quality_grade"") ? """" : item.optString(""quality_grade"", """");if (item.optBoolean(""id_please"", false)) {tag.setText(R.string.id_please_tag);tag.setTextColor(Color.parseColor(ID_PLEASE_TAG_TEXT_COLOR));tag.setBackgroundColor(Color.parseColor(ID_PLEASE_TAG_BACKGROUND_COLOR));tag.setVisibility(View.VISIBLE);} else if (qualityGrade.equals(""research"")) {tag.setText(R.string.research_tag);tag.setTextColor(Color.parseColor(RESEARCH_TAG_TEXT_COLOR));tag.setBackgroundColor(Color.parseColor(RESEARCH_TAG_BACKGROUND_COLOR));tag.setVisibility(View.VISIBLE);} else {tag.setVisibility(View.INVISIBLE);}view.setTag(item);return view;}}@Overridepublic void onInfoWindowClick(Marker arg0) {// TODO Auto-generated method stub}private boolean isLoggedIn() {SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);return prefs.getString(""username"", null) != null;}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if (requestCode == VIEW_OBSERVATION_REQUEST_CODE) {if (resultCode == ObservationViewerActivity.RESULT_FLAGGED_AS_CAPTIVE) {// Refresh the results (since the user flagged the result as captive)loadObservations();return;}}}}",INaturalistMapActivity.java,0
200,"package org.inaturalist.android;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.res.Configuration;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.Point;import android.graphics.Typeface;import android.os.Build;import android.os.Bundle;import android.support.design.widget.AppBarLayout;import android.support.design.widget.CollapsingToolbarLayout;import android.support.design.widget.TabLayout;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewCompat;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.animation.AlphaAnimation;import android.widget.AdapterView;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;import java.text.DecimalFormat;import java.util.ArrayList;public class ProjectDetails extends AppCompatActivity implements AppBarLayout.OnOffsetChangedListener {private final static String VIEW_TYPE_OBSERVATIONS = ""observations"";private final static String VIEW_TYPE_SPECIES = ""species"";private final static String VIEW_TYPE_OBSERVERS = ""observers"";private final static String VIEW_TYPE_IDENTIFIERS = ""identifiers"";public static final int RESULT_REFRESH_RESULTS = 0x1000;private Button mJoinLeaveProject;private String mViewType;private INaturalistApp mApp;private BetterJSONObject mProject;private ActivityHelper mHelper;private Button mAboutProject;private Button mProjectNews;private GridViewExtended mObservationsGrid;private ObservationGridAdapter mGridAdapter;private ProgressBar mLoadingObservationsGrid;private TextView mObservationsGridEmpty;private ListView mSpeciesList;private TaxonAdapter mSpeciesListAdapter;private ProgressBar mLoadingSpeciesList;private TextView mSpeciesListEmpty;private ListView mPeopleList;private ProjectUserAdapter mPeopleListAdapter;private ProgressBar mLoadingPeopleList;private ViewGroup mPeopleListHeader;private TextView mPeopleListEmpty;private ListView mIdentifiersList;private ProjectUserAdapter mIdentifiersListAdapter;private ProgressBar mLoadingIdentifiersList;private ViewGroup mIdentifiersListHeader;private TextView mIdentifiersListEmpty;private ArrayList<JSONObject> mObservations;private ArrayList<JSONObject> mSpecies;private ArrayList<JSONObject> mObservers;private ArrayList<JSONObject> mIdentifiers;private ProjectDetailsReceiver mProjectDetailsReceiver;private int mTotalObservations;private int mTotalSpecies;private int mTotalObervers;private int mTotalIdentifiers;private AppBarLayout mAppBarLayout;private boolean mProjectPicHidden;private ViewGroup mProjectPicContainer;private TabLayout mTabLayout;private ViewPager mViewPager;private boolean mJoinedOrLeftProject = false;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:this.onBackPressed();return true;}return super.onOptionsItemSelected(item);}@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mHelper = new ActivityHelper(this);final Intent intent = getIntent();setContentView(R.layout.project_details);Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true);CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);mAppBarLayout = (AppBarLayout) findViewById(R.id.project_top_bar);mAppBarLayout.addOnOffsetChangedListener(this);if (mApp == null) {mApp = (INaturalistApp)getApplicationContext();}if (savedInstanceState == null) {mProject = (BetterJSONObject) intent.getSerializableExtra(""project"");mViewType = VIEW_TYPE_OBSERVATIONS;getProjectDetails(INaturalistService.ACTION_GET_PROJECT_OBSERVATIONS);getProjectDetails(INaturalistService.ACTION_GET_PROJECT_SPECIES);getProjectDetails(INaturalistService.ACTION_GET_PROJECT_OBSERVERS);getProjectDetails(INaturalistService.ACTION_GET_PROJECT_IDENTIFIERS);} else {mProject = (BetterJSONObject) savedInstanceState.getSerializable(""project"");mViewType = savedInstanceState.getString(""mViewType"");mObservations = loadListFromBundle(savedInstanceState, ""mObservations"");mSpecies = loadListFromBundle(savedInstanceState, ""mSpecies"");mObservers = loadListFromBundle(savedInstanceState, ""mObservers"");mIdentifiers = loadListFromBundle(savedInstanceState, ""mIdentifiers"");mTotalIdentifiers = savedInstanceState.getInt(""mTotalIdentifiers"");mTotalObervers = savedInstanceState.getInt(""mTotalObervers"");mTotalObservations = savedInstanceState.getInt(""mTotalObservations"");mTotalSpecies = savedInstanceState.getInt(""mTotalSpecies"");mJoinedOrLeftProject = savedInstanceState.getBoolean(""mJoinedOrLeftProject"");}// Tab InitializationinitializeTabs();mJoinLeaveProject = (Button) findViewById(R.id.join_leave_project);mAboutProject = (Button) findViewById(R.id.about_project);mProjectNews = (Button) findViewById(R.id.project_news);if (mProject == null) {finish();return;}mProjectNews.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(ProjectDetails.this, ProjectNews.class);intent.putExtra(""project"", mProject);startActivity(intent);}});mAboutProject.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(ProjectDetails.this, ProjectDetailsAbout.class);intent.putExtra(ProjectDetailsAbout.KEY_PROJECT, mProject);startActivity(intent);}});mProjectPicContainer = (ViewGroup) findViewById(R.id.project_pic_container);final ImageView projectPic = (ImageView) findViewById(R.id.project_pic);String iconUrl = mProject.getString(""icon_url"");if ((iconUrl != null) && (iconUrl.length() > 0)) {projectPic.setVisibility(View.VISIBLE);findViewById(R.id.project_pic_none).setVisibility(View.GONE);UrlImageViewHelper.setUrlDrawable(projectPic, iconUrl);UrlImageViewHelper.setUrlDrawable((ImageView) findViewById(R.id.project_bg), iconUrl + ""?bg=1"", new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {imageView.setImageBitmap(ImageUtils.blur(ProjectDetails.this, ImageUtils.centerCropBitmap(loadedBitmap.copy(loadedBitmap.getConfig(), true))));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});} else {projectPic.setVisibility(View.GONE);findViewById(R.id.project_pic_none).setVisibility(View.VISIBLE);}collapsingToolbar.setTitle(mProject.getString(""title""));Boolean isJoined = mProject.getBoolean(""joined"");if ((isJoined != null) && (isJoined == true)) {mJoinLeaveProject.setText(R.string.leave);} else {mJoinLeaveProject.setText(R.string.join);}mJoinLeaveProject.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {mJoinedOrLeftProject = true;Boolean isJoined = mProject.getBoolean(""joined"");if ((isJoined != null) && (isJoined == true)) {mHelper.confirm(getString(R.string.leave_project), getString(R.string.leave_project_confirmation),new DialogInterface.OnClickListener() {public void onClick(DialogInterface dialog, int buttonId) {// Leave the projectmJoinLeaveProject.setText(R.string.join);mProject.put(""joined"", false);Intent serviceIntent = new Intent(INaturalistService.ACTION_LEAVE_PROJECT, null, ProjectDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.PROJECT_ID, mProject.getInt(""id""));startService(serviceIntent);}}, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {dialogInterface.cancel();}}, R.string.yes, R.string.no);} else {String terms = mProject.getString(""terms"");if ((terms != null) && (terms.length() > 0)) {mHelper.confirm(getString(R.string.do_you_agree_to_the_following), mProject.getString(""terms""), new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {joinProject();}}, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {}}, R.string.yes, R.string.no);} else {joinProject();}}}});}private void saveListToBundle(Bundle outState, ArrayList<JSONObject> list, String key) {if (list != null) {JSONArray arr = new JSONArray(list);outState.putString(key, arr.toString());}}private ArrayList<JSONObject> loadListFromBundle(Bundle savedInstanceState, String key) {ArrayList<JSONObject> results = new ArrayList<JSONObject>();String obsString = savedInstanceState.getString(key);if (obsString != null) {try {JSONArray arr = new JSONArray(obsString);for (int i = 0; i < arr.length(); i++) {results.add(arr.getJSONObject(i));}return results;} catch (JSONException exc) {exc.printStackTrace();return null;}} else {return null;}}private void joinProject() {if (!isLoggedIn()) {// User not logged-in - redirect to onboarding screenstartActivity(new Intent(ProjectDetails.this, OnboardingActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));return;}mJoinLeaveProject.setText(R.string.leave);mProject.put(""joined"", true);Intent serviceIntent = new Intent(INaturalistService.ACTION_JOIN_PROJECT, null, ProjectDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.PROJECT_ID, mProject.getInt(""id""));startService(serviceIntent);}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(""project"", mProject);outState.putString(""mViewType"", mViewType);saveListToBundle(outState, mObservations, ""mObservations"");saveListToBundle(outState, mSpecies, ""mSpecies"");saveListToBundle(outState, mObservers, ""mObservers"");saveListToBundle(outState, mIdentifiers, ""mIdentifiers"");outState.putInt(""mTotalIdentifiers"", mTotalIdentifiers);outState.putInt(""mTotalObervers"", mTotalObervers);outState.putInt(""mTotalObservations"", mTotalObservations);outState.putInt(""mTotalSpecies"", mTotalSpecies);outState.putBoolean(""mJoinedOrLeftProject"", mJoinedOrLeftProject);super.onSaveInstanceState(outState);}@Overrideprotected void onPause() {super.onPause();}@Overrideprotected void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}mProjectDetailsReceiver = new ProjectDetailsReceiver();IntentFilter filter = new IntentFilter();filter.addAction(INaturalistService.ACTION_PROJECT_SPECIES_RESULT);filter.addAction(INaturalistService.ACTION_PROJECT_IDENTIFIERS_RESULT);filter.addAction(INaturalistService.ACTION_PROJECT_OBSERVATIONS_RESULT);filter.addAction(INaturalistService.ACTION_PROJECT_OBSERVERS_RESULT);registerReceiver(mProjectDetailsReceiver, filter);}@Overridepublic void onBackPressed() {Intent intent = new Intent();Bundle bundle = new Bundle();bundle.putSerializable(""project"", mProject);intent.putExtras(bundle);setResult(mJoinedOrLeftProject ? RESULT_REFRESH_RESULTS : RESULT_OK, intent);super.onBackPressed();}// Method to add a TabHostprivate void addTab(int position, View tabContent) {TabLayout.Tab tab = mTabLayout.getTabAt(position);tab.setCustomView(tabContent);}// Tabs Creationprivate void initializeTabs() {mTabLayout = (TabLayout) findViewById(R.id.tabs);mViewPager = (ViewPager) findViewById(R.id.view_pager);mViewPager.setOffscreenPageLimit(3); // So we wouldn't have to recreate the views every timeProjectDetailsPageAdapter adapter = new ProjectDetailsPageAdapter(this);mViewPager.setAdapter(adapter);mTabLayout.setupWithViewPager(mViewPager);addTab(0, createTabContent(getString(R.string.project_observations), 1000));addTab(1, createTabContent(getString(R.string.project_species), 2000));addTab(2, createTabContent(getString(R.string.project_people), 3000));addTab(3, createTabContent(getString(R.string.project_identifiers), 4000));TabLayout.OnTabSelectedListener tabListener = new TabLayout.OnTabSelectedListener() {@Overridepublic void onTabSelected(TabLayout.Tab tab) {TextView tabNameText = (TextView) tab.getCustomView().findViewById(R.id.tab_name);tabNameText.setTypeface(null, Typeface.BOLD);tabNameText.setTextColor(Color.parseColor(""#000000""));mViewPager.setCurrentItem(tab.getPosition());}@Overridepublic void onTabUnselected(TabLayout.Tab tab) {View tabView = tab.getCustomView();TextView tabNameText = (TextView) tabView.findViewById(R.id.tab_name);tabNameText.setTypeface(null, Typeface.NORMAL);tabNameText.setTextColor(Color.parseColor(""#ACACAC""));}@Overridepublic void onTabReselected(TabLayout.Tab tab) {}};mTabLayout.setOnTabSelectedListener(tabListener);ViewPager.OnPageChangeListener pageListener = new ViewPager.OnPageChangeListener() {@Overridepublic void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {}@Overridepublic void onPageSelected(int position) {switch (position) {case 3:mViewType = VIEW_TYPE_IDENTIFIERS;break;case 2:mViewType = VIEW_TYPE_OBSERVERS;break;case 1:mViewType = VIEW_TYPE_SPECIES;break;case 0:default:mViewType = VIEW_TYPE_OBSERVATIONS;break;}}@Overridepublic void onPageScrollStateChanged(int state) {}};mViewPager.addOnPageChangeListener(pageListener);if (mViewType.equals(VIEW_TYPE_OBSERVATIONS)) {tabListener.onTabSelected(mTabLayout.getTabAt(0));} else if (mViewType.equals(VIEW_TYPE_SPECIES)) {tabListener.onTabSelected(mTabLayout.getTabAt(1));} else if (mViewType.equals(VIEW_TYPE_OBSERVERS)) {tabListener.onTabSelected(mTabLayout.getTabAt(2));} else if (mViewType.equals(VIEW_TYPE_IDENTIFIERS)) {tabListener.onTabSelected(mTabLayout.getTabAt(3));}if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {mTabLayout.setTabMode(TabLayout.MODE_FIXED);} else {mTabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);}}private View createTabContent(String tabName, int count) {ViewGroup view = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.project_details_tab, null);TextView countText = (TextView) view.findViewById(R.id.count);TextView tabNameText = (TextView) view.findViewById(R.id.tab_name);DecimalFormat formatter = new DecimalFormat(""#,###,###"");countText.setText(formatter.format(count));tabNameText.setText(tabName);int width;if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {Point size = new Point();getWindowManager().getDefaultDisplay().getSize(size);width = size.x;} else {width = getWindowManager().getDefaultDisplay().getWidth();}width = (int)(width * 0.283);LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(width, ViewGroup.LayoutParams.WRAP_CONTENT);view.setLayoutParams(params);return view;}private boolean isLoggedIn() {SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);return prefs.getString(""username"", null) != null;}private void getProjectDetails(String action) {Intent serviceIntent = new Intent(action, null, this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.PROJECT_ID, mProject.getInt(""id""));startService(serviceIntent);}private class ProjectDetailsReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Bundle extras = intent.getExtras();String error = extras.getString(""error"");if (error != null) {mHelper.alert(String.format(getString(R.string.couldnt_load_project_details), error));return;}boolean isSharedOnApp = intent.getBooleanExtra(INaturalistService.IS_SHARED_ON_APP, false);BetterJSONObject resultsObject;SerializableJSONArray resultsJSON;if (isSharedOnApp) {resultsObject = (BetterJSONObject) mApp.getServiceResult(intent.getAction());} else {resultsObject = (BetterJSONObject) intent.getSerializableExtra(INaturalistService.RESULTS);}JSONArray results = null;int totalResults = 0;if (resultsObject != null) {resultsJSON = resultsObject.getJSONArray(""results"");Integer count = resultsObject.getInt(""total_results"");if (count != null) {totalResults = count;results = resultsJSON.getJSONArray();}}if (results == null) {refreshViewState();return;}ArrayList<JSONObject> resultsArray = new ArrayList<JSONObject>();for (int i = 0; i < results.length(); i++) {try {JSONObject item = results.getJSONObject(i);resultsArray.add(item);} catch (JSONException e) {e.printStackTrace();}}if (intent.getAction().equals(INaturalistService.ACTION_PROJECT_OBSERVATIONS_RESULT)) {mObservations = resultsArray;mTotalObservations = totalResults;} else if (intent.getAction().equals(INaturalistService.ACTION_PROJECT_SPECIES_RESULT)) {mSpecies = resultsArray;mTotalSpecies = totalResults;} else if (intent.getAction().equals(INaturalistService.ACTION_PROJECT_OBSERVERS_RESULT)) {mObservers = resultsArray;mTotalObervers = totalResults;} else if (intent.getAction().equals(INaturalistService.ACTION_PROJECT_IDENTIFIERS_RESULT)) {mIdentifiers = resultsArray;mTotalIdentifiers = totalResults;}refreshViewState();}}private void refreshViewState() {DecimalFormat formatter = new DecimalFormat(""#,###,###"");if (mLoadingObservationsGrid != null) {if (mObservations == null) {((TextView) mTabLayout.getTabAt(0).getCustomView().findViewById(R.id.count)).setVisibility(View.GONE);((ProgressBar) mTabLayout.getTabAt(0).getCustomView().findViewById(R.id.loading)).setVisibility(View.VISIBLE);mLoadingObservationsGrid.setVisibility(View.VISIBLE);mObservationsGrid.setVisibility(View.GONE);mObservationsGridEmpty.setVisibility(View.GONE);} else {((TextView) mTabLayout.getTabAt(0).getCustomView().findViewById(R.id.count)).setVisibility(View.VISIBLE);((ProgressBar) mTabLayout.getTabAt(0).getCustomView().findViewById(R.id.loading)).setVisibility(View.GONE);((TextView) mTabLayout.getTabAt(0).getCustomView().findViewById(R.id.count)).setText(formatter.format(mTotalObservations));mLoadingObservationsGrid.setVisibility(View.GONE);if (mObservations.size() == 0) {mObservationsGridEmpty.setVisibility(View.VISIBLE);} else {mObservationsGridEmpty.setVisibility(View.GONE);}mObservationsGrid.post(new Runnable() {@Overridepublic void run() {if (mObservationsGrid.getColumnWidth() > 0) {mGridAdapter = new ObservationGridAdapter(ProjectDetails.this, mObservationsGrid.getColumnWidth(), mObservations);mObservationsGrid.setAdapter(mGridAdapter);}}});mObservationsGrid.setVisibility(View.VISIBLE);}}if (mLoadingSpeciesList != null) {if (mSpecies == null) {((TextView) mTabLayout.getTabAt(1).getCustomView().findViewById(R.id.count)).setVisibility(View.GONE);((ProgressBar) mTabLayout.getTabAt(1).getCustomView().findViewById(R.id.loading)).setVisibility(View.VISIBLE);mLoadingSpeciesList.setVisibility(View.VISIBLE);mSpeciesListEmpty.setVisibility(View.GONE);mSpeciesList.setVisibility(View.GONE);} else {((TextView) mTabLayout.getTabAt(1).getCustomView().findViewById(R.id.count)).setVisibility(View.VISIBLE);((ProgressBar) mTabLayout.getTabAt(1).getCustomView().findViewById(R.id.loading)).setVisibility(View.GONE);((TextView) mTabLayout.getTabAt(1).getCustomView().findViewById(R.id.count)).setText(formatter.format(mTotalSpecies));mLoadingSpeciesList.setVisibility(View.GONE);if (mSpecies.size() == 0) {mSpeciesListEmpty.setVisibility(View.VISIBLE);} else {mSpeciesListEmpty.setVisibility(View.GONE);}mSpeciesListAdapter = new TaxonAdapter(ProjectDetails.this, mSpecies);mSpeciesList.setAdapter(mSpeciesListAdapter);mSpeciesList.setVisibility(View.VISIBLE);}}if (mLoadingPeopleList != null) {if (mObservers == null) {((TextView) mTabLayout.getTabAt(2).getCustomView().findViewById(R.id.count)).setVisibility(View.GONE);((ProgressBar) mTabLayout.getTabAt(2).getCustomView().findViewById(R.id.loading)).setVisibility(View.VISIBLE);mLoadingPeopleList.setVisibility(View.VISIBLE);mPeopleListEmpty.setVisibility(View.GONE);mPeopleList.setVisibility(View.GONE);mPeopleListHeader.setVisibility(View.GONE);} else {((TextView) mTabLayout.getTabAt(2).getCustomView().findViewById(R.id.count)).setVisibility(View.VISIBLE);((ProgressBar) mTabLayout.getTabAt(2).getCustomView().findViewById(R.id.loading)).setVisibility(View.GONE);((TextView) mTabLayout.getTabAt(2).getCustomView().findViewById(R.id.count)).setText(formatter.format(mTotalObervers));mLoadingPeopleList.setVisibility(View.GONE);if (mObservers.size() == 0) {mPeopleListEmpty.setVisibility(View.VISIBLE);} else {mPeopleListEmpty.setVisibility(View.GONE);}mPeopleListAdapter = new ProjectUserAdapter(ProjectDetails.this, mObservers);mPeopleList.setAdapter(mPeopleListAdapter);mPeopleList.setVisibility(View.VISIBLE);mPeopleListHeader.setVisibility(View.VISIBLE);mPeopleList.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(ProjectDetails.this, UserProfile.class);intent.putExtra(""user"", new BetterJSONObject(item));startActivity(intent);}});}}if (mLoadingIdentifiersList != null) {if (mIdentifiers == null) {((TextView) mTabLayout.getTabAt(3).getCustomView().findViewById(R.id.count)).setVisibility(View.GONE);((ProgressBar) mTabLayout.getTabAt(3).getCustomView().findViewById(R.id.loading)).setVisibility(View.VISIBLE);mLoadingIdentifiersList.setVisibility(View.VISIBLE);mIdentifiersListEmpty.setVisibility(View.GONE);mIdentifiersList.setVisibility(View.GONE);mIdentifiersListHeader.setVisibility(View.GONE);} else {((TextView) mTabLayout.getTabAt(3).getCustomView().findViewById(R.id.count)).setVisibility(View.VISIBLE);((ProgressBar) mTabLayout.getTabAt(3).getCustomView().findViewById(R.id.loading)).setVisibility(View.GONE);((TextView) mTabLayout.getTabAt(3).getCustomView().findViewById(R.id.count)).setText(formatter.format(mTotalIdentifiers));mLoadingIdentifiersList.setVisibility(View.GONE);if (mIdentifiers.size() == 0) {mIdentifiersListEmpty.setVisibility(View.VISIBLE);} else {mIdentifiersListEmpty.setVisibility(View.GONE);}mIdentifiersListAdapter = new ProjectUserAdapter(ProjectDetails.this, mIdentifiers);mIdentifiersList.setAdapter(mIdentifiersListAdapter);mIdentifiersList.setVisibility(View.VISIBLE);mIdentifiersListHeader.setVisibility(View.VISIBLE);mIdentifiersList.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(ProjectDetails.this, UserProfile.class);intent.putExtra(""user"", new BetterJSONObject(item));startActivity(intent);}});}}}public void onOffsetChanged(AppBarLayout appBarLayout, int offset) {int maxScroll = appBarLayout.getTotalScrollRange();float percentage = (float) Math.abs(offset) / (float) maxScroll;if (percentage >= 0.9f) {if (!mProjectPicHidden) {startAlphaAnimation(mProjectPicContainer, 100, View.INVISIBLE);mProjectPicHidden = true;}} else {if (mProjectPicHidden) {startAlphaAnimation(mProjectPicContainer, 100, View.VISIBLE);mProjectPicHidden = false;}}}public static void startAlphaAnimation (View v, long duration, int visibility) {AlphaAnimation alphaAnimation = (visibility == View.VISIBLE)? new AlphaAnimation(0f, 1f): new AlphaAnimation(1f, 0f);alphaAnimation.setDuration(duration);alphaAnimation.setFillAfter(true);v.startAnimation(alphaAnimation);}public class ProjectDetailsPageAdapter extends PagerAdapter {final int PAGE_COUNT = 4;private Context mContext;public ProjectDetailsPageAdapter(Context context) {mContext = context;}@Overridepublic int getCount() {return PAGE_COUNT;}@Overridepublic Object instantiateItem(ViewGroup collection, int position) {int layoutResource;switch (position) {case 3:layoutResource = R.layout.project_identifiers;break;case 2:layoutResource = R.layout.project_people;break;case 1:layoutResource = R.layout.project_species;break;case 0:default:layoutResource = R.layout.project_observations;break;}LayoutInflater inflater = LayoutInflater.from(mContext);ViewGroup layout = (ViewGroup) inflater.inflate(layoutResource, collection, false);switch (position) {case 3:mLoadingIdentifiersList = (ProgressBar) layout.findViewById(R.id.loading_identifiers_list);mIdentifiersListEmpty = (TextView) layout.findViewById(R.id.identifiers_list_empty);mIdentifiersList = (ListView) layout.findViewById(R.id.identifiers_list);mIdentifiersListHeader = (ViewGroup) layout.findViewById(R.id.identifiers_list_header);ViewCompat.setNestedScrollingEnabled(mIdentifiersList, true);break;case 2:mLoadingPeopleList = (ProgressBar) layout.findViewById(R.id.loading_people_list);mPeopleListEmpty = (TextView) layout.findViewById(R.id.people_list_empty);mPeopleList = (ListView) layout.findViewById(R.id.people_list);mPeopleListHeader = (ViewGroup) layout.findViewById(R.id.people_list_header);ViewCompat.setNestedScrollingEnabled(mPeopleList, true);break;case 1:mLoadingSpeciesList = (ProgressBar) layout.findViewById(R.id.loading_species_list);mSpeciesListEmpty = (TextView) layout.findViewById(R.id.species_list_empty);mSpeciesList = (ListView) layout.findViewById(R.id.species_list);ViewCompat.setNestedScrollingEnabled(mSpeciesList, true);mSpeciesList.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(ProjectDetails.this, GuideTaxonActivity.class);intent.putExtra(""taxon"", new BetterJSONObject(item));intent.putExtra(""guide_taxon"", false);intent.putExtra(""show_add"", false);intent.putExtra(""download_taxon"", true);startActivity(intent);}});break;case 0:default:mLoadingObservationsGrid = (ProgressBar) layout.findViewById(R.id.loading_observations_grid);mObservationsGridEmpty = (TextView) layout.findViewById(R.id.observations_grid_empty);mObservationsGrid = (GridViewExtended) layout.findViewById(R.id.observations_grid);mObservationsGrid.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View view, int position, long arg3) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(ProjectDetails.this, ObservationViewerActivity.class);intent.putExtra(""observation"", item.toString());intent.putExtra(""read_only"", true);intent.putExtra(""reload"", true);startActivity(intent);}});ViewCompat.setNestedScrollingEnabled(mObservationsGrid, true);break;}collection.addView(layout);refreshViewState();return layout;}@Overridepublic void destroyItem(ViewGroup collection, int position, Object view) {collection.removeView((View) view);}@Overridepublic boolean isViewFromObject(View view, Object object) {return view == object;}}}",ProjectDetails.java,0
200,"package org.inaturalist.android;import android.graphics.drawable.Drawable;import android.graphics.drawable.LayerDrawable;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;public class TutorialFragment extends Fragment {@Overridepublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {View v = inflater.inflate(R.layout.tutorial_page, container, false);Bundle args = getArguments();int index = args.getInt(""id"");ImageView imageView = (ImageView) v.findViewById(R.id.tutorial_image);INaturalistApp app = (INaturalistApp) getActivity().getApplicationContext();String inatNetwork = app.getInaturalistNetworkMember();String[] images;if (inatNetwork == null) {// No network selected - use default tutorial imagesimages = getResources().getStringArray(R.array.tutorial_images);} else {// Use network specific tutorial imagesString imagesArrayName = app.getStringResourceByName(""inat_tutorial_images_"" + inatNetwork);images = app.getStringArrayResourceByName(imagesArrayName);}int resID = getResources().getIdentifier(""@drawable/"" + images[index] , ""drawable"", getActivity().getApplicationContext().getPackageName());imageView.setImageResource(resID);return v;}}",TutorialFragment.java,0
200,"package org.inaturalist.android;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Typeface;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;class TaxonAdapter extends ArrayAdapter<String> {private ArrayList<JSONObject> mResultList;private Context mContext;public TaxonAdapter(Context context, ArrayList<JSONObject> results) {super(context, android.R.layout.simple_list_item_1);mContext = context;mResultList = results;}@Overridepublic int getCount() {return (mResultList != null ? mResultList.size() : 0);}public View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view = inflater.inflate(R.layout.taxon_result_item, parent, false);JSONObject item = null;try {item = mResultList.get(position).getJSONObject(""taxon"");} catch (JSONException e) {e.printStackTrace();return view;}((ViewGroup)view.findViewById(R.id.taxon_result)).setVisibility(View.VISIBLE);((ViewGroup)view.findViewById(R.id.unknown_taxon_result)).setVisibility(View.GONE);// Get the taxon display name according to device localetry {ImageView idPic = (ImageView) view.findViewById(R.id.id_pic);TextView idName = (TextView) view.findViewById(R.id.id_name);TextView idTaxonName = (TextView) view.findViewById(R.id.id_taxon_name);String commonName = item.optString(""preferred_common_name"", null);if ((commonName == null) || (commonName.length() == 0)) {commonName = item.optString(""english_common_name"");}if ((commonName != null) && (commonName.length() > 0)) {idName.setText(commonName);idTaxonName.setText(item.getString(""name""));} else {idName.setText(item.getString(""name""));idTaxonName.setVisibility(View.GONE);}idTaxonName.setTypeface(null, Typeface.ITALIC);if (item.has(""default_photo"") && !item.isNull(""default_photo"")) {JSONObject defaultPhoto = item.getJSONObject(""default_photo"");UrlImageViewHelper.setUrlDrawable(idPic, defaultPhoto.getString(""square_url""), ObservationPhotosViewer.observationIcon(item), new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {if (loadedBitmap != null)imageView.setImageBitmap(ImageUtils.getRoundedCornerBitmap(loadedBitmap, 4));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});} else {idPic.setImageResource(R.drawable.iconic_taxon_unknown);}view.setTag(item);} catch (JSONException e) {e.printStackTrace();}return view;}}",TaxonAdapter.java,0
200,"package org.inaturalist.android;import android.annotation.TargetApi;import android.content.Context;import android.os.Build;import android.util.AttributeSet;import android.util.Log;import android.view.MotionEvent;import android.widget.LinearLayout;// Linear layout that intercepts all swiping gestures (so it won't reach its child views)public class SwipeableLinearLayout extends LinearLayout {public SwipeableLinearLayout(Context context) {super(context);}public SwipeableLinearLayout(Context context, AttributeSet attrs) {super(context, attrs);}@TargetApi(Build.VERSION_CODES.HONEYCOMB)public SwipeableLinearLayout(Context context, AttributeSet attrs, int defStyleAttr) {super(context, attrs, defStyleAttr);}@TargetApi(Build.VERSION_CODES.LOLLIPOP)public SwipeableLinearLayout(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {super(context, attrs, defStyleAttr, defStyleRes);}private float mStartEventX = -1, mStartEventY = -1;private static final int SWIPE_THRESHOLD = 80;public interface SwipeListener {public void onSwipeRight();public void onSwipeLeft();}private SwipeListener mOnSwipeListener = null;public void setOnSwipeListener(SwipeListener listener) {mOnSwipeListener = listener;}@Overridepublic boolean onInterceptTouchEvent(MotionEvent ev) {if (mOnSwipeListener == null) {return false;}if (ev.getAction() == MotionEvent.ACTION_DOWN) {mStartEventX = ev.getRawX();mStartEventY = ev.getRawY();return false;}if (((ev.getAction() == MotionEvent.ACTION_CANCEL) || (ev.getAction() == MotionEvent.ACTION_UP)) && (mStartEventX > -1)) {// See if the user swipedtry {float diffY = ev.getRawY() - mStartEventY;float diffX = ev.getRawX() - mStartEventX;if ((Math.abs(diffX) - Math.abs(diffY)) > SWIPE_THRESHOLD) {if (Math.abs(diffX) > SWIPE_THRESHOLD) {if (diffX > 0) {mOnSwipeListener.onSwipeRight();} else {mOnSwipeListener.onSwipeLeft();}mStartEventX = -1;mStartEventY = -1;return true;}}} catch (Exception e) {}mStartEventX = -1;mStartEventY = -1;}return false;}}",SwipeableLinearLayout.java,0
200,"package org.inaturalist.android;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.app.Activity;import android.app.AlertDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.Typeface;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.InputType;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.view.View.MeasureSpec;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;public class ObservationDetails extends AppCompatActivity implements CommentsIdsAdapter.OnIDAdded {protected static final int NEW_ID_REQUEST_CODE = 0x100;private static String TAG = ""ObservationDetails"";private INaturalistApp mApp;private ActivityHelper mHelper;private JSONObject mObservation;private ObservationReceiver mObservationReceiver;private TextView mNoComments;private ProgressBar mProgress;private ArrayList<BetterJSONObject> mCommentsIds;private Button mAddComment;private Button mAddId;public String mLogin;private ListView mCommentsIdsList;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setIcon(android.R.color.transparent);actionBar.setLogo(R.drawable.up_icon);actionBar.setDisplayShowCustomEnabled(true);actionBar.setCustomView(R.layout.observation_details_action_bar);mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.observation_details);mHelper = new ActivityHelper(this);Intent intent = getIntent();try {String obsJson;if (savedInstanceState == null) {obsJson = intent.getStringExtra(""observation"");} else {obsJson = savedInstanceState.getString(""observation"");}if (obsJson == null) {finish();return;}mObservation = new JSONObject(obsJson);} catch (JSONException e) {e.printStackTrace();}View title = (View) actionBar.getCustomView().findViewById(R.id.title);title.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View arg0) {finish();}});View viewOnInat = (View) actionBar.getCustomView().findViewById(R.id.view_on_inat);viewOnInat.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {// Display a confirmation dialogconfirm(ObservationDetails.this, R.string.details, R.string.view_on_inat_confirmation,R.string.yes, R.string.no,new Runnable() { public void run() {String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);Intent i = new Intent(Intent.ACTION_VIEW);try {i.setData(Uri.parse(""http://"" + inatHost + ""/observations/"" + mObservation.getInt(""id"")));startActivity(i);} catch (JSONException e) {e.printStackTrace();}}},null);}});TextView idName = (TextView) findViewById(R.id.id_name);TextView taxonName = (TextView) findViewById(R.id.id_taxon_name);idName.setTextColor(mHelper.observationColor(new Observation(new BetterJSONObject(mObservation))));final JSONObject taxon = mObservation.optJSONObject(""taxon"");if (taxon != null) {String idNameString = getTaxonName(taxon);if (idNameString != null) {idName.setText(idNameString);taxonName.setText(taxon.optString(""name"", """"));} else {idName.setText(taxon.optString(""name"", getResources().getString(R.string.unknown)));taxonName.setText("""");idName.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.ITALIC));}} else {String idNameStr = mObservation.isNull(""species_guess"") ?getResources().getString(R.string.unknown) :mObservation.optString(""species_guess"", getResources().getString(R.string.unknown));idName.setText(idNameStr);taxonName.setText("""");}if (taxon != null) {idName.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(ObservationDetails.this, GuideTaxonActivity.class);intent.putExtra(""taxon"", new BetterJSONObject(taxon));intent.putExtra(""guide_taxon"", false);intent.putExtra(""download_taxon"", true);startActivity(intent);}});String rank = (taxon.isNull(""rank"") ? null : taxon.optString(""rank"", null));if (rank != null) {if ((rank.equalsIgnoreCase(""genus"")) || (rank.equalsIgnoreCase(""species""))) {taxonName.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.ITALIC));}}}final ImageView idPic = (ImageView) findViewById(R.id.id_pic);final ProgressBar idPicLoading = (ProgressBar) findViewById(R.id.id_pic_loading);JSONArray photos = mObservation.optJSONArray(""observation_photos"");if ((photos != null) && (photos.length() > 0)) {// Show photoJSONObject photo = photos.optJSONObject(0);JSONObject innerPhoto = photo.optJSONObject(""photo"");String photoUrl = innerPhoto.has(""original_url"") ? innerPhoto.optString(""original_url"") : innerPhoto.optString(""large_url"");idPic.setVisibility(View.INVISIBLE);idPicLoading.setVisibility(View.VISIBLE);UrlImageViewHelper.setUrlDrawable(idPic, photoUrl, ObservationPhotosViewer.observationIcon(mObservation), new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {idPic.setVisibility(View.VISIBLE);idPicLoading.setVisibility(View.GONE);}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// No post-processing of bitmapreturn loadedBitmap;}});idPic.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(ObservationDetails.this, ObservationPhotosViewer.class);intent.putExtra(""observation"", mObservation.toString());startActivity(intent);}});} else {// Show taxon iconidPic.setImageResource(ObservationPhotosViewer.observationIcon(mObservation));}ImageView userPic = (ImageView) findViewById(R.id.user_pic);String photoUrl = ""http://www.inaturalist.org/attachments/users/icons/"" + mObservation.optInt(""user_id"") + ""-medium.jpg"";UrlImageViewHelper.setUrlDrawable(userPic, photoUrl, R.drawable.usericon, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Nothing to do here}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Return a circular version of the profile picturereturn ImageUtils.getCircleBitmap(loadedBitmap);}});TextView userName = (TextView) findViewById(R.id.user_name);userName.setText(mObservation.optString(""user_login""));TextView location = (TextView) findViewById(R.id.location);if (!mObservation.isNull(""place_guess"")) {location.setText(mObservation.optString(""place_guess"",mObservation.optString(""longitude"") + "", "" + mObservation.optString(""latitude"") ));} else {if (!mObservation.isNull(""longitude"")) {location.setText(mObservation.optString(""longitude"") + "", "" + mObservation.optString(""latitude""));} else {location.setText("""");ImageView locationImage = (ImageView) findViewById(R.id.location_image);locationImage.setVisibility(View.GONE);}}TextView accuracy = (TextView) findViewById(R.id.accuracy);if (!mObservation.isNull(""positional_accuracy"")) {accuracy.setText(String.format(getResources().getString(R.string.accuracy), mObservation.optInt(""positional_accuracy"")));} else {accuracy.setText("""");}TextView observedOnDate = (TextView) findViewById(R.id.observed_on_date);TextView observedOnTime = (TextView) findViewById(R.id.observed_on_time);BetterJSONObject json = new BetterJSONObject(mObservation);Timestamp observedOn = json.getTimestamp(""time_observed_at"");if (observedOn != null) {observedOnDate.setText(mApp.formatDate(observedOn));observedOnTime.setText(mApp.shortFormatTime(observedOn));} else {if (!mObservation.isNull(""observed_on"")) {observedOnDate.setText(mObservation.optString(""observed_on"", """"));} else {observedOnDate.setText("""");}observedOnTime.setText("""");}mNoComments = (TextView) findViewById(android.R.id.empty);mProgress = (ProgressBar) findViewById(R.id.progress);mAddComment = (Button) findViewById(R.id.add_comment);mAddComment.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {if (mLogin == null) {Toast.makeText(getApplicationContext(), R.string.must_login_to_add_comment, Toast.LENGTH_LONG).show();return;}showInputDialog();}});mAddId = (Button) findViewById(R.id.add_id);mAddId.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {if (mLogin == null) {Toast.makeText(getApplicationContext(), R.string.must_login_to_add_id, Toast.LENGTH_LONG).show();return;}Intent intent = new Intent(ObservationDetails.this, IdentificationActivity.class);startActivityForResult(intent, NEW_ID_REQUEST_CODE);}});// Get the observation's IDs/commentsIntent serviceIntent = new Intent(INaturalistService.ACTION_GET_OBSERVATION, null, ObservationDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.optInt(""id""));startService(serviceIntent);mObservationReceiver = new ObservationReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);Log.i(TAG, ""Registering ACTION_OBSERVATION_RESULT"");registerReceiver(mObservationReceiver, filter);SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);mLogin = prefs.getString(""username"", null);mCommentsIdsList = (ListView)findViewById(R.id.comments_ids_list);loadResultsIntoUI();}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:finish();return true;default:return super.onOptionsItemSelected(item);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putString(""observation"", mObservation.toString());super.onSaveInstanceState(outState);}/*** Display a confirm dialog.* @param activity* @param title* @param message* @param positiveLabel* @param negativeLabel* @param onPositiveClick runnable to call (in UI thread) if positive button pressed. Can be null* @param onNegativeClick runnable to call (in UI thread) if negative button pressed. Can be null*/public final void confirm(final Activity activity,final int title,final int message,final int positiveLabel,final int negativeLabel,final Runnable onPositiveClick,final Runnable onNegativeClick) {mHelper.confirm(getString(title), getString(message),new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {if (onPositiveClick != null) onPositiveClick.run();}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {if (onNegativeClick != null) onNegativeClick.run();}},positiveLabel, negativeLabel);}// Utility function for retrieving the Taxon's nameprivate String getTaxonName(JSONObject item) {JSONObject defaultName;String displayName = null;// Get the taxon display name according to configuration of the current iNat networkString inatNetwork = mApp.getInaturalistNetworkMember();String networkLexicon = mApp.getStringResourceByName(""inat_lexicon_"" + inatNetwork);try {JSONArray taxonNames = item.getJSONArray(""taxon_names"");for (int i = 0; i < taxonNames.length(); i++) {JSONObject taxonName = taxonNames.getJSONObject(i);String lexicon = taxonName.getString(""lexicon"");if (lexicon.equals(networkLexicon)) {// Found the appropriate lexicon for the taxondisplayName = taxonName.getString(""name"");break;}}} catch (JSONException e3) {e3.printStackTrace();}if (displayName == null) {// Couldn't extract the display name from the taxon names list - use the default onetry {displayName = item.getString(""unique_name"");} catch (JSONException e2) {displayName = null;}try {defaultName = item.getJSONObject(""default_name"");displayName = defaultName.getString(""name"");} catch (JSONException e1) {// alasJSONObject commonName = item.optJSONObject(""common_name"");if (commonName != null) {displayName = commonName.optString(""name"");} else {displayName = item.optString(""name"");}}}return displayName;}@Overrideprotected void onPause() {super.onPause();if (mObservationReceiver != null) {try {unregisterReceiver(mObservationReceiver);} catch (Exception exc) {exc.printStackTrace();}}}private class ObservationReceiver extends BroadcastReceiver {private CommentsIdsAdapter mAdapter;@Overridepublic void onReceive(Context context, Intent intent) {unregisterReceiver(mObservationReceiver);Observation observation = (Observation) intent.getSerializableExtra(INaturalistService.OBSERVATION_RESULT);if (observation == null) {// Couldn't retrieve observation details (probably deleted)mNoComments.setText(R.string.could_not_load_comments);mCommentsIds = new ArrayList<BetterJSONObject>();loadResultsIntoUI();View bottomBar = findViewById(R.id.bottom_bar);bottomBar.setVisibility(View.GONE);return;} else {mAddComment.setEnabled(true);mAddId.setEnabled(true);}JSONArray comments = observation.comments.getJSONArray();JSONArray ids = observation.identifications.getJSONArray();ArrayList<BetterJSONObject> results = new ArrayList<BetterJSONObject>();try {for (int i = 0; i < comments.length(); i++) {BetterJSONObject comment = new BetterJSONObject(comments.getJSONObject(i));comment.put(""type"", ""comment"");results.add(comment);}for (int i = 0; i < ids.length(); i++) {BetterJSONObject id = new BetterJSONObject(ids.getJSONObject(i));id.put(""type"", ""identification"");results.add(id);}} catch (JSONException e) {e.printStackTrace();}Collections.sort(results, new Comparator<BetterJSONObject>() {@Overridepublic int compare(BetterJSONObject lhs, BetterJSONObject rhs) {Timestamp date1 = lhs.getTimestamp(""created_at"");Timestamp date2 = rhs.getTimestamp(""created_at"");return date1.compareTo(date2);}});mCommentsIds = results;int taxonId = (observation.taxon_id == null ? 0 : observation.taxon_id);mAdapter = new CommentsIdsAdapter(ObservationDetails.this, results, taxonId, ObservationDetails.this);mCommentsIdsList.setAdapter(mAdapter);loadResultsIntoUI();Handler handler = new Handler();handler.postDelayed(new Runnable() {@Overridepublic void run() {setListViewHeightBasedOnItems(mCommentsIdsList);}}, 100);}}@Overridepublic void onIdentificationAdded(BetterJSONObject taxon) {try {// After calling the added ID API - we'll refresh the comment/ID listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_AGREE_ID, null, ObservationDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.optInt(""id""));serviceIntent.putExtra(INaturalistService.TAXON_ID, taxon.getJSONObject(""taxon"").getInt(""id""));startService(serviceIntent);} catch (JSONException e) {e.printStackTrace();}}@Overridepublic void onIdentificationRemoved(BetterJSONObject taxon) {// After calling the remove API - we'll refresh the comment/ID listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_REMOVE_ID, null, ObservationDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.optInt(""id""));serviceIntent.putExtra(INaturalistService.IDENTIFICATION_ID, taxon.getInt(""id""));startService(serviceIntent);}@Overridepublic void onCommentRemoved(BetterJSONObject comment) {}@Overridepublic void onCommentUpdated(BetterJSONObject comment) {}private void loadResultsIntoUI() {if (mCommentsIds == null) {mProgress.setVisibility(View.VISIBLE);mCommentsIdsList.setVisibility(View.GONE);mNoComments.setVisibility(View.GONE);mAddComment.setEnabled(false);mAddId.setEnabled(false);}  else if (mCommentsIds.size() == 0) {mProgress.setVisibility(View.GONE);mCommentsIdsList.setVisibility(View.GONE);mNoComments.setVisibility(View.VISIBLE);mAddComment.setEnabled(true);mAddId.setEnabled(true);} else {mProgress.setVisibility(View.GONE);mCommentsIdsList.setVisibility(View.VISIBLE);mNoComments.setVisibility(View.GONE);mAddComment.setEnabled(true);mAddId.setEnabled(true);}}private void showInputDialog() {// Set up the inputfinal EditText input = new EditText(this);// Specify the type of input expected; this, for example, sets the input as a password, and will mask the textinput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);input.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));mHelper.confirm(R.string.add_comment, input,new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {String comment = input.getText().toString();// Add the commentIntent serviceIntent = new Intent(INaturalistService.ACTION_ADD_COMMENT, null, ObservationDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.optInt(""id""));serviceIntent.putExtra(INaturalistService.COMMENT_BODY, comment);startService(serviceIntent);mCommentsIds = null;loadResultsIntoUI();try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}// Refresh the comment/id listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent2 = new Intent(INaturalistService.ACTION_GET_OBSERVATION, null, ObservationDetails.this, INaturalistService.class);serviceIntent2.putExtra(INaturalistService.OBSERVATION_ID, mObservation.optInt(""id""));startService(serviceIntent2);// Ask for a sync (to update the comment count)Intent serviceIntent3 = new Intent(INaturalistService.ACTION_SYNC, null, ObservationDetails.this, INaturalistService.class);startService(serviceIntent3);}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {dialog.cancel();}});}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if (requestCode == NEW_ID_REQUEST_CODE) {if (resultCode == RESULT_OK) {// Add the IDInteger taxonId = data.getIntExtra(IdentificationActivity.TAXON_ID, 0);String idRemarks = data.getStringExtra(IdentificationActivity.ID_REMARKS);Intent serviceIntent = new Intent(INaturalistService.ACTION_ADD_IDENTIFICATION, null, ObservationDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.optInt(""id""));serviceIntent.putExtra(INaturalistService.TAXON_ID, taxonId);serviceIntent.putExtra(INaturalistService.IDENTIFICATION_BODY, idRemarks);startService(serviceIntent);// Show a loading progress until the new comments/IDs are loadedmCommentsIds = null;loadResultsIntoUI();try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}// Refresh the comment/id listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent2 = new Intent(INaturalistService.ACTION_GET_OBSERVATION, null, ObservationDetails.this, INaturalistService.class);serviceIntent2.putExtra(INaturalistService.OBSERVATION_ID, mObservation.optInt(""id""));startService(serviceIntent2);}}}/*** Sets ListView height dynamically based on the height of the items.** @param listView to be resized* @return true if the listView is successfully resized, false otherwise*/public boolean setListViewHeightBasedOnItems(ListView listView) {ListAdapter listAdapter = listView.getAdapter();if (listAdapter != null) {int numberOfItems = listAdapter.getCount();// Get total height of all items.int totalItemsHeight = 0;for (int itemPos = 0; itemPos < numberOfItems; itemPos++) {View item = listAdapter.getView(itemPos, null, listView);item.measure(MeasureSpec.makeMeasureSpec(listView.getWidth(), MeasureSpec.AT_MOST), MeasureSpec.UNSPECIFIED);totalItemsHeight += item.getMeasuredHeight();}// Get total height of all item dividers.int totalDividersHeight = listView.getDividerHeight() *(numberOfItems - 1);// Set list height.ViewGroup.LayoutParams params = listView.getLayoutParams();int paddingHeight = (int)getResources().getDimension(R.dimen.actionbar_height);params.height = totalItemsHeight + totalDividersHeight + paddingHeight;listView.setLayoutParams(params);listView.requestLayout();return true;} else {return false;}}}",ObservationDetails.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import uk.co.senab.photoview.HackyViewPager;import uk.co.senab.photoview.PhotoViewAttacher;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Bundle;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager.LayoutParams;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.ProgressBar;public class TaxonTagPhotosViewer extends AppCompatActivity {private static String TAG = ""TaxonTagPhotosViewer"";private INaturalistApp mApp;private ActivityHelper mHelper;private HackyViewPager mViewPager;private String mGuideId;private String mGuideXmlFilename;private String mTagName;private String mTagValue;private GuideXML mGuideXml;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setIcon(android.R.color.transparent);actionBar.setLogo(R.drawable.up_icon);mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.observation_photos);Intent intent = getIntent();if (savedInstanceState == null) {mGuideId = intent.getStringExtra(""guide_id"");mGuideXmlFilename = intent.getStringExtra(""guide_xml_filename"");mTagName = intent.getStringExtra(""tag_name"");mTagValue = intent.getStringExtra(""tag_value"");actionBar.setTitle(mTagName + ""="" + mTagValue);} else {mTagName = savedInstanceState.getString(""tag_name"");mTagValue = savedInstanceState.getString(""tag_value"");actionBar.setTitle(mTagName + ""="" + mTagValue);mGuideId = savedInstanceState.getString(""guide_id"");mGuideXmlFilename = savedInstanceState.getString(""guide_xml_filename"");}mViewPager = (HackyViewPager) findViewById(R.id.id_pic_view_pager);if (mGuideXmlFilename != null) {// Load guide taxon from XMLmGuideXml = new GuideXML(this, mGuideId, mGuideXmlFilename);mViewPager.setAdapter(new TagPicsPagerAdapter());}}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:finish();return true;default:return super.onOptionsItemSelected(item);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putString(""guide_id"", mGuideId);outState.putString(""guide_xml_filename"", mGuideXmlFilename);outState.putString(""tag_name"", mTagName);outState.putString(""tag_value"", mTagValue);super.onSaveInstanceState(outState);}class TagPicsPagerAdapter extends PagerAdapter {int mDefaultTaxonIcon;List<String> mImages;public TagPicsPagerAdapter() {mImages = new ArrayList<String>();List<GuideTaxonPhotoXML> photos =  mGuideXml.getTagRepresentativePhoto(mTagName, mTagValue);if ((photos != null) && (photos.size() > 0)) {// Show the photosfor (int i = 0; i < photos.size(); i++) {GuideTaxonPhotoXML photo = photos.get(i);mImages.add(getPhotoLocation(photo));}} else {// No photos at allfinish();}}@Overridepublic int getCount() {return mImages.size();}@Overridepublic View instantiateItem(ViewGroup container, int position) {String imageUrl = mImages.get(position);View layout = (View) getLayoutInflater().inflate(R.layout.observation_photo, null, false);container.addView(layout, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);ImageView imageView = (ImageView) layout.findViewById(R.id.id_pic);final ProgressBar loading = (ProgressBar) layout.findViewById(R.id.id_pic_loading);final PhotoViewAttacher attacher = new PhotoViewAttacher(imageView);if (mGuideXml.isGuideDownloaded()) {// Show offline photoBitmap bitmap = BitmapFactory.decodeFile(imageUrl);imageView.setImageBitmap(bitmap);loading.setVisibility(View.INVISIBLE);imageView.setVisibility(View.VISIBLE);} else {loading.setVisibility(View.VISIBLE);imageView.setVisibility(View.INVISIBLE);// Show online photoUrlImageViewHelper.setUrlDrawable(imageView, imageUrl, mDefaultTaxonIcon, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {loading.setVisibility(View.GONE);imageView.setVisibility(View.VISIBLE);attacher.update();}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// No post-processing of bitmapreturn loadedBitmap;}});}return layout;}@Overridepublic void destroyItem(ViewGroup container, int position, Object object) {container.removeView((View) object);}@Overridepublic boolean isViewFromObject(View view, Object object) {return view == object;}}private String getPhotoLocation(GuideTaxonPhotoXML photo) {final GuideTaxonPhotoXML.PhotoSize[] DEFAULT_SIZES = {GuideTaxonPhotoXML.PhotoSize.LARGE,GuideTaxonPhotoXML.PhotoSize.MEDIUM,GuideTaxonPhotoXML.PhotoSize.SMALL,GuideTaxonPhotoXML.PhotoSize.THUMBNAIL};// Determine if to use offline/online photoGuideTaxonPhotoXML.PhotoType photoType =(mGuideXml.isGuideDownloaded() ? GuideTaxonPhotoXML.PhotoType.LOCAL : GuideTaxonPhotoXML.PhotoType.REMOTE);String photoLocation = null;for (GuideTaxonPhotoXML.PhotoSize size : DEFAULT_SIZES) {photoLocation = photo.getPhotoLocation(photoType, size);// See if we found a photo for current size - if not, try the next best sizeif ((photoLocation != null) && (photoLocation.length() > 0)) break;}return photoLocation;}}",TaxonTagPhotosViewer.java,0
200,"/** Copyright (C) 2007-2008 OpenIntents.org** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at**      http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*/package org.inaturalist.android;import android.annotation.SuppressLint;import android.content.ContentResolver;import android.content.ContentUris;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.database.DatabaseUtils;import android.graphics.Bitmap;import android.net.Uri;import android.os.Build;import android.os.Environment;import android.provider.DocumentsContract;import android.provider.MediaStore;import android.util.Log;import android.webkit.MimeTypeMap;import java.io.File;import java.io.FileFilter;import java.text.DecimalFormat;import java.util.Comparator;/*** @version 2009-07-03* @author Peli* @version 2013-12-11* @author paulburke (ipaulpro)*/public class FileUtils {private FileUtils() {} //private constructor to enforce Singleton pattern/** TAG for log messages. */static final String TAG = ""FileUtils"";private static final boolean DEBUG = false; // Set to true to enable loggingpublic static final String MIME_TYPE_AUDIO = ""audio/*"";public static final String MIME_TYPE_TEXT = ""text/*"";public static final String MIME_TYPE_IMAGE = ""image/*"";public static final String MIME_TYPE_VIDEO = ""video/*"";public static final String MIME_TYPE_APP = ""application/*"";public static final String HIDDEN_PREFIX = ""."";/*** Gets the extension of a file name, like "".png"" or "".jpg"".** @param uri* @return Extension including the dot("".""); """" if there is no extension;*         null if uri was null.*/public static String getExtension(String uri) {if (uri == null) {return null;}int dot = uri.lastIndexOf(""."");if (dot >= 0) {return uri.substring(dot);} else {// No extension.return """";}}/*** @return Whether the URI is a local one.*/public static boolean isLocal(String url) {if (url != null && !url.startsWith(""http://"") && !url.startsWith(""https://"")) {return true;}return false;}/*** @return True if Uri is a MediaStore Uri.* @author paulburke*/public static boolean isMediaUri(Uri uri) {return ""media"".equalsIgnoreCase(uri.getAuthority());}/*** Convert File into Uri.** @param file* @return uri*/public static Uri getUri(File file) {if (file != null) {return Uri.fromFile(file);}return null;}/*** Returns the path only (without file name).** @param file* @return*/public static File getPathWithoutFilename(File file) {if (file != null) {if (file.isDirectory()) {// no file to be split off. Return everythingreturn file;} else {String filename = file.getName();String filepath = file.getAbsolutePath();// Construct path without file name.String pathwithoutname = filepath.substring(0,filepath.length() - filename.length());if (pathwithoutname.endsWith(""/"")) {pathwithoutname = pathwithoutname.substring(0, pathwithoutname.length() - 1);}return new File(pathwithoutname);}}return null;}/*** @return The MIME type for the given file.*/public static String getMimeType(File file) {String extension = getExtension(file.getName());if (extension.length() > 0)return MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension.substring(1));return ""application/octet-stream"";}/*** @return The MIME type for the give Uri.*/public static String getMimeType(Context context, Uri uri) {File file = new File(getPath(context, uri));return getMimeType(file);}/*** @param uri The Uri to check.* @return Whether the Uri authority is ExternalStorageProvider.* @author paulburke*/public static boolean isExternalStorageDocument(Uri uri) {return ""com.android.externalstorage.documents"".equals(uri.getAuthority());}/*** @param uri The Uri to check.* @return Whether the Uri authority is DownloadsProvider.* @author paulburke*/public static boolean isDownloadsDocument(Uri uri) {return ""com.android.providers.downloads.documents"".equals(uri.getAuthority());}/*** @param uri The Uri to check.* @return Whether the Uri authority is MediaProvider.* @author paulburke*/public static boolean isMediaDocument(Uri uri) {return ""com.android.providers.media.documents"".equals(uri.getAuthority());}/*** @param uri The Uri to check.* @return Whether the Uri authority is Google Photos.*/public static boolean isGooglePhotosUri(Uri uri) {return ""com.google.android.apps.photos.content"".equals(uri.getAuthority());}/*** Get the value of the data column for this Uri. This is useful for* MediaStore Uris, and other file-based ContentProviders.** @param context The context.* @param uri The Uri to query.* @param selection (Optional) Filter used in the query.* @param selectionArgs (Optional) Selection arguments used in the query.* @return The value of the _data column, which is typically a file path.* @author paulburke*/public static String getDataColumn(Context context, Uri uri, String selection,String[] selectionArgs) {Cursor cursor = null;final String column = ""_data"";final String[] projection = {column};try {cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,null);if (cursor != null && cursor.moveToFirst()) {if (DEBUG)DatabaseUtils.dumpCursor(cursor);final int column_index = cursor.getColumnIndexOrThrow(column);return cursor.getString(column_index);}} finally {if (cursor != null)cursor.close();}return null;}/*** Get a file path from a Uri. This will get the the path for Storage Access* Framework Documents, as well as the _data field for the MediaStore and* other file-based ContentProviders.<br>* <br>* Callers should check whether the path is local before assuming it* represents a local file.** @param context The context.* @param uri The Uri to query.* @see #isLocal(String)* @see #getFile(Context, Uri)* @author paulburke*/@SuppressLint(""NewApi"")public static String getPath(final Context context, final Uri uri) {if (DEBUG)Log.d(TAG + "" File -"",""Authority: "" + uri.getAuthority() +"", Fragment: "" + uri.getFragment() +"", Port: "" + uri.getPort() +"", Query: "" + uri.getQuery() +"", Scheme: "" + uri.getScheme() +"", Host: "" + uri.getHost() +"", Segments: "" + uri.getPathSegments().toString());final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;// DocumentProviderif (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {// ExternalStorageProviderif (isExternalStorageDocument(uri)) {final String docId = DocumentsContract.getDocumentId(uri);final String[] split = docId.split("":"");final String type = split[0];if (""primary"".equalsIgnoreCase(type)) {return Environment.getExternalStorageDirectory() + ""/"" + split[1];}// TODO handle non-primary volumes}// DownloadsProviderelse if (isDownloadsDocument(uri)) {final String id = DocumentsContract.getDocumentId(uri);final Uri contentUri = ContentUris.withAppendedId(Uri.parse(""content://downloads/public_downloads""), Long.valueOf(id));return getDataColumn(context, contentUri, null, null);}// MediaProviderelse if (isMediaDocument(uri)) {final String docId = DocumentsContract.getDocumentId(uri);final String[] split = docId.split("":"");final String type = split[0];Uri contentUri = null;if (""image"".equals(type)) {contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;} else if (""video"".equals(type)) {contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;} else if (""audio"".equals(type)) {contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;}final String selection = ""_id=?"";final String[] selectionArgs = new String[] {split[1]};return getDataColumn(context, contentUri, selection, selectionArgs);}}// MediaStore (and general)else if (""content"".equalsIgnoreCase(uri.getScheme())) {// Return the remote addressif (isGooglePhotosUri(uri))return uri.getLastPathSegment();return getDataColumn(context, uri, null, null);}// Fileelse if (""file"".equalsIgnoreCase(uri.getScheme())) {return uri.getPath();}return null;}/*** Convert Uri into File, if possible.** @return file A local file that the Uri was pointing to, or null if the*         Uri is unsupported or pointed to a remote resource.* @see #getPath(Context, Uri)* @author paulburke*/public static File getFile(Context context, Uri uri) {if (uri != null) {String path = getPath(context, uri);if (path != null && isLocal(path)) {return new File(path);}}return null;}/*** Get the file size in a human-readable string.** @param size* @return* @author paulburke*/public static String getReadableFileSize(int size) {final int BYTES_IN_KILOBYTES = 1024;final DecimalFormat dec = new DecimalFormat(""###.#"");final String KILOBYTES = "" KB"";final String MEGABYTES = "" MB"";final String GIGABYTES = "" GB"";float fileSize = 0;String suffix = KILOBYTES;if (size > BYTES_IN_KILOBYTES) {fileSize = size / BYTES_IN_KILOBYTES;if (fileSize > BYTES_IN_KILOBYTES) {fileSize = fileSize / BYTES_IN_KILOBYTES;if (fileSize > BYTES_IN_KILOBYTES) {fileSize = fileSize / BYTES_IN_KILOBYTES;suffix = GIGABYTES;} else {suffix = MEGABYTES;}}}return String.valueOf(dec.format(fileSize) + suffix);}/*** Attempt to retrieve the thumbnail of given File from the MediaStore. This* should not be called on the UI thread.** @param context* @param file* @return* @author paulburke*/public static Bitmap getThumbnail(Context context, File file) {return getThumbnail(context, getUri(file), getMimeType(file));}/*** Attempt to retrieve the thumbnail of given Uri from the MediaStore. This* should not be called on the UI thread.** @param context* @param uri* @return* @author paulburke*/public static Bitmap getThumbnail(Context context, Uri uri) {return getThumbnail(context, uri, getMimeType(context, uri));}/*** Attempt to retrieve the thumbnail of given Uri from the MediaStore. This* should not be called on the UI thread.** @param context* @param uri* @param mimeType* @return* @author paulburke*/public static Bitmap getThumbnail(Context context, Uri uri, String mimeType) {if (DEBUG)Log.d(TAG, ""Attempting to get thumbnail"");if (!isMediaUri(uri)) {Log.e(TAG, ""You can only retrieve thumbnails for images and videos."");return null;}Bitmap bm = null;if (uri != null) {final ContentResolver resolver = context.getContentResolver();Cursor cursor = null;try {cursor = resolver.query(uri, null, null, null, null);if (cursor.moveToFirst()) {final int id = cursor.getInt(0);if (DEBUG)Log.d(TAG, ""Got thumb ID: "" + id);if (mimeType.contains(""video"")) {bm = MediaStore.Video.Thumbnails.getThumbnail(resolver,id,MediaStore.Video.Thumbnails.MINI_KIND,null);}else if (mimeType.contains(FileUtils.MIME_TYPE_IMAGE)) {bm = MediaStore.Images.Thumbnails.getThumbnail(resolver,id,MediaStore.Images.Thumbnails.MINI_KIND,null);}}} catch (Exception e) {if (DEBUG)Log.e(TAG, ""getThumbnail"", e);} finally {if (cursor != null)cursor.close();}}return bm;}/*** File and folder comparator. TODO Expose sorting option method** @author paulburke*/public static Comparator<File> sComparator = new Comparator<File>() {@Overridepublic int compare(File f1, File f2) {// Sort alphabetically by lower case, which is much cleanerreturn f1.getName().toLowerCase().compareTo(f2.getName().toLowerCase());}};/*** File (not directories) filter.** @author paulburke*/public static FileFilter sFileFilter = new FileFilter() {@Overridepublic boolean accept(File file) {final String fileName = file.getName();// Return files only (not directories) and skip hidden filesreturn file.isFile() && !fileName.startsWith(HIDDEN_PREFIX);}};/*** Folder (directories) filter.** @author paulburke*/public static FileFilter sDirFilter = new FileFilter() {@Overridepublic boolean accept(File file) {final String fileName = file.getName();// Return directories only and skip hidden directoriesreturn file.isDirectory() && !fileName.startsWith(HIDDEN_PREFIX);}};/*** Get the Intent for selecting content to be used in an Intent Chooser.** @return The intent for opening a file with Intent.createChooser()* @author paulburke*/public static Intent createGetContentIntent() {// Implicitly allow the user to select a particular kind of datafinal Intent intent = new Intent(Intent.ACTION_GET_CONTENT);// The MIME data type filterintent.setType(""*/*"");// Only return URIs that can be opened with ContentResolverintent.addCategory(Intent.CATEGORY_OPENABLE);return intent;}}",FileUtils.java,0
200,"package org.inaturalist.android;import java.util.HashMap;import org.inaturalist.android.R;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.graphics.drawable.ColorDrawable;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Html;import android.util.DisplayMetrics;import android.util.Log;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.widget.TextView;import com.flurry.android.FlurryAgent;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.LatLngBounds;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;public class LocationChooserActivity extends AppCompatActivity implements LocationListener {public final static String TAG = ""INaturalistMapActivity"";protected static final String LATITUDE = ""latitude"";protected static final String LONGITUDE = ""longitude"";protected static final String ACCURACY = ""accuracy"";protected static final String ICONIC_TAXON_NAME = ""iconic_taxon_name"";private GoogleMap mMap;private HashMap<String, Observation> mMarkerObservations;private INaturalistApp mApp;private double mLatitude;private double mLongitude;private boolean mZoomToLocation = false;private LocationManager mLocationManager;private double mAccuracy;private ActivityHelper mHelper;private String mIconicTaxonName;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mHelper = new ActivityHelper(this);mLocationManager = (LocationManager) getSystemService(LOCATION_SERVICE);//mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this);mLongitude = getIntent().getDoubleExtra(LONGITUDE, 0);mLatitude = getIntent().getDoubleExtra(LATITUDE, 0);mAccuracy = getIntent().getDoubleExtra(ACCURACY, 0);mIconicTaxonName = getIntent().getStringExtra(ICONIC_TAXON_NAME);if ((mLongitude != 0) && (mLatitude != 0) && (savedInstanceState == null)) {mZoomToLocation = true;}ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setTitle(Html.fromHtml(getString(R.string.details)));if (savedInstanceState != null) {mLongitude = savedInstanceState.getDouble(""longitude"");mLatitude = savedInstanceState.getDouble(""latitude"");mAccuracy = savedInstanceState.getDouble(""accuracy"");mIconicTaxonName = savedInstanceState.getString(""iconic_taxon_name"");}setContentView(R.layout.location_chooser);}@Overridepublic void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}setUpMapIfNeeded();double longitude = mLongitude;double latitude = mLatitude;if ((longitude != 0) && (latitude != 0)) {LatLng location = new LatLng(latitude, longitude);int zoom = 15;if (mAccuracy > 0) {DisplayMetrics metrics = new DisplayMetrics();getWindowManager().getDefaultDisplay().getMetrics(metrics);int screenWidth = metrics.widthPixels;double equatorLength = 40075004; // in metersdouble widthInPixels = screenWidth * 0.4 * 0.5;double metersPerPixel = equatorLength / 256;int zoomLevel = 1;while ((metersPerPixel * widthInPixels) > mAccuracy) {metersPerPixel /= 2;++zoomLevel;Log.e(TAG, ""\t** Zoom = "" + zoomLevel + ""; CurrentAcc = "" + (metersPerPixel * widthInPixels) +  ""; Accuracy = "" + mAccuracy);}Log.e(TAG, ""Zoom = "" + zoomLevel + ""; Accuracy = "" + mAccuracy);zoom = zoomLevel;}if (mZoomToLocation) {mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, zoom));mZoomToLocation = false;} else {mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, zoom), 1, null);}} else {}}@Overridepublic void onPause() {super.onPause();}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putDouble(""longitude"", mLongitude);outState.putDouble(""latitude"", mLatitude);outState.putDouble(""accuracy"", mAccuracy);outState.putString(""iconic_taxon_name"", mIconicTaxonName);super.onSaveInstanceState(outState);}@Overridepublic boolean onPrepareOptionsMenu(Menu menu) {MenuItem layersItem = menu.findItem(R.id.layers);if (mMap != null) {if (mMap.getMapType() == GoogleMap.MAP_TYPE_HYBRID) {layersItem.setTitle(R.string.street);} else {layersItem.setTitle(R.string.satellite);}}return super.onPrepareOptionsMenu(menu);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {MenuInflater inflater = getMenuInflater();inflater.inflate(R.menu.choose_location_menu, menu);return super.onCreateOptionsMenu(menu);}private void onCancel() {mHelper.confirm(getString(R.string.edit_location), getString(R.string.discard_location_changes),new DialogInterface.OnClickListener () {public void onClick (DialogInterface dialog, int buttonId) {setResult(RESULT_CANCELED);finish();}},new DialogInterface.OnClickListener () {public void onClick (DialogInterface dialog, int buttonId) {dialog.cancel();}},R.string.yes, R.string.no);}@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) {if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {onCancel();return false;} else {return super.onKeyDown(keyCode, event);}}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:onCancel();return true;case R.id.save_location:Bundle bundle = new Bundle();float currentZoom = mMap.getCameraPosition().zoom;DisplayMetrics metrics = new DisplayMetrics();getWindowManager().getDefaultDisplay().getMetrics(metrics);int screenWidth = metrics.widthPixels;//////////////double equatorLength = 40075004; // in metersdouble metersPerPixel = equatorLength / 256;int zoomLevel = 1;while (zoomLevel < currentZoom) {metersPerPixel /= 2;++zoomLevel;}double accuracy = (double) ((screenWidth * 0.4 * 0.5) * metersPerPixel);Log.e(TAG, ""Meters per radius = "" + accuracy + ""; zoom = "" + zoomLevel);////////////bundle.putDouble(LATITUDE, mMap.getCameraPosition().target.latitude);bundle.putDouble(LONGITUDE, mMap.getCameraPosition().target.longitude);bundle.putDouble(ACCURACY, accuracy);Intent resultIntent = new Intent();resultIntent.putExtras(bundle);setResult(RESULT_OK, resultIntent);finish();return true;case R.id.layers:if (mMap.getMapType() == GoogleMap.MAP_TYPE_HYBRID) {mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);item.setTitle(R.string.satellite);} else {mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);item.setTitle(R.string.street);}return true;default:return super.onOptionsItemSelected(item);}}private void setUpMapIfNeeded() {if (mMarkerObservations == null) {mMarkerObservations = new HashMap<String, Observation>();}if (mMap == null) {mMap = ((SupportMapFragment)getSupportFragmentManager().findFragmentById(R.id.map)).getMap();// Check if we were successful in obtaining the map.if (mMap != null) {// The Map is verified. It is now safe to manipulate the map.mMap.setMyLocationEnabled(true);if (!mMarkerObservations.isEmpty()) {LatLngBounds.Builder builder = new LatLngBounds.Builder();for (Observation o: mMarkerObservations.values()) {if (o.private_latitude != null && o.private_longitude != null) {builder.include(new LatLng(o.private_latitude, o.private_longitude));} else {builder.include(new LatLng(o.latitude, o.longitude));}}}mMap.clear();MarkerOptions opts = new MarkerOptions().position(new LatLng(mLatitude, mLongitude)).icon(INaturalistMapActivity.observationIcon(mIconicTaxonName));Marker m = mMap.addMarker(opts);}}}@Overridepublic void onLocationChanged(Location location) {if (location != null) {Log.v(""Location Changed"", location.getLatitude() + "" and "" + location.getLongitude());mLocationManager.removeUpdates(this);LatLng camLocation = new LatLng(location.getLatitude(), location.getLongitude());mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(camLocation, 15));}}@Overridepublic void onProviderDisabled(String provider) {// TODO Auto-generated method stub}@Overridepublic void onProviderEnabled(String provider) {// TODO Auto-generated method stub}@Overridepublic void onStatusChanged(String provider, int status, Bundle extras) {// TODO Auto-generated method stub}}",LocationChooserActivity.java,0
200,"/*** Taken from: http://illegalargumentexception.blogspot.com/2009/05/java-using-xpath-with-namespaces-and.html*/package org.inaturalist.android;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.Map;import java.util.Set;import javax.xml.XMLConstants;import javax.xml.namespace.NamespaceContext;/*** An implementation of <a* href=""http://java.sun.com/javase/6/docs/api/javax/xml/namespace/NamespaceContext.html"">* NamespaceContext </a>. Instances are immutable.** @author McDowell*/public final class NamespaceContextMap implementsNamespaceContext {private final Map<String, String> prefixMap;private final Map<String, Set<String>> nsMap;/*** Constructor that takes a map of XML prefix-namespaceURI values. A defensive* copy is made of the map. An IllegalArgumentException will be thrown if the* map attempts to remap the standard prefixes defined in the NamespaceContext* contract.** @param prefixMappings*          a map of prefix:namespaceURI values*/public NamespaceContextMap(Map<String, String> prefixMappings) {prefixMap = createPrefixMap(prefixMappings);nsMap = createNamespaceMap(prefixMap);}/*** Convenience constructor.** @param mappingPairs*          pairs of prefix-namespaceURI values*/public NamespaceContextMap(String... mappingPairs) {this(toMap(mappingPairs));}private static Map<String, String> toMap(String... mappingPairs) {Map<String, String> prefixMappings = new HashMap<String, String>(mappingPairs.length / 2);for (int i = 0; i < mappingPairs.length; i++) {prefixMappings.put(mappingPairs[i], mappingPairs[++i]);}return prefixMappings;}private Map<String, String> createPrefixMap(Map<String, String> prefixMappings) {Map<String, String> prefixMap = new HashMap<String, String>(prefixMappings);addConstant(prefixMap, XMLConstants.XML_NS_PREFIX,XMLConstants.XML_NS_URI);addConstant(prefixMap, XMLConstants.XMLNS_ATTRIBUTE,XMLConstants.XMLNS_ATTRIBUTE_NS_URI);return Collections.unmodifiableMap(prefixMap);}private void addConstant(Map<String, String> prefixMap,String prefix, String nsURI) {String previous = prefixMap.put(prefix, nsURI);if (previous != null && !previous.equals(nsURI)) {throw new IllegalArgumentException(prefix + "" -> ""+ previous + ""; see NamespaceContext contract"");}}private Map<String, Set<String>> createNamespaceMap(Map<String, String> prefixMap) {Map<String, Set<String>> nsMap = new HashMap<String, Set<String>>();for (Map.Entry<String, String> entry : prefixMap.entrySet()) {String nsURI = entry.getValue();Set<String> prefixes = nsMap.get(nsURI);if (prefixes == null) {prefixes = new HashSet<String>();nsMap.put(nsURI, prefixes);}prefixes.add(entry.getKey());}for (Map.Entry<String, Set<String>> entry : nsMap.entrySet()) {Set<String> readOnly = Collections.unmodifiableSet(entry.getValue());entry.setValue(readOnly);}return nsMap;}@Overridepublic String getNamespaceURI(String prefix) {checkNotNull(prefix);String nsURI = prefixMap.get(prefix);return nsURI == null ? XMLConstants.NULL_NS_URI : nsURI;}@Overridepublic String getPrefix(String namespaceURI) {checkNotNull(namespaceURI);Set<String> set = nsMap.get(namespaceURI);return set == null ? null : set.iterator().next();}@Overridepublic Iterator<String> getPrefixes(String namespaceURI) {checkNotNull(namespaceURI);Set<String> set = nsMap.get(namespaceURI);return set.iterator();}private void checkNotNull(String value) {if (value == null) {throw new IllegalArgumentException(""null"");}}/*** @return an unmodifiable map of the mappings in the form prefix-namespaceURI*/public Map<String, String> getMap() {return prefixMap;}}",NamespaceContextMap.java,0
200,package org.inaturalist.android;public class NearByGuidesTab extends BaseGuidesTab {@Overrideprotected boolean requiresLocation() {return true;}@Overrideprotected String getActionName() {return INaturalistService.ACTION_GET_NEAR_BY_GUIDES;}@Overrideprotected String getFilterResultName() {return INaturalistService.ACTION_NEAR_BY_GUIDES_RESULT;}@Overrideprotected String getFilterResultParamName() {return INaturalistService.GUIDES_RESULT;}},NearByGuidesTab.java,0
200,"package org.inaturalist.android;import java.io.Serializable;import java.sql.Timestamp;import java.util.ArrayList;import java.util.HashMap;import org.apache.http.NameValuePair;import org.apache.http.message.BasicNameValuePair;import org.json.JSONException;import org.json.JSONObject;import android.content.ContentUris;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.provider.BaseColumns;import android.util.Log;public class ProjectFieldValue implements BaseColumns, Serializable {public Integer _id;public Integer id;public Timestamp _created_at;public Timestamp _synced_at;public Timestamp _updated_at;public Timestamp created_at;public Timestamp updated_at;public Integer observation_id;public Integer field_id;public String value;public static final String TAG = ""ProjectFieldValue"";public static final String TABLE_NAME = ""project_field_values"";public static final int PROJECT_FIELD_VALUES_URI_CODE = 4801;public static final int PROJECT_FIELD_VALUE_ID_URI_CODE = 4686;public static HashMap<String, String> PROJECTION_MAP;public static final String AUTHORITY = ""org.inaturalist.android.project_field_value"";public static final Uri    CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/project_field_values"");public static final String CONTENT_TYPE = ""vnd.android.cursor.dir/vnd.google.project_field_value"";public static final String CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/vnd.google.project_field_value"";public static final String DEFAULT_SORT_ORDER = ""_id DESC"";public static final String _CREATED_AT = ""_created_at"";public static final String _SYNCED_AT = ""_synced_at"";public static final String _UPDATED_AT = ""_updated_at"";public static final String CREATED_AT = ""created_at"";public static final String OBSERVATION_ID = ""observation_id"";public static final String FIELD_ID = ""field_id"";public static final String VALUE = ""value"";public static final String ID = ""id"";public static final String UPDATED_AT = ""updated_at"";public static final String[] PROJECTION = new String[] {ProjectFieldValue._ID,ProjectFieldValue._CREATED_AT,ProjectFieldValue.OBSERVATION_ID,ProjectFieldValue.FIELD_ID,ProjectFieldValue.VALUE,ProjectFieldValue._SYNCED_AT,ProjectFieldValue._UPDATED_AT,ProjectFieldValue.CREATED_AT,ProjectFieldValue.ID,ProjectFieldValue.UPDATED_AT,};static {PROJECTION_MAP = new HashMap<String, String>();PROJECTION_MAP.put(ProjectFieldValue._ID, ProjectFieldValue._ID);PROJECTION_MAP.put(ProjectFieldValue._CREATED_AT, ProjectFieldValue._CREATED_AT);PROJECTION_MAP.put(ProjectFieldValue._SYNCED_AT, ProjectFieldValue._SYNCED_AT);PROJECTION_MAP.put(ProjectFieldValue._UPDATED_AT, ProjectFieldValue._UPDATED_AT);PROJECTION_MAP.put(ProjectFieldValue.CREATED_AT, ProjectFieldValue.CREATED_AT);PROJECTION_MAP.put(ProjectFieldValue.ID, ProjectFieldValue.ID);PROJECTION_MAP.put(ProjectFieldValue.OBSERVATION_ID, ProjectFieldValue.OBSERVATION_ID);PROJECTION_MAP.put(ProjectFieldValue.FIELD_ID, ProjectFieldValue.FIELD_ID);PROJECTION_MAP.put(ProjectFieldValue.VALUE, ProjectFieldValue.VALUE);PROJECTION_MAP.put(ProjectFieldValue.UPDATED_AT, ProjectFieldValue.UPDATED_AT);}public ProjectFieldValue() {}public ProjectFieldValue(Cursor c) {if (c.getPosition() == -1) c.moveToFirst();BetterCursor bc = new BetterCursor(c);this._id = bc.getInt(_ID);this._created_at = bc.getTimestamp(_CREATED_AT);this._synced_at = bc.getTimestamp(_SYNCED_AT);this._updated_at = bc.getTimestamp(_UPDATED_AT);this.created_at = bc.getTimestamp(CREATED_AT);this.id = bc.getInteger(ID);this.observation_id = bc.getInteger(OBSERVATION_ID);this.updated_at = bc.getTimestamp(UPDATED_AT);this.field_id = bc.getInteger(FIELD_ID);this.value = bc.getString(VALUE);}public ProjectFieldValue(BetterJSONObject o) {this._created_at = o.getTimestamp(""_created_at"");this._synced_at = o.getTimestamp(""_synced_at"");this._updated_at = o.getTimestamp(""_updated_at"");this.created_at = o.getTimestamp(""created_at"");this.id = o.getInteger(""id"");this.observation_id = o.getInteger(""observation_id"");this.updated_at = o.getTimestamp(""updated_at"");this.field_id = new BetterJSONObject(o.getJSONObject(""observation_field"")).getInteger(""id"");if (field_id == null)this.field_id = o.getInt(""observation_field_id"");this.value = o.getString(""value"");}@Overridepublic String toString() {return ""ProjectFieldValue(id: "" + id + "", _id: "" + _id + "")"";}public Uri getUri() {if (_id == null) {return null;} else {return ContentUris.withAppendedId(CONTENT_URI, _id);}}public ContentValues getContentValues() {ContentValues cv = new ContentValues();if (created_at != null) { cv.put(CREATED_AT, created_at.getTime()); }if (id != null) { cv.put(ID, id); }cv.put(OBSERVATION_ID, observation_id);cv.put(FIELD_ID, field_id);cv.put(VALUE, value);if (updated_at != null) { cv.put(UPDATED_AT, updated_at.getTime()); }return cv;}public static String sqlCreate() {return ""CREATE TABLE "" + TABLE_NAME + "" (""+ ProjectFieldValue._ID + "" INTEGER PRIMARY KEY,""+ ""_created_at INTEGER,""+ ""_synced_at INTEGER,""+ ""_updated_at INTEGER,""+ ""created_at INTEGER,""+ ""id INTEGER,""+ ""observation_id INTEGER,""+ ""updated_at INTEGER,""+ ""value TEXT,""+ ""field_id INTEGER,""+ ""UNIQUE(field_id, observation_id) ON CONFLICT REPLACE""+ "");"";}}",ProjectFieldValue.java,0
200,"package org.inaturalist.android;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.UnsupportedEncodingException;import java.net.MalformedURLException;import java.net.URL;import java.net.URLConnection;import java.net.URLEncoder;import java.nio.charset.Charset;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Hashtable;import java.util.List;import java.util.Locale;import java.util.Set;import java.util.UUID;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.http.Header;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.NameValuePair;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpDelete;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpHead;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.methods.HttpPut;import org.apache.http.client.methods.HttpRequestBase;import org.apache.http.client.params.ClientPNames;import org.apache.http.entity.mime.HttpMultipartMode;import org.apache.http.entity.mime.MultipartEntity;import org.apache.http.entity.mime.content.FileBody;import org.apache.http.entity.mime.content.StringBody;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.client.DefaultRedirectHandler;import org.apache.http.message.BasicNameValuePair;import org.apache.http.params.CoreProtocolPNames;import org.apache.http.protocol.HttpContext;import org.apache.http.util.EntityUtils;import org.apache.sanselan.ImageReadException;import org.apache.sanselan.ImageWriteException;import org.apache.sanselan.Sanselan;import org.apache.sanselan.common.IImageMetadata;import org.apache.sanselan.formats.jpeg.JpegImageMetadata;import org.apache.sanselan.formats.jpeg.exifRewrite.ExifRewriter;import org.apache.sanselan.formats.tiff.TiffImageMetadata;import org.apache.sanselan.formats.tiff.constants.TagInfo;import org.apache.sanselan.formats.tiff.constants.TiffConstants;import org.apache.sanselan.formats.tiff.write.TiffOutputDirectory;import org.apache.sanselan.formats.tiff.write.TiffOutputField;import org.apache.sanselan.formats.tiff.write.TiffOutputSet;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.crashlytics.android.Crashlytics;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;import com.google.android.gms.common.GooglePlayServicesUtil;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.location.LocationServices;import android.annotation.SuppressLint;import android.app.IntentService;import android.app.NotificationManager;import android.content.ClipData;import android.content.ClipboardManager;import android.content.ContentUris;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.database.Cursor;import android.database.SQLException;import android.database.sqlite.SQLiteConstraintException;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.location.Criteria;import android.location.Location;import android.location.LocationManager;import android.media.ExifInterface;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.provider.MediaStore;import android.util.Base64;import android.util.Log;import android.widget.Toast;public class INaturalistService extends IntentService implements ConnectionCallbacks, OnConnectionFailedListener {// How many observations should we initially download for the userprivate static final int INITIAL_SYNC_OBSERVATION_COUNT = 100;private boolean mGetLocationForProjects = false; // if true -> we assume it's for near by guidespublic static final String IS_SHARED_ON_APP = ""is_shared_on_app"";public static final String USER = ""user"";public static final String IDENTIFICATION_ID = ""identification_id"";public static final String OBSERVATION_ID = ""observation_id"";public static final String COMMENT_ID = ""comment_id"";public static final String OBSERVATION_RESULT = ""observation_result"";public static final String USER_OBSERVATIONS_RESULT = ""user_observations_result"";public static final String OBSERVATION_JSON_RESULT = ""observation_json_result"";public static final String PROJECTS_RESULT = ""projects_result"";public static final String IDENTIFICATIONS_RESULT = ""identifications_result"";public static final String LIFE_LIST_RESULT = ""life_list_result"";public static final String USER_DETAILS_RESULT = ""user_details_result"";public static final String ADD_OBSERVATION_TO_PROJECT_RESULT = ""add_observation_to_project_result"";public static final String TAXON_ID = ""taxon_id"";public static final String COMMENT_BODY = ""comment_body"";public static final String IDENTIFICATION_BODY = ""id_body"";public static final String PROJECT_ID = ""project_id"";public static final String CHECK_LIST_ID = ""check_list_id"";public static final String ACTION_CHECK_LIST_RESULT = ""action_check_list_result"";public static final String CHECK_LIST_RESULT = ""check_list_result"";public static final String ACTION_GET_TAXON_RESULT = ""action_get_taxon_result"";public static final String TAXON_RESULT = ""taxon_result"";public static final String GUIDE_XML_RESULT = ""guide_xml_result"";public static final String EMAIL = ""email"";public static final String USERNAME = ""username"";public static final String OBSERVATIONS = ""observations"";public static final String IDENTIFICATIONS = ""identifications"";public static final String LIFE_LIST_ID = ""life_list_id"";public static final String PASSWORD = ""password"";public static final String LICENSE = ""license"";public static final String RESULTS = ""results"";public static final String LIFE_LIST = ""life_list"";public static final String REGISTER_USER_ERROR = ""error"";public static final String REGISTER_USER_STATUS = ""status"";public static final int NEAR_BY_OBSERVATIONS_PER_PAGE = 25;public static String TAG = ""INaturalistService"";public static String HOST = ""https://www.inaturalist.org"";public static String API_HOST = ""https://api.inaturalist.org/v1"";public static String USER_AGENT = ""iNaturalist/"" + INaturalistApp.VERSION + "" ("" +""Android "" + System.getProperty(""os.version"") + "" "" + android.os.Build.VERSION.INCREMENTAL + ""; "" +""SDK "" + android.os.Build.VERSION.SDK_INT + ""; "" +android.os.Build.DEVICE + "" "" +android.os.Build.MODEL + "" "" +android.os.Build.PRODUCT + "")"";public static String ACTION_REGISTER_USER = ""register_user"";public static String ACTION_PASSIVE_SYNC = ""passive_sync"";public static String ACTION_ADD_IDENTIFICATION = ""add_identification"";public static String ACTION_ADD_FAVORITE = ""add_favorite"";public static String ACTION_REMOVE_FAVORITE = ""remove_favorite"";public static String ACTION_GET_TAXON = ""get_taxon"";public static String ACTION_FIRST_SYNC = ""first_sync"";public static String ACTION_PULL_OBSERVATIONS = ""pull_observations"";public static String ACTION_GET_OBSERVATION = ""get_observation"";public static String ACTION_FLAG_OBSERVATION_AS_CAPTIVE = ""flag_observation_as_captive"";public static String ACTION_GET_CHECK_LIST = ""get_check_list"";public static String ACTION_JOIN_PROJECT = ""join_project"";public static String ACTION_LEAVE_PROJECT = ""leave_project"";public static String ACTION_GET_JOINED_PROJECTS = ""get_joined_projects"";public static String ACTION_GET_JOINED_PROJECTS_ONLINE = ""get_joined_projects_online"";public static String ACTION_GET_NEARBY_PROJECTS = ""get_nearby_projects"";public static String ACTION_GET_FEATURED_PROJECTS = ""get_featured_projects"";public static String ACTION_ADD_OBSERVATION_TO_PROJECT = ""add_observation_to_project"";public static String ACTION_REMOVE_OBSERVATION_FROM_PROJECT = ""remove_observation_from_project"";public static String ACTION_GET_ALL_GUIDES = ""get_all_guides"";public static String ACTION_GET_MY_GUIDES = ""get_my_guides"";public static String ACTION_GET_NEAR_BY_GUIDES = ""get_near_by_guides"";public static String ACTION_TAXA_FOR_GUIDE = ""get_taxa_for_guide"";public static String ACTION_GET_USER_DETAILS = ""get_user_details"";public static String ACTION_GET_PROJECT_NEWS = ""get_project_news"";public static String ACTION_GET_NEWS = ""get_news"";public static String ACTION_GET_PROJECT_OBSERVATIONS = ""get_project_observations"";public static String ACTION_GET_PROJECT_SPECIES = ""get_project_species"";public static String ACTION_GET_PROJECT_OBSERVERS = ""get_project_observers"";public static String ACTION_GET_PROJECT_IDENTIFIERS = ""get_project_identifiers"";public static String ACTION_PROJECT_OBSERVATIONS_RESULT = ""get_project_observations_result"";public static String ACTION_PROJECT_NEWS_RESULT = ""get_project_news_result"";public static String ACTION_NEWS_RESULT = ""get_news_result"";public static String ACTION_PROJECT_SPECIES_RESULT = ""get_project_species_result"";public static String ACTION_PROJECT_OBSERVERS_RESULT = ""get_project_observers_result"";public static String ACTION_PROJECT_IDENTIFIERS_RESULT = ""get_project_identifiers_result"";public static String ACTION_SYNC = ""sync"";public static String ACTION_NEARBY = ""nearby"";public static String ACTION_AGREE_ID = ""agree_id"";public static String ACTION_REMOVE_ID = ""remove_id"";public static String ACTION_GUIDE_ID = ""guide_id"";public static String ACTION_ADD_COMMENT = ""add_comment"";public static String ACTION_UPDATE_COMMENT = ""update_comment"";public static String ACTION_DELETE_COMMENT = ""delete_comment"";public static String ACTION_SYNC_COMPLETE = ""sync_complete"";public static String ACTION_OBSERVATION_RESULT = ""observation_result"";public static String ACTION_JOINED_PROJECTS_RESULT = ""joined_projects_result"";public static String ACTION_NEARBY_PROJECTS_RESULT = ""nearby_projects_result"";public static String ACTION_FEATURED_PROJECTS_RESULT = ""featured_projects_result"";public static String ACTION_ALL_GUIDES_RESULT = ""all_guides_results"";public static String ACTION_MY_GUIDES_RESULT = ""my_guides_results"";public static String ACTION_NEAR_BY_GUIDES_RESULT = ""near_by_guides_results"";public static String ACTION_TAXA_FOR_GUIDES_RESULT = ""taxa_for_guides_results"";public static String ACTION_GET_USER_DETAILS_RESULT = ""get_user_details_result"";public static String ACTION_GUIDE_XML_RESULT = ""guide_xml_result"";public static String ACTION_GUIDE_XML = ""guide_xml"";public static String GUIDES_RESULT = ""guides_result"";public static String ACTION_REGISTER_USER_RESULT = ""register_user_result"";public static String TAXA_GUIDE_RESULT = ""taxa_guide_result"";public static String ACTION_GET_SPECIFIC_USER_DETAILS = ""get_specific_user_details"";public static String ACTION_GET_LIFE_LIST = ""get_life_list"";public static String ACTION_GET_USER_IDENTIFICATIONS = ""get_user_identifications"";public static String ACTION_GET_USER_OBSERVATIONS = ""get_user_observations"";public static Integer SYNC_OBSERVATIONS_NOTIFICATION = 1;public static Integer SYNC_PHOTOS_NOTIFICATION = 2;public static Integer AUTH_NOTIFICATION = 3;private String mLogin;private String mCredentials;private SharedPreferences mPreferences;private boolean mPassive;private INaturalistApp mApp;private LoginType mLoginType;private boolean mIsStopped = false;private boolean mIsSyncing;private Handler mHandler;private GoogleApiClient mLocationClient;private ArrayList<SerializableJSONArray> mProjectObservations;private Hashtable<Integer, Hashtable<Integer, ProjectFieldValue>> mProjectFieldValues;private Header[] mResponseHeaders = null;private JSONArray mResponseErrors;private String mNearByObservationsUrl;public enum LoginType {PASSWORD,GOOGLE,FACEBOOK,OAUTH_PASSWORD};public INaturalistService() {super(""INaturalistService"");mHandler = new Handler();}@Overrideprotected void onHandleIntent(Intent intent) {mPreferences = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);mLogin = mPreferences.getString(""username"", null);mCredentials = mPreferences.getString(""credentials"", null);mLoginType = LoginType.valueOf(mPreferences.getString(""login_type"", LoginType.OAUTH_PASSWORD.toString()));mApp = (INaturalistApp) getApplicationContext();String action = intent.getAction();if (action == null) return;mPassive = action.equals(ACTION_PASSIVE_SYNC);Log.d(TAG, ""Service: "" + action);try {if (action.equals(ACTION_NEARBY)) {getNearbyObservations(intent);} else if (action.equals(ACTION_FIRST_SYNC)) {mIsSyncing = true;mApp.setIsSyncing(mIsSyncing);saveJoinedProjects();getUserObservations(INITIAL_SYNC_OBSERVATION_COUNT);syncObservationFields();postProjectObservations();} else if (action.equals(ACTION_AGREE_ID)) {int observationId = intent.getIntExtra(OBSERVATION_ID, 0);int taxonId = intent.getIntExtra(TAXON_ID, 0);JSONObject result = agreeIdentification(observationId, taxonId);if (result != null) {// Reload the observation at the end (need to refresh comment/ID list)Observation observation = getObservation(observationId);Intent reply = new Intent(ACTION_OBSERVATION_RESULT);reply.putExtra(OBSERVATION_RESULT, observation);sendBroadcast(reply);}} else if (action.equals(ACTION_REMOVE_ID)) {int id = intent.getIntExtra(IDENTIFICATION_ID, 0);int observationId = intent.getIntExtra(OBSERVATION_ID, 0);JSONObject result = removeIdentification(id);// Reload the observation at the end (need to refresh comment/ID list)Observation observation = getObservation(observationId);Intent reply = new Intent(ACTION_OBSERVATION_RESULT);reply.putExtra(OBSERVATION_RESULT, observation);sendBroadcast(reply);} else if (action.equals(ACTION_ADD_FAVORITE)) {int observationId = intent.getIntExtra(OBSERVATION_ID, 0);addFavorite(observationId);} else if (action.equals(ACTION_REMOVE_FAVORITE)) {int observationId = intent.getIntExtra(OBSERVATION_ID, 0);removeFavorite(observationId);} else if (action.equals(ACTION_ADD_IDENTIFICATION)) {int observationId = intent.getIntExtra(OBSERVATION_ID, 0);int taxonId = intent.getIntExtra(TAXON_ID, 0);String body = intent.getStringExtra(IDENTIFICATION_BODY);addIdentification(observationId, taxonId, body);} else if (action.equals(ACTION_REGISTER_USER)) {String email = intent.getStringExtra(EMAIL);String password = intent.getStringExtra(PASSWORD);String username = intent.getStringExtra(USERNAME);String license = intent.getStringExtra(LICENSE);String error = registerUser(email, password, username, license);Intent reply = new Intent(ACTION_REGISTER_USER_RESULT);reply.putExtra(REGISTER_USER_STATUS, error == null);reply.putExtra(REGISTER_USER_ERROR, error);sendBroadcast(reply);} else if (action.equals(ACTION_GET_PROJECT_NEWS)) {int projectId = intent.getIntExtra(PROJECT_ID, 0);SerializableJSONArray results = getProjectNews(projectId);Intent reply = new Intent(ACTION_PROJECT_NEWS_RESULT);reply.putExtra(RESULTS, results);sendBroadcast(reply);} else if (action.equals(ACTION_GET_PROJECT_OBSERVATIONS)) {int projectId = intent.getIntExtra(PROJECT_ID, 0);BetterJSONObject results = getProjectObservations(projectId);mApp.setServiceResult(ACTION_PROJECT_OBSERVATIONS_RESULT, results);Intent reply = new Intent(ACTION_PROJECT_OBSERVATIONS_RESULT);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else if (action.equals(ACTION_GET_PROJECT_IDENTIFIERS)) {int projectId = intent.getIntExtra(PROJECT_ID, 0);BetterJSONObject results = getProjectIdentifiers(projectId);Intent reply = new Intent(ACTION_PROJECT_IDENTIFIERS_RESULT);reply.putExtra(RESULTS, results);sendBroadcast(reply);} else if (action.equals(ACTION_GET_PROJECT_OBSERVERS)) {int projectId = intent.getIntExtra(PROJECT_ID, 0);BetterJSONObject results = getProjectObservers(projectId);Intent reply = new Intent(ACTION_PROJECT_OBSERVERS_RESULT);reply.putExtra(RESULTS, results);sendBroadcast(reply);} else if (action.equals(ACTION_GET_PROJECT_SPECIES)) {int projectId = intent.getIntExtra(PROJECT_ID, 0);BetterJSONObject results = getProjectSpecies(projectId);Intent reply = new Intent(ACTION_PROJECT_SPECIES_RESULT);reply.putExtra(RESULTS, results);sendBroadcast(reply);} else if (action.equals(ACTION_GET_TAXON)) {int taxonId = intent.getIntExtra(TAXON_ID, 0);BetterJSONObject taxon = getTaxon(taxonId);Intent reply = new Intent(ACTION_GET_TAXON_RESULT);reply.putExtra(TAXON_RESULT, taxon);sendBroadcast(reply);} else if (action.equals(ACTION_GET_SPECIFIC_USER_DETAILS)) {String username = intent.getStringExtra(USERNAME);BetterJSONObject user = getUserDetails(username);Intent reply = new Intent(USER_DETAILS_RESULT);reply.putExtra(USER, user);sendBroadcast(reply);} else if (action.equals(ACTION_GET_LIFE_LIST)) {int lifeListId = intent.getIntExtra(LIFE_LIST_ID, 0);BetterJSONObject lifeList = getUserLifeList(lifeListId);Intent reply = new Intent(LIFE_LIST_RESULT);mApp.setServiceResult(LIFE_LIST_RESULT, lifeList);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else if (action.equals(ACTION_GET_USER_OBSERVATIONS)) {String username = intent.getStringExtra(USERNAME);SerializableJSONArray observations = getUserObservations(username);Intent reply = new Intent(USER_OBSERVATIONS_RESULT);mApp.setServiceResult(USER_OBSERVATIONS_RESULT, observations);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else if (action.equals(ACTION_GET_USER_IDENTIFICATIONS)) {String username = intent.getStringExtra(USERNAME);SerializableJSONArray identifications = getUserIdentifications(username);Intent reply = new Intent(IDENTIFICATIONS_RESULT);mApp.setServiceResult(IDENTIFICATIONS_RESULT, identifications);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else if (action.equals(ACTION_ADD_COMMENT)) {int observationId = intent.getIntExtra(OBSERVATION_ID, 0);String body = intent.getStringExtra(COMMENT_BODY);addComment(observationId, body);// Reload the observation at the end (need to refresh comment/ID list)Observation observation = getObservation(observationId);Intent reply = new Intent(ACTION_OBSERVATION_RESULT);reply.putExtra(OBSERVATION_RESULT, observation);sendBroadcast(reply);} else if (action.equals(ACTION_UPDATE_COMMENT)) {int observationId = intent.getIntExtra(OBSERVATION_ID, 0);int commentId = intent.getIntExtra(COMMENT_ID, 0);String body = intent.getStringExtra(COMMENT_BODY);updateComment(commentId, observationId, body);// Reload the observation at the end (need to refresh comment/ID list)Observation observation = getObservation(observationId);Intent reply = new Intent(ACTION_OBSERVATION_RESULT);reply.putExtra(OBSERVATION_RESULT, observation);sendBroadcast(reply);} else if (action.equals(ACTION_DELETE_COMMENT)) {int observationId = intent.getIntExtra(OBSERVATION_ID, 0);int commentId = intent.getIntExtra(COMMENT_ID, 0);deleteComment(commentId);// Reload the observation at the end (need to refresh comment/ID list)Observation observation = getObservation(observationId);Intent reply = new Intent(ACTION_OBSERVATION_RESULT);reply.putExtra(OBSERVATION_RESULT, observation);sendBroadcast(reply);} else if (action.equals(ACTION_GUIDE_XML)) {int guideId = intent.getIntExtra(ACTION_GUIDE_ID, 0);String guideXMLFilename = getGuideXML(guideId);if (guideXMLFilename == null) {// Failed to get the guide XML - try and find the offline version, if availableGuideXML guideXml = new GuideXML(this, String.valueOf(guideId));if (guideXml.isGuideDownloaded()) {guideXMLFilename = guideXml.getOfflineGuideXmlFilePath();}}Intent reply = new Intent(ACTION_GUIDE_XML_RESULT);reply.putExtra(GUIDE_XML_RESULT, guideXMLFilename);sendBroadcast(reply);} else if (action.equals(ACTION_GET_USER_DETAILS)) {BetterJSONObject user = getUserDetails();Intent reply = new Intent(ACTION_GET_USER_DETAILS_RESULT);reply.putExtra(USER, user);sendBroadcast(reply);} else if (action.equals(ACTION_TAXA_FOR_GUIDE)) {int guideId = intent.getIntExtra(ACTION_GUIDE_ID, 0);SerializableJSONArray taxa = getTaxaForGuide(guideId);mApp.setServiceResult(ACTION_TAXA_FOR_GUIDES_RESULT, taxa);Intent reply = new Intent(ACTION_TAXA_FOR_GUIDES_RESULT);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else if (action.equals(ACTION_GET_ALL_GUIDES)) {SerializableJSONArray guides = getAllGuides();mApp.setServiceResult(ACTION_ALL_GUIDES_RESULT, guides);Intent reply = new Intent(ACTION_ALL_GUIDES_RESULT);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else if (action.equals(ACTION_GET_MY_GUIDES)) {SerializableJSONArray guides = null;guides = getMyGuides();Intent reply = new Intent(ACTION_MY_GUIDES_RESULT);reply.putExtra(GUIDES_RESULT, guides);sendBroadcast(reply);} else if (action.equals(ACTION_GET_NEAR_BY_GUIDES)) {if (!mApp.isLocationEnabled(null)) {// No location enabledIntent reply = new Intent(ACTION_NEAR_BY_GUIDES_RESULT);reply.putExtra(GUIDES_RESULT, new SerializableJSONArray());sendBroadcast(reply);} else {int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getApplicationContext());// If Google Play services is availableif (ConnectionResult.SUCCESS == resultCode) {// Use Google Location Services to determine locationmLocationClient = new GoogleApiClient.Builder(this).addApi(LocationServices.API).addConnectionCallbacks(this).addOnConnectionFailedListener(this).build();mLocationClient.connect();// Only once we're connected - we'll call getNearByGuides()mGetLocationForProjects = false;} else {// Use GPS for the locationSerializableJSONArray guides = getNearByGuides(false);Intent reply = new Intent(ACTION_NEAR_BY_GUIDES_RESULT);reply.putExtra(GUIDES_RESULT, guides);sendBroadcast(reply);}}} else if (action.equals(ACTION_GET_NEARBY_PROJECTS)) {if (!mApp.isLocationEnabled(null)) {// No location enabledIntent reply = new Intent(ACTION_NEARBY_PROJECTS_RESULT);mApp.setServiceResult(ACTION_NEARBY_PROJECTS_RESULT, new SerializableJSONArray());reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else {int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getApplicationContext());// If Google Play services is availableif (ConnectionResult.SUCCESS == resultCode) {// Use Google Location Services to determine locationmLocationClient = new GoogleApiClient.Builder(this).addApi(LocationServices.API).addConnectionCallbacks(this).addOnConnectionFailedListener(this).build();mLocationClient.connect();// Only once we're connected - we'll call getNearByProjects()mGetLocationForProjects = true;} else {// Use GPS for the locationSerializableJSONArray projects = getNearByProjects(false);Intent reply = new Intent(ACTION_NEARBY_PROJECTS_RESULT);mApp.setServiceResult(ACTION_NEARBY_PROJECTS_RESULT, projects);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);}}} else if (action.equals(ACTION_GET_FEATURED_PROJECTS)) {SerializableJSONArray projects = getFeaturedProjects();Intent reply = new Intent(ACTION_FEATURED_PROJECTS_RESULT);reply.putExtra(PROJECTS_RESULT, projects);sendBroadcast(reply);} else if (action.equals(ACTION_GET_JOINED_PROJECTS_ONLINE)) {SerializableJSONArray projects = null;if (mCredentials != null) {projects = getJoinedProjects();}Intent reply = new Intent(ACTION_JOINED_PROJECTS_RESULT);mApp.setServiceResult(ACTION_JOINED_PROJECTS_RESULT, projects);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);} else if (action.equals(ACTION_GET_JOINED_PROJECTS)) {SerializableJSONArray projects = null;if (mCredentials != null) {projects = getJoinedProjectsOffline();}Intent reply = new Intent(ACTION_JOINED_PROJECTS_RESULT);reply.putExtra(PROJECTS_RESULT, projects);sendBroadcast(reply);} else if (action.equals(ACTION_REMOVE_OBSERVATION_FROM_PROJECT)) {int observationId = intent.getExtras().getInt(OBSERVATION_ID);int projectId = intent.getExtras().getInt(PROJECT_ID);BetterJSONObject result = removeObservationFromProject(observationId, projectId);} else if (action.equals(ACTION_ADD_OBSERVATION_TO_PROJECT)) {int observationId = intent.getExtras().getInt(OBSERVATION_ID);int projectId = intent.getExtras().getInt(PROJECT_ID);BetterJSONObject result = addObservationToProject(observationId, projectId);Intent reply = new Intent(ADD_OBSERVATION_TO_PROJECT_RESULT);reply.putExtra(ADD_OBSERVATION_TO_PROJECT_RESULT, result);sendBroadcast(reply);} else if (action.equals(ACTION_GET_CHECK_LIST)) {int id = intent.getExtras().getInt(CHECK_LIST_ID);SerializableJSONArray checkList = getCheckList(id);Intent reply = new Intent(ACTION_CHECK_LIST_RESULT);reply.putExtra(CHECK_LIST_RESULT, checkList);sendBroadcast(reply);} else if (action.equals(ACTION_FLAG_OBSERVATION_AS_CAPTIVE)) {int id = intent.getExtras().getInt(OBSERVATION_ID);flagObservationAsCaptive(id);} else if (action.equals(ACTION_GET_NEWS)) {SerializableJSONArray news = getNews();Intent reply = new Intent(ACTION_NEWS_RESULT);reply.putExtra(RESULTS, news);sendBroadcast(reply);} else if (action.equals(ACTION_GET_OBSERVATION)) {int id = intent.getExtras().getInt(OBSERVATION_ID);JSONObject observationJson = getObservationJson(id);Observation observation = observationJson == null ? null : new Observation(new BetterJSONObject(observationJson));Intent reply = new Intent(ACTION_OBSERVATION_RESULT);reply.putExtra(OBSERVATION_RESULT, observation);reply.putExtra(OBSERVATION_JSON_RESULT, observationJson != null ? observationJson.toString() : null);sendBroadcast(reply);} else if (action.equals(ACTION_JOIN_PROJECT)) {int id = intent.getExtras().getInt(PROJECT_ID);joinProject(id);} else if (action.equals(ACTION_LEAVE_PROJECT)) {int id = intent.getExtras().getInt(PROJECT_ID);leaveProject(id);} else if (action.equals(ACTION_PULL_OBSERVATIONS)) {// Download observations without uploading any new onesmIsSyncing = true;mApp.setIsSyncing(mIsSyncing);getUserObservations(0);// Update last sync timelong lastSync = System.currentTimeMillis();mPreferences.edit().putLong(""last_sync_time"", lastSync).commit();mPreferences.edit().putLong(""last_user_details_refresh_time"", 0); // Force to refresh user details} else {mIsSyncing = true;mApp.setIsSyncing(mIsSyncing);syncObservations();// Update last sync timelong lastSync = System.currentTimeMillis();mPreferences.edit().putLong(""last_sync_time"", lastSync).commit();}} catch (CancelSyncException e) {mApp.setCancelSync(false);mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);mApp.sweepingNotify(SYNC_OBSERVATIONS_NOTIFICATION,getString(R.string.syncing_canceled),getString(R.string.syncing_canceled),getString(R.string.syncing_canceled));} catch (AuthenticationException e) {if (!mPassive) {requestCredentials();}} finally {if (mIsSyncing) {mIsSyncing = false;mApp.setIsSyncing(mIsSyncing);Log.i(TAG, ""Sending ACTION_SYNC_COMPLETE"");// Notify the rest of the app of the completion of the syncIntent reply = new Intent(ACTION_SYNC_COMPLETE);sendBroadcast(reply);}}}private void syncObservations() throws AuthenticationException, CancelSyncException {deleteObservations(); // Delete locally-removed observationsgetUserObservations(0); // First, download remote observations (new/updated)postObservations(); // Next, update local-to-remote observationssaveJoinedProjects();syncObservationFields();postPhotos();postProjectObservations();redownloadOldObservations();mPreferences.edit().putLong(""last_user_details_refresh_time"", 0); // Force to refresh user details}// Re-download any observations that have photos saved in the ""old"" wayprivate void redownloadOldObservations() throws AuthenticationException {// Find all observations that have photos saved in the old wayCursor c = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""(photo_filename IS NULL) AND (photo_url IS NULL)"",null,ObservationPhoto.DEFAULT_SORT_ORDER);c.moveToFirst();while (!c.isAfterLast()) {Integer obsId = c.getInt(c.getColumnIndexOrThrow(ObservationPhoto.OBSERVATION_ID));// Delete the observation photoInteger obsPhotoId = c.getInt(c.getColumnIndexOrThrow(ObservationPhoto.ID));getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""id = "" + obsPhotoId, null);// Re-download this observationString url = HOST + ""/observations/"" + Uri.encode(mLogin) + "".json?extra=observation_photos,projects,fields"";Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();url += ""&locale="" + deviceLanguage;JSONArray json = get(url, true);if (json != null && json.length() > 0) {syncJson(json, true);}c.moveToNext();}c.close();}private BetterJSONObject getTaxon(int id) throws AuthenticationException {Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage = deviceLocale.getLanguage();String url = String.format(""%s/taxa/%d.json?locale=%s"", HOST, id, deviceLanguage);JSONArray json = get(url);if (json == null || json.length() == 0) { return null; }JSONObject res;try {res = (JSONObject) json.get(0);} catch (JSONException e) {return null;}return new BetterJSONObject(res);}private void postProjectObservations() throws AuthenticationException, CancelSyncException {// First, delete any project-observations that were deleted by the userCursor c = getContentResolver().query(ProjectObservation.CONTENT_URI,ProjectObservation.PROJECTION,""is_deleted = 1"",null,ProjectObservation.DEFAULT_SORT_ORDER);c.moveToFirst();while (c.isAfterLast() == false) {checkForCancelSync();ProjectObservation projectObservation = new ProjectObservation(c);// Clean the errors for the observationmApp.setErrorsForObservation(projectObservation.observation_id, projectObservation.project_id, new JSONArray());try {// Remove obs from projectremoveObservationFromProject(projectObservation.observation_id, projectObservation.project_id);} catch (Exception exc) {// In case we're trying to delete a project-observation that wasn't synced yet}c.moveToNext();}// Now it's safe to delete all of the project-observations locallygetContentResolver().delete(ProjectObservation.CONTENT_URI, ""is_deleted = 1"", null);// Next, add new project observationsc = getContentResolver().query(ProjectObservation.CONTENT_URI,ProjectObservation.PROJECTION,""is_new = 1"",null,ProjectObservation.DEFAULT_SORT_ORDER);c.moveToFirst();while (c.isAfterLast() == false) {checkForCancelSync();ProjectObservation projectObservation = new ProjectObservation(c);BetterJSONObject result = addObservationToProject(projectObservation.observation_id, projectObservation.project_id);mApp.setObservationIdBeingSynced(projectObservation.observation_id);if (mResponseErrors != null) {SerializableJSONArray errors = new SerializableJSONArray(mResponseErrors);// Couldn't add the observation to the project (probably didn't pass validation)String error;try {error = errors.getJSONArray().getString(0);} catch (JSONException e) {e.printStackTrace();c.moveToNext();continue;}Cursor c2 = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""id = '""+projectObservation.observation_id+""'"", null, Observation.DEFAULT_SORT_ORDER);c2.moveToFirst();if (c2.getCount() == 0) {break;}Observation observation = new Observation(c2);c2.close();c2 = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, ""id = '""+projectObservation.project_id+""'"", null, Project.DEFAULT_SORT_ORDER);c2.moveToFirst();if (c2.getCount() == 0) {break;}Project project = new Project(c2);c2.close();// Remember the errors for this observation (to be shown in the observation editor screen)JSONArray formattedErrors = new JSONArray();JSONArray unformattedErrors = errors.getJSONArray();for (int i = 0; i < unformattedErrors.length(); i++) {try {formattedErrors.put(String.format(getString(R.string.failed_to_add_to_project), project.title, unformattedErrors.getString(i)));} catch (JSONException e) {e.printStackTrace();}}mApp.setErrorsForObservation(observation.id, project.id, formattedErrors);final String errorMessage = String.format(getString(R.string.failed_to_add_obs_to_project),observation.species_guess == null ? getString(R.string.unknown) : observation.species_guess, project.title, error);// Notify usermApp.sweepingNotify(SYNC_OBSERVATIONS_NOTIFICATION,getString(R.string.syncing_observations),errorMessage,getString(R.string.syncing));// Display toast in this main thread handler (since otherwise it won't get displayed)mHandler.post(new Runnable() {@Overridepublic void run() {Toast.makeText(getApplicationContext(), errorMessage, Toast.LENGTH_LONG).show();}});} else {// Unmark as newprojectObservation.is_new = false;ContentValues cv = projectObservation.getContentValues();getContentResolver().update(projectObservation.getUri(), cv, null, null);// Clean the errors for the observationmApp.setErrorsForObservation(projectObservation.observation_id, projectObservation.project_id, new JSONArray());}c.moveToNext();}mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);// Finally, retrieve all project observationsfor (int j = 0; j < mProjectObservations.size(); j++) {JSONArray projectObservations = mProjectObservations.get(j).getJSONArray();for (int i = 0; i < projectObservations.length(); i++) {JSONObject jsonProjectObservation;try {jsonProjectObservation = projectObservations.getJSONObject(i);ProjectObservation projectObservation = new ProjectObservation(new BetterJSONObject(jsonProjectObservation));ContentValues cv = projectObservation.getContentValues();getContentResolver().insert(ProjectObservation.CONTENT_URI, cv);} catch (JSONException e) {e.printStackTrace();}}}}private void saveJoinedProjects() throws AuthenticationException {SerializableJSONArray projects = getJoinedProjects();if (projects != null) {JSONArray arr = projects.getJSONArray();try {// First, delete all joined projectsgetContentResolver().delete(Project.CONTENT_URI, null, null);} catch (Exception exc) {exc.printStackTrace();return;}// Next, add the new joined projectsfor (int i = 0; i < arr.length(); i++) {try {JSONObject jsonProject = arr.getJSONObject(i);Project project = new Project(new BetterJSONObject(jsonProject));ContentValues cv = project.getContentValues();getContentResolver().insert(Project.CONTENT_URI, cv);} catch (JSONException e) {e.printStackTrace();}}}}private void deleteObservations() throws AuthenticationException, CancelSyncException {// Remotely delete any locally-removed observationsCursor c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""is_deleted = 1 AND user_login = '""+mLogin+""'"",null,Observation.DEFAULT_SORT_ORDER);// for each observation DELETE to /observations/:idArrayList<Integer> obsIds = new ArrayList<Integer>();c.moveToFirst();while (c.isAfterLast() == false) {Observation observation = new Observation(c);delete(HOST + ""/observations/"" + observation.id + "".json"", null);obsIds.add(observation.id);c.moveToNext();}// Now it's safe to delete all of the observations locallygetContentResolver().delete(Observation.CONTENT_URI, ""is_deleted = 1"", null);// Delete associated project-fields and photosint count1 = getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""observation_id in ("" + StringUtils.join(obsIds, "","") + "")"", null);int count2 = getContentResolver().delete(ProjectObservation.CONTENT_URI, ""observation_id in ("" + StringUtils.join(obsIds, "","") + "")"", null);int count3 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, ""observation_id in ("" + StringUtils.join(obsIds, "","") + "")"", null);checkForCancelSync();}private void checkForCancelSync() throws CancelSyncException {if (mApp.getCancelSync()) throw new CancelSyncException();}private JSONObject removeFavorite(int observationId) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();JSONArray result = delete(HOST + ""/votes/unvote/observation/"" + observationId + "".json"", null);if (result != null) {try {return result.getJSONObject(0);} catch (JSONException e) {e.printStackTrace();return null;}} else {return null;}}private JSONObject addFavorite(int observationId) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();JSONArray result = post(HOST + ""/votes/vote/observation/"" + observationId + "".json"", null);if (result != null) {try {return result.getJSONObject(0);} catch (JSONException e) {e.printStackTrace();return null;}} else {return null;}}private JSONObject agreeIdentification(int observationId, int taxonId) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();params.add(new BasicNameValuePair(""identification[observation_id]"", new Integer(observationId).toString()));params.add(new BasicNameValuePair(""identification[taxon_id]"", new Integer(taxonId).toString()));JSONArray result = post(HOST + ""/identifications.json"", params);if (result != null) {try {return result.getJSONObject(0);} catch (JSONException e) {e.printStackTrace();return null;}} else {return null;}}private JSONObject removeIdentification(int identificationId) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();JSONArray result = delete(HOST + ""/identifications/"" + identificationId + "".json"", null);if (result != null) {try {return result.getJSONObject(0);} catch (JSONException e) {e.printStackTrace();return null;}} else {return null;}}private void addIdentification(int observationId, int taxonId, String body) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();params.add(new BasicNameValuePair(""identification[observation_id]"", new Integer(observationId).toString()));params.add(new BasicNameValuePair(""identification[taxon_id]"", new Integer(taxonId).toString()));params.add(new BasicNameValuePair(""identification[body]"", body));JSONArray arrayResult = post(HOST + ""/identifications.json"", params);if (arrayResult != null) {BetterJSONObject result;try {result = new BetterJSONObject(arrayResult.getJSONObject(0));JSONObject jsonObservation = result.getJSONObject(""observation"");Observation remoteObservation = new Observation(new BetterJSONObject(jsonObservation));Cursor c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""id = ""+ remoteObservation.id, null, Observation.DEFAULT_SORT_ORDER);// update local observationc.moveToFirst();if (c.isAfterLast() == false) {Observation observation = new Observation(c);boolean isModified = observation.merge(remoteObservation);ContentValues cv = observation.getContentValues();if (observation._updated_at.before(remoteObservation.updated_at)) {// Remote observation is newer (and thus has overwritten the local one) - update its// sync at time so we won't update the remote servers later on (since we won't// accidently consider this an updated record)cv.put(Observation._SYNCED_AT, System.currentTimeMillis());}if (isModified) {// Only update the DB if neededgetContentResolver().update(observation.getUri(), cv, null, null);}}c.close();} catch (JSONException e) {e.printStackTrace();}}}// Registers a user - returns an error message in case of an error (null if successful)private String registerUser(String email, String password, String username, String license) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();params.add(new BasicNameValuePair(""user[email]"", email));params.add(new BasicNameValuePair(""user[login]"", username));params.add(new BasicNameValuePair(""user[password]"", password));params.add(new BasicNameValuePair(""user[password_confirmation]"", password));String inatNetwork = mApp.getInaturalistNetworkMember();params.add(new BasicNameValuePair(""user[site_id]"", mApp.getStringResourceByName(""inat_site_id_"" + inatNetwork)));params.add(new BasicNameValuePair(""user[preferred_observation_license]"", license));params.add(new BasicNameValuePair(""user[preferred_photo_license]"", license));params.add(new BasicNameValuePair(""user[preferred_sound_license]"", license));Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();params.add(new BasicNameValuePair(""user[locale]"", deviceLanguage));post(HOST + ""/users.json"", params, false);if (mResponseErrors != null) {// Couldn't create usertry {return mResponseErrors.getString(0);} catch (JSONException e) {e.printStackTrace();return null;}} else {return null;}}private void updateComment(int commentId, int observationId, String body) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();params.add(new BasicNameValuePair(""comment[parent_id]"", new Integer(observationId).toString()));params.add(new BasicNameValuePair(""comment[parent_type]"", ""Observation""));params.add(new BasicNameValuePair(""comment[body]"", body));put(HOST + ""/comments/"" + commentId + "".json"", params);}private void deleteComment(int commentId) throws AuthenticationException {delete(HOST + ""/comments/"" + commentId + "".json"", null);}private void addComment(int observationId, String body) throws AuthenticationException {ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();params.add(new BasicNameValuePair(""comment[parent_id]"", new Integer(observationId).toString()));params.add(new BasicNameValuePair(""comment[parent_type]"", ""Observation""));params.add(new BasicNameValuePair(""comment[body]"", body));post(HOST + ""/comments.json"", params);}private void postObservations() throws AuthenticationException, CancelSyncException {Observation observation;// query observations where _updated_at > updated_atCursor c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"",null,Observation.SYNC_ORDER);int updatedCount = c.getCount();mApp.sweepingNotify(SYNC_OBSERVATIONS_NOTIFICATION,getString(R.string.syncing_observations),String.format(getString(R.string.syncing_x_observations), c.getCount()),getString(R.string.syncing));// for each observation PUT to /observations/:idc.moveToFirst();while (c.isAfterLast() == false) {checkForCancelSync();mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION,getString(R.string.updating_observations),String.format(getString(R.string.updating_x_observations), (c.getPosition() + 1), c.getCount()),getString(R.string.syncing));observation = new Observation(c);mApp.setObservationIdBeingSynced(observation._id);handleObservationResponse(observation,put(HOST + ""/observations/"" + observation.id + "".json?extra=observation_photos"", paramsForObservation(observation, false)));c.moveToNext();}c.close();String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);// query observations where _synced_at IS NULLc = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""(id IS NULL) AND (_updated_at > _created_at)"", null, Observation.SYNC_ORDER);int createdCount = c.getCount();// for each observation POST to /observations/c.moveToFirst();while (c.isAfterLast() == false) {checkForCancelSync();mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION,getString(R.string.posting_observations),String.format(getString(R.string.posting_x_observations), (c.getPosition() + 1), c.getCount()),getString(R.string.syncing));observation = new Observation(c);mApp.setObservationIdBeingSynced(observation._id);handleObservationResponse(observation,post(""http://"" + inatHost + ""/observations.json?extra=observation_photos"", paramsForObservation(observation, true)));c.moveToNext();}c.close();c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""id IS NULL"", null, Observation.SYNC_ORDER);int currentCreatedCount = c.getCount();c.close();c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"",null,Observation.SYNC_ORDER);int currentUpdatedCount = c.getCount();c.close();mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);if ((currentCreatedCount == 0) && (currentUpdatedCount == 0)) {// Sync completed successfullymApp.notify(SYNC_OBSERVATIONS_NOTIFICATION,getString(R.string.observation_sync_complete),String.format(getString(R.string.observation_sync_status), createdCount, updatedCount),getString(R.string.sync_complete));} else {// There was a problem with the sync processmApp.notify(SYNC_OBSERVATIONS_NOTIFICATION,getString(R.string.observation_sync_failed),getString(R.string.not_all_observations_were_synced),getString(R.string.sync_failed));}}private JSONObject getObservationJson(int id) throws AuthenticationException {NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage = deviceLocale.getLanguage();String url = String.format(""%s/observations/%d.json?locale=%s"", HOST, id, deviceLanguage);JSONArray json = get(url);if (json == null || json.length() == 0) {return null;}try {return (JSONObject) json.get(0);} catch (JSONException e) {return null;}}private Observation getObservation(int id) throws AuthenticationException {JSONObject json = getObservationJson(id);if (json == null) return null;return new Observation(new BetterJSONObject(json));}private void postPhotos() throws AuthenticationException, CancelSyncException {ObservationPhoto op;int createdCount = 0;// query observations where _updated_at > updated_atCursor c = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""_synced_at IS NULL"", null, ObservationPhoto.DEFAULT_SORT_ORDER);if (c.getCount() == 0) {return;}checkForCancelSync();// for each observation PUT to /observations/:idContentValues cv;c.moveToFirst();while (c.isAfterLast() == false) {mApp.notify(SYNC_PHOTOS_NOTIFICATION,getString(R.string.posting_photos),String.format(getString(R.string.posting_x_photos), (c.getPosition() + 1), c.getCount()),getString(R.string.syncing));op = new ObservationPhoto(c);if (op.photo_url != null) {// Online photoc.moveToNext();continue;}ArrayList <NameValuePair> params = op.getParams();mApp.setObservationIdBeingSynced(op._observation_id);String imgFilePath = op.photo_filename;if (imgFilePath == null) {// Observation photo is saved in the ""old"" way (prior to latest change in the way we store photos)if (op._photo_id != null) {Uri photoUri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, op._photo_id);Cursor pc = getContentResolver().query(photoUri,new String[]{MediaStore.MediaColumns._ID, MediaStore.Images.Media.DATA},null,null,MediaStore.Images.Media.DEFAULT_SORT_ORDER);if ((pc != null) && (pc.getCount() > 0)) {pc.moveToFirst();imgFilePath = pc.getString(pc.getColumnIndexOrThrow(MediaStore.Images.Media.DATA));pc.close();}}}params.add(new BasicNameValuePair(""file"", imgFilePath));String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);params.add(new BasicNameValuePair(""site_id"", mApp.getStringResourceByName(""inat_site_id_"" + inatNetwork)));JSONArray response = post(""http://"" + inatHost + ""/observation_photos.json"", params);try {if (response == null || response.length() != 1) {break;}JSONObject json = response.getJSONObject(0);BetterJSONObject j = new BetterJSONObject(json);ObservationPhoto jsonObservationPhoto = new ObservationPhoto(j);op.merge(jsonObservationPhoto);cv = op.getContentValues();cv.put(ObservationPhoto._SYNCED_AT, System.currentTimeMillis());getContentResolver().update(op.getUri(), cv, null, null);createdCount += 1;} catch (JSONException e) {Log.e(TAG, ""JSONException: "" + e.toString());}c.moveToNext();checkForCancelSync();}c.close();mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);c = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""_synced_at IS NULL"", null, ObservationPhoto.DEFAULT_SORT_ORDER);int currentCount = c.getCount();c.close();if (currentCount == 0) {// Sync completed successfullymApp.notify(SYNC_PHOTOS_NOTIFICATION,getString(R.string.photo_sync_complete),String.format(getString(R.string.posted_new_x_photos), createdCount),getString(R.string.sync_complete));} else {// Sync failedmApp.notify(SYNC_PHOTOS_NOTIFICATION,getString(R.string.photo_sync_failed),getString(R.string.not_all_photos_were_synced),getString(R.string.sync_failed));}}private String getGuideXML(Integer guideId) throws AuthenticationException {NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();String url = HOST + ""/guides/"" + guideId.toString() + "".xml?locale="" + deviceLanguage;try {HttpClient httpClient = new DefaultHttpClient();httpClient.getParams().setParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);HttpGet httpGet = new HttpGet(url);HttpResponse response = null;response = httpClient.execute(httpGet);InputStream buffer = new BufferedInputStream(response.getEntity().getContent());File outputFile = File.createTempFile(guideId.toString() + "".xml"", null, getBaseContext().getCacheDir());OutputStream output = new FileOutputStream(outputFile);int count = 0;byte data[] = new byte[1024];while ((count = buffer.read(data)) != -1) {output.write(data, 0, count);}// flushing outputoutput.flush();// closing streamsoutput.close();buffer.close();// Return the downloaded full file namereturn outputFile.getAbsolutePath();} catch (IOException e) {e.printStackTrace();return null;}}private BetterJSONObject getUserDetails(String username) throws AuthenticationException {String url = HOST + ""/users/"" + username + "".json"";JSONArray json = get(url, false);try {if (json == null) return null;if (json.length() == 0) return null;return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return null;}}private SerializableJSONArray getUserObservations(String username) throws AuthenticationException {String url = HOST + ""/observations/"" + username + "".json?per_page=200"";JSONArray json = get(url, false);if (json == null) return null;if (json.length() == 0) return null;return new SerializableJSONArray(json);}private SerializableJSONArray getUserIdentifications(String username) throws AuthenticationException {String url = HOST + ""/identifications/"" + username + "".json?per_page=200"";JSONArray json = get(url, false);if (json == null) return null;return new SerializableJSONArray(json);}private BetterJSONObject getUserLifeList(int lifeListId) throws AuthenticationException {String url = HOST + ""/life_lists/"" + lifeListId + "".json"";JSONArray json = get(url, false);if (json == null) return null;if (json.length() == 0) return null;try {return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return null;}}private BetterJSONObject getUserDetails() throws AuthenticationException {String url = HOST + ""/users/edit.json"";JSONArray json = get(url, true);try {if (json == null) return null;if (json.length() == 0) return null;return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return null;}}private BetterJSONObject getProjectObservations(int projectId) throws AuthenticationException {Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();String url = API_HOST + ""/observations?project_id="" + projectId + ""&per_page=200&locale="" + deviceLanguage;JSONArray json = get(url);if (json == null) return new BetterJSONObject();try {return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return new BetterJSONObject();}}private BetterJSONObject getProjectSpecies(int projectId) throws AuthenticationException {Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();String url = API_HOST + ""/observations/species_counts?project_id="" + projectId + ""&locale="" + deviceLanguage;JSONArray json = get(url);try {if (json == null) return new BetterJSONObject();return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return new BetterJSONObject();}}private SerializableJSONArray getNews() throws AuthenticationException {String url = HOST + ""/posts/for_user.json"";JSONArray json = get(url, mCredentials != null); // If user is logged-in, returns his news (using an authenticated endpoint)return new SerializableJSONArray(json);}private SerializableJSONArray getProjectNews(int projectId) throws AuthenticationException {String url = HOST + ""/projects/"" + projectId + ""/journal.json"";JSONArray json = get(url);return new SerializableJSONArray(json);}private BetterJSONObject getProjectObservers(int projectId) throws AuthenticationException {String url = API_HOST + ""/observations/observers?project_id="" + projectId;JSONArray json = get(url);try {if (json == null) return new BetterJSONObject();return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return new BetterJSONObject();}}private BetterJSONObject getProjectIdentifiers(int projectId) throws AuthenticationException {String url = API_HOST + ""/observations/identifiers?project_id="" + projectId;JSONArray json = get(url);try {if (json == null) return new BetterJSONObject();return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return new BetterJSONObject();}}private SerializableJSONArray getTaxaForGuide(Integer guideId) throws AuthenticationException {String url = HOST + ""/guide_taxa.json?guide_id="" + guideId.toString();JSONArray json = get(url);try {if (json == null) return new SerializableJSONArray();return new SerializableJSONArray(json.getJSONObject(0).getJSONArray(""guide_taxa""));} catch (JSONException e) {e.printStackTrace();return new SerializableJSONArray();}}private SerializableJSONArray getAllGuides() throws AuthenticationException {String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);String url = ""http://"" + inatHost + ""/guides.json?"";url += ""per_page=200&page="";JSONArray results = new JSONArray();// Results are paginated - make sure to retrieve them allint page = 1;JSONArray currentResults = get(url + page);while ((currentResults != null) && (currentResults.length() > 0)) {// Append current resultsfor (int i = 0; i < currentResults.length(); i++) {try {results.put(currentResults.get(i));} catch (JSONException e) {e.printStackTrace();}}page++;currentResults = get(url + page);}return new SerializableJSONArray(results);}private SerializableJSONArray getMyGuides() throws AuthenticationException {JSONArray json = null;String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);String url = ""http://"" + inatHost + ""/guides.json?by=you&per_page=200"";if (mCredentials != null) {try {json = get(url, true);} catch (Exception exc) {exc.printStackTrace();}}if (json == null) {json = new JSONArray();}// Build a list of result guide IDsint i = 0;List<String> guideIds = new ArrayList<String>();while (i < json.length()) {try {JSONObject guide = json.getJSONObject(i);guideIds.add(String.valueOf(guide.getInt(""id"")));} catch (JSONException e) {e.printStackTrace();}i++;}// Add any offline guidesList<GuideXML> offlineGuides = GuideXML.getAllOfflineGuides(this);List<JSONObject> guidesJson = new ArrayList<JSONObject>();for (GuideXML guide: offlineGuides) {JSONObject guideJson = new JSONObject();if (guideIds.contains(guide.getID())) {// Guide already found in current guide results - no need to add it againcontinue;}try {guideJson.put(""id"", Integer.valueOf(guide.getID()));guideJson.put(""title"", guide.getTitle());guideJson.put(""description"", guide.getDescription());// TODO - no support for ""icon_url"" (not found in XML file)} catch (JSONException e) {e.printStackTrace();}json.put(guideJson);}return new SerializableJSONArray(json);}private SerializableJSONArray getNearByGuides(boolean useLocationServices) throws AuthenticationException {if (useLocationServices) {Location location;try {location = LocationServices.FusedLocationApi.getLastLocation(mLocationClient);} catch (IllegalStateException ex) {ex.printStackTrace();return new SerializableJSONArray();}return getNearByGuides(location);} else {// Use GPS alone to determine locationLocationManager locationManager = (LocationManager)mApp.getSystemService(Context.LOCATION_SERVICE);Criteria criteria = new Criteria();String provider = locationManager.getBestProvider(criteria, false);Location location = locationManager.getLastKnownLocation(provider);return getNearByGuides(location);}}private SerializableJSONArray getNearByGuides(Location location) throws AuthenticationException {if (location == null) {// No location found - return an empty resultLog.e(TAG, ""Current location is null"");return new SerializableJSONArray();}double lat  = location.getLatitude();double lon  = location.getLongitude();String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);String url = ""http://"" + inatHost + String.format(""/guides.json?latitude=%s&longitude=%s&per_page=200"", lat, lon);Log.e(TAG, url);JSONArray json = get(url);return new SerializableJSONArray(json);}private SerializableJSONArray getNearByProjects(Location location) throws AuthenticationException {if (location == null) {// No location found - return an empty resultLog.e(TAG, ""Current location is null"");return new SerializableJSONArray();}double lat  = location.getLatitude();double lon  = location.getLongitude();String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);String url = ""http://"" + inatHost + String.format(""/projects.json?latitude=%s&longitude=%s"", lat, lon);Log.e(TAG, url);JSONArray json = get(url);if (json == null) {return new SerializableJSONArray();}// Determine which projects are already joinedfor (int i = 0; i < json.length(); i++) {Cursor c;try {c = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, ""id = '""+json.getJSONObject(i).getInt(""id"")+""'"", null, Project.DEFAULT_SORT_ORDER);c.moveToFirst();if (c.getCount() > 0) {json.getJSONObject(i).put(""joined"", true);}} catch (JSONException e) {e.printStackTrace();continue;}}return new SerializableJSONArray(json);}private SerializableJSONArray getNearByProjects(boolean useLocationServices) throws AuthenticationException {Location location = null;if (useLocationServices) {try {location = LocationServices.FusedLocationApi.getLastLocation(mLocationClient);} catch (IllegalStateException ex) {ex.printStackTrace();return new SerializableJSONArray();}}if (location != null) {return getNearByProjects(location);} else {// Use GPS alone to determine locationLocationManager locationManager = (LocationManager)mApp.getSystemService(Context.LOCATION_SERVICE);Criteria criteria = new Criteria();String provider = locationManager.getBestProvider(criteria, false);location = locationManager.getLastKnownLocation(provider);return getNearByProjects(location);}}private SerializableJSONArray getFeaturedProjects() throws AuthenticationException {String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);String url = ""http://"" + inatHost + ""/projects.json?featured=true"";JSONArray json = get(url);if (json == null) {return new SerializableJSONArray();}// Determine which projects are already joinedfor (int i = 0; i < json.length(); i++) {Cursor c;try {c = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, ""id = '""+json.getJSONObject(i).getInt(""id"")+""'"", null, Project.DEFAULT_SORT_ORDER);c.moveToFirst();if (c.getCount() > 0) {json.getJSONObject(i).put(""joined"", true);}} catch (JSONException e) {e.printStackTrace();continue;}}return new SerializableJSONArray(json);}private void addProjectFields(JSONArray jsonFields) {int projectId = -1;ArrayList<ProjectField> projectFields = new ArrayList<ProjectField>();for (int i = 0; i < jsonFields.length(); i++) {try {BetterJSONObject jsonField = new BetterJSONObject(jsonFields.getJSONObject(i));ProjectField field = new ProjectField(jsonField);projectId = field.project_id;projectFields.add(field);} catch (JSONException e) {e.printStackTrace();}}if (projectId != -1) {// First, delete all previous project fields (for that project)getContentResolver().delete(ProjectField.CONTENT_URI, ""(project_id IS NOT NULL) and (project_id = ""+projectId+"")"", null);// Next, re-add all project fieldsfor (int i = 0; i < projectFields.size(); i++) {ProjectField field = projectFields.get(i);getContentResolver().insert(ProjectField.CONTENT_URI, field.getContentValues());}}}public void flagObservationAsCaptive(int obsId) throws AuthenticationException {post(String.format(""%s/observations/%d/quality/wild.json?agree=false"", HOST, obsId), null);}public void joinProject(int projectId) throws AuthenticationException {post(String.format(""%s/projects/%d/join.json"", HOST, projectId), null);try {JSONArray result = get(String.format(""%s/projects/%d.json"", HOST, projectId));if (result == null) return;BetterJSONObject jsonProject = new BetterJSONObject(result.getJSONObject(0));Project project = new Project(jsonProject);// Add joined project locallyContentValues cv = project.getContentValues();getContentResolver().insert(Project.CONTENT_URI, cv);// Save project fieldsaddProjectFields(jsonProject.getJSONArray(""project_observation_fields"").getJSONArray());} catch (JSONException e) {e.printStackTrace();}}public void leaveProject(int projectId) throws AuthenticationException {delete(String.format(""%s/projects/%d/leave.json"", HOST, projectId), null);// Remove locally saved project (because we left it)getContentResolver().delete(Project.CONTENT_URI, ""(id IS NOT NULL) and (id = "" + projectId + "")"", null);}private BetterJSONObject removeObservationFromProject(int observationId, int projectId) throws AuthenticationException {if (ensureCredentials() == false) {return null;}String url = String.format(""%s/projects/%d/remove.json?observation_id=%d"", HOST, projectId, observationId);JSONArray json = delete(url, null);try {return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return new BetterJSONObject();}}private BetterJSONObject addObservationToProject(int observationId, int projectId) throws AuthenticationException {if (ensureCredentials() == false) {return null;}String url = HOST + ""/project_observations.json"";ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();params.add(new BasicNameValuePair(""project_observation[observation_id]"", String.valueOf(observationId)));params.add(new BasicNameValuePair(""project_observation[project_id]"", String.valueOf(projectId)));JSONArray json = post(url, params);if (json == null) {return new BetterJSONObject();}try {return new BetterJSONObject(json.getJSONObject(0));} catch (JSONException e) {e.printStackTrace();return new BetterJSONObject();}}private SerializableJSONArray getCheckList(int id) throws AuthenticationException {NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();String url = String.format(""%s/lists/%d.json?per_page=50&locale=%s"", HOST, id, deviceLanguage);JSONArray json = get(url);if (json == null) {return null;}try {return new SerializableJSONArray(json.getJSONObject(0).getJSONArray(""listed_taxa""));} catch (JSONException e) {e.printStackTrace();return new SerializableJSONArray();}}public static boolean hasJoinedProject(Context context, int projectId) {Cursor c = context.getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, ""id = "" + projectId, null, Project.DEFAULT_SORT_ORDER);int count = c.getCount();c.close();return count > 0;}private SerializableJSONArray getJoinedProjectsOffline() {JSONArray projects = new JSONArray();Cursor c = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION, null, null, Project.DEFAULT_SORT_ORDER);c.moveToFirst();int index = 0;while (c.isAfterLast() == false) {Project project = new Project(c);JSONObject jsonProject = project.toJSONObject();try {jsonProject.put(""joined"", true);projects.put(index, jsonProject);} catch (JSONException e) {e.printStackTrace();}c.moveToNext();index++;}c.close();return new SerializableJSONArray(projects);}private SerializableJSONArray getJoinedProjects() throws AuthenticationException {if (ensureCredentials() == false) {return null;}String url = HOST + ""/projects/user/"" + Uri.encode(mLogin) + "".json"";JSONArray json = get(url, true);JSONArray finalJson = new JSONArray();if (json == null) {return null;}for (int i = 0; i < json.length(); i++) {try {JSONObject obj = json.getJSONObject(i);JSONObject project = obj.getJSONObject(""project"");project.put(""joined"", true);finalJson.put(project);// Save project fieldsaddProjectFields(project.getJSONArray(""project_observation_fields""));} catch (JSONException e) {e.printStackTrace();}}return new SerializableJSONArray(finalJson);}@SuppressLint(""NewApi"")private void getUserObservations(int maxCount) throws AuthenticationException, CancelSyncException {if (ensureCredentials() == false) {return;}String url = HOST + ""/observations/"" + Uri.encode(mLogin) + "".json"";long lastSync = mPreferences.getLong(""last_sync_time"", 0);Timestamp lastSyncTS = new Timestamp(lastSync);url += String.format(""?updated_since=%s&order_by=date_added&order=desc&extra=observation_photos,projects,fields"", URLEncoder.encode(new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").format(lastSyncTS)));if (maxCount > 0) {// Retrieve only a certain number of observationsurl += String.format(""&per_page=%d&page=1"", maxCount);}Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();url += ""&locale="" + deviceLanguage;mProjectObservations = new ArrayList<SerializableJSONArray>();mProjectFieldValues = new Hashtable<Integer, Hashtable<Integer,ProjectFieldValue>>();JSONArray json = get(url, true);if (json != null && json.length() > 0) {syncJson(json, true);} else {if (mResponseHeaders != null) {// Delete any local observations which were deleted remotely by the userfor (Header header : mResponseHeaders) {if (!header.getName().equalsIgnoreCase(""X-Deleted-Observations"")) continue;String deletedIds = header.getValue().trim();getContentResolver().delete(Observation.CONTENT_URI, ""(id IN (""+deletedIds+""))"", null);// Delete associated project-fields and photosint count1 = getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""observation_id in ("" + deletedIds + "")"", null);int count2 = getContentResolver().delete(ProjectObservation.CONTENT_URI, ""observation_id in ("" + deletedIds + "")"", null);int count3 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, ""observation_id in ("" + deletedIds + "")"", null);break;}mResponseHeaders = null;}}checkForCancelSync();}private void syncObservationFields() throws AuthenticationException, CancelSyncException {// First, remotely update the observation fields which were modifiedCursor c = getContentResolver().query(ProjectFieldValue.CONTENT_URI,ProjectFieldValue.PROJECTION,""_updated_at > _synced_at AND _synced_at IS NOT NULL"",null,ProjectFieldValue.DEFAULT_SORT_ORDER);c.moveToFirst();while (c.isAfterLast() == false) {checkForCancelSync();ProjectFieldValue localField = new ProjectFieldValue(c);// Make sure that the local field has an *external* observation id (i.e. the observation// it belongs to has been synced)Cursor obsc = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""id = ? AND _synced_at IS NOT NULL"",new String[] { localField.observation_id.toString() },ProjectFieldValue.DEFAULT_SORT_ORDER);if (obsc.getCount() == 0) {continue;}obsc.close();mApp.setObservationIdBeingSynced(localField.observation_id);if (!mProjectFieldValues.containsKey(Integer.valueOf(localField.observation_id))) {// Need to retrieve remote observation fields to see how to sync the fieldsJSONArray jsonResult = get(HOST + ""/observations/"" + localField.observation_id + "".json"");if (jsonResult != null) {Hashtable<Integer, ProjectFieldValue> fields = new Hashtable<Integer, ProjectFieldValue>();try {JSONArray jsonFields = jsonResult.getJSONObject(0).getJSONArray(""observation_field_values"");for (int j = 0; j < jsonFields.length(); j++) {JSONObject jsonField = jsonFields.getJSONObject(j);JSONObject observationField = jsonField.getJSONObject(""observation_field"");int id = observationField.optInt(""id"", jsonField.getInt(""observation_field_id""));fields.put(id, new ProjectFieldValue(new BetterJSONObject(jsonField)));}} catch (JSONException e) {e.printStackTrace();}mProjectFieldValues.put(localField.observation_id, fields);checkForCancelSync();}}Hashtable<Integer, ProjectFieldValue> fields = mProjectFieldValues.get(Integer.valueOf(localField.observation_id));boolean shouldOverwriteRemote = false;ProjectFieldValue remoteField = null;if (fields == null) {continue;}if (!fields.containsKey(Integer.valueOf(localField.field_id))) {// No remote field - add itshouldOverwriteRemote = true;} else {remoteField = fields.get(Integer.valueOf(localField.field_id));if (remoteField.updated_at.before(localField._updated_at)) {shouldOverwriteRemote = true;}}if (shouldOverwriteRemote) {// Overwrite remote valueArrayList<NameValuePair> params = new ArrayList<NameValuePair>();params.add(new BasicNameValuePair(""observation_field_value[observation_id]"", Integer.valueOf(localField.observation_id).toString()));params.add(new BasicNameValuePair(""observation_field_value[observation_field_id]"", Integer.valueOf(localField.field_id).toString()));params.add(new BasicNameValuePair(""observation_field_value[value]"", localField.value));post(HOST + ""/observation_field_values.json"", params);} else {// Overwrite local valuelocalField.created_at = remoteField.created_at;localField.id = remoteField.id;localField.observation_id = remoteField.observation_id;localField.field_id = remoteField.field_id;localField.value = remoteField.value;localField.updated_at = remoteField.updated_at;}ContentValues cv = localField.getContentValues();cv.put(ProjectFieldValue._SYNCED_AT, System.currentTimeMillis());getContentResolver().update(localField.getUri(), cv, null, null);fields.remove(Integer.valueOf(localField.field_id));c.moveToNext();}c.close();mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);// Next, add any new observation fieldsfor (Hashtable<Integer, ProjectFieldValue> fields : mProjectFieldValues.values()) {for (ProjectFieldValue field : fields.values()) {ContentValues cv = field.getContentValues();cv.put(ProjectFieldValue._SYNCED_AT, System.currentTimeMillis());getContentResolver().insert(ProjectFieldValue.CONTENT_URI, cv);c = getContentResolver().query(ProjectField.CONTENT_URI, ProjectField.PROJECTION,""field_id = "" + field.field_id, null, Project.DEFAULT_SORT_ORDER);if (c.getCount() == 0) {// This observation has a non-project custom field - add it as welladdProjectField(field.field_id);}c.close();}}}private void addProjectField(int fieldId) throws AuthenticationException {try {JSONArray result = get(String.format(""%s/observation_fields/%d.json"", HOST, fieldId));BetterJSONObject jsonObj;jsonObj = new BetterJSONObject(result.getJSONObject(0));ProjectField field = new ProjectField(jsonObj);getContentResolver().insert(ProjectField.CONTENT_URI, field.getContentValues());} catch (JSONException e) {e.printStackTrace();}}private void getNearbyObservations(Intent intent) throws AuthenticationException {Bundle extras = intent.getExtras();Double minx = extras.getDouble(""minx"");Double maxx = extras.getDouble(""maxx"");Double miny = extras.getDouble(""miny"");Double maxy = extras.getDouble(""maxy"");Boolean clearMapLimit = extras.getBoolean(""clear_map_limit"", false);Integer page = extras.getInt(""page"", 0);String url = HOST;if (extras.containsKey(""username"")) {url = HOST + ""/observations/"" + extras.getString(""username"") + "".json?extra=observation_photos"";} else {url = HOST + ""/observations.json?extra=observation_photos"";}url += ""&captive=false&page="" + page + ""&per_page="" + NEAR_BY_OBSERVATIONS_PER_PAGE;if (extras.containsKey(""taxon_id"")) {url += ""&taxon_id="" + extras.getInt(""taxon_id"");}if (extras.containsKey(""location_id"")) {url += ""&place_id="" + extras.getInt(""location_id"");} else if (!clearMapLimit) {url += ""&swlat=""+miny;url += ""&nelat=""+maxy;url += ""&swlng=""+minx;url += ""&nelng=""+maxx;}if (extras.containsKey(""project_id"")) {url += ""&projects[]="" + extras.getInt(""project_id"");}Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();url += ""&locale="" + deviceLanguage;Log.d(TAG, ""Near by observations URL: "" + url);mNearByObservationsUrl = url;JSONArray json = get(url, mApp.loggedIn());Intent reply = new Intent(ACTION_NEARBY);reply.putExtra(""minx"", minx);reply.putExtra(""maxx"", maxx);reply.putExtra(""miny"", miny);reply.putExtra(""maxy"", maxy);if (json == null) {reply.putExtra(""error"", getString(R.string.couldnt_load_nearby_observations));} else {//syncJson(json, false);}if (!mIsStopped && url.equalsIgnoreCase(mNearByObservationsUrl)) {// Only send the reply if a new near by observations request hasn't been made yetmApp.setServiceResult(ACTION_NEARBY, new SerializableJSONArray(json));sendBroadcast(reply);}}private JSONArray put(String url, ArrayList<NameValuePair> params) throws AuthenticationException {params.add(new BasicNameValuePair(""_method"", ""PUT""));return request(url, ""put"", params, true);}private JSONArray delete(String url, ArrayList<NameValuePair> params) throws AuthenticationException {return request(url, ""delete"", params, true);}private JSONArray post(String url, ArrayList<NameValuePair> params, boolean authenticated) throws AuthenticationException {return request(url, ""post"", params, authenticated);}private JSONArray post(String url, ArrayList<NameValuePair> params) throws AuthenticationException {return request(url, ""post"", params, true);}private JSONArray get(String url) throws AuthenticationException {return get(url, false);}private JSONArray get(String url, boolean authenticated) throws AuthenticationException {return request(url, ""get"", null, authenticated);}private JSONArray request(String url, String method, ArrayList<NameValuePair> params, boolean authenticated) throws AuthenticationException {DefaultHttpClient client = new DefaultHttpClient();// Handle redirects (301/302) for all HTTP methods (including POST)client.setRedirectHandler(new DefaultRedirectHandler() {@Overridepublic boolean isRedirectRequested(HttpResponse response, HttpContext context) {boolean isRedirect = super.isRedirectRequested(response, context);if (!isRedirect) {int responseCode = response.getStatusLine().getStatusCode();if (responseCode == 301 || responseCode == 302) {return true;}}return isRedirect;}});client.getParams().setParameter(CoreProtocolPNames.USER_AGENT, USER_AGENT);//        Log.d(TAG, String.format(""%s (%b - %s): %s"", method, authenticated,//                authenticated ? mCredentials : ""<null>"",//                url));HttpRequestBase request;Log.d(TAG, String.format(""URL: %s - %s (%s)"", method, url, (params != null ? params.toString() : ""null"")));if (method.equalsIgnoreCase(""post"")) {request = new HttpPost(url);} else if (method.equalsIgnoreCase(""delete"")) {request = new HttpDelete(url);} else if (method.equalsIgnoreCase(""put"")) {request = new HttpPut(url);} else {request = new HttpGet(url);}// POST paramsif (params != null) {Charset utf8Charset = Charset.forName(""UTF-8"");MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);for (int i = 0; i < params.size(); i++) {if (params.get(i).getName().equalsIgnoreCase(""image"") || params.get(i).getName().equalsIgnoreCase(""file"")) {// If the key equals to ""image"", we use FileBody to transfer the dataentity.addPart(params.get(i).getName(), new FileBody(new File (params.get(i).getValue())));} else {// Normal string datatry {entity.addPart(params.get(i).getName(), new StringBody(params.get(i).getValue(), utf8Charset));} catch (UnsupportedEncodingException e) {Log.e(TAG, ""failed to add "" + params.get(i).getName() + "" to entity for a "" + method + "" request: "" + e);}}}if (method.equalsIgnoreCase(""put"")) {((HttpPut) request).setEntity(entity);} else {((HttpPost) request).setEntity(entity);}}// authif (authenticated) {ensureCredentials();if (mLoginType == LoginType.PASSWORD) {// Old-style password authenticationrequest.setHeader(""Authorization"", ""Basic "" + mCredentials);} else {request.setHeader(""Authorization"", ""Bearer "" + mCredentials);}}try {HttpResponse response = client.execute(request);HttpEntity entity = response.getEntity();String content = entity != null ? EntityUtils.toString(entity) : null;Log.d(TAG, String.format(""RESP: %s"", content));JSONArray json = null;switch (response.getStatusLine().getStatusCode()) {//switch (response.getStatusCode()) {case HttpStatus.SC_UNPROCESSABLE_ENTITY:// Validation error - still need to return responseLog.e(TAG, response.getStatusLine().toString());case HttpStatus.SC_OK:try {json = new JSONArray(content);} catch (JSONException e) {Log.e(TAG, ""Failed to create JSONArray, JSONException: "" + e.toString());try {JSONObject jo = new JSONObject(content);json = new JSONArray();json.put(jo);} catch (JSONException e2) {Log.e(TAG, ""Failed to create JSONObject, JSONException: "" + e2.toString());}}mResponseHeaders = response.getAllHeaders();try {if (json != null) {JSONObject result = json.getJSONObject(0);if (result.has(""errors"")) {// Error responseLog.e(TAG, ""Got an error response: "" + result.get(""errors"").toString());mResponseErrors = result.getJSONArray(""errors"");return null;}}} catch (JSONException e) {e.printStackTrace();}mResponseErrors = null;return json;case HttpStatus.SC_UNAUTHORIZED:throw new AuthenticationException();case HttpStatus.SC_GONE:Log.e(TAG, ""GONE: "" + response.getStatusLine().toString());// TODO create notification that informs user some observations have been deleted on the server,// click should take them to an activity that lets them decide whether to delete them locally// or post them as new observationsdefault:Log.e(TAG, response.getStatusLine().toString());//Log.e(TAG, response.getStatusMessage());}}catch (IOException e) {//request.abort();Log.w(TAG, ""Error for URL "" + url, e);}return null;}private boolean ensureCredentials() throws AuthenticationException {if (mCredentials != null) { return true; }// request login unless passiveif (!mPassive) {throw new AuthenticationException();}stopSelf();return false;}private void requestCredentials() {stopSelf();mApp.sweepingNotify(AUTH_NOTIFICATION, getString(R.string.please_sign_in), getString(R.string.please_sign_in_description), null);}// Returns an array of two strings: access token + iNat usernamepublic static String[] verifyCredentials(String username, String oauth2Token, LoginType authType) {String grantType = null;DefaultHttpClient client = new DefaultHttpClient();client.getParams().setParameter(CoreProtocolPNames.USER_AGENT, USER_AGENT);String url = HOST + (authType == LoginType.OAUTH_PASSWORD ? ""/oauth/token"" : ""/oauth/assertion_token"");HttpRequestBase request = new HttpPost(url);ArrayList<NameValuePair> postParams = new ArrayList<NameValuePair>();postParams.add(new BasicNameValuePair(""format"", ""json""));postParams.add(new BasicNameValuePair(""client_id"", INaturalistApp.getAppContext().getString(R.string.oauth_client_id)));if (authType == LoginType.FACEBOOK) {grantType = ""facebook"";} else if (authType == LoginType.GOOGLE) {grantType = ""google"";} else if (authType == LoginType.OAUTH_PASSWORD) {grantType = ""password"";}postParams.add(new BasicNameValuePair(""grant_type"", grantType));if (authType == LoginType.OAUTH_PASSWORD) {postParams.add(new BasicNameValuePair(""password"", oauth2Token));postParams.add(new BasicNameValuePair(""username"", username));postParams.add(new BasicNameValuePair(""client_secret"", INaturalistApp.getAppContext().getString(R.string.oauth_client_secret)));} else {postParams.add(new BasicNameValuePair(""assertion"", oauth2Token));}try {((HttpPost)request).setEntity(new UrlEncodedFormEntity(postParams));} catch (UnsupportedEncodingException e1) {e1.printStackTrace();return null;}try {HttpResponse response = client.execute(request);HttpEntity entity = response.getEntity();String content = EntityUtils.toString(entity);if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {// Upgrade to an access token//                Log.d(TAG, ""Authorization Response: "" + content);JSONObject json = new JSONObject(content);String accessToken = json.getString(""access_token"");// Next, find the iNat username (since we currently only have the FB/Google email)request = new HttpGet(HOST + ""/users/edit.json"");request.setHeader(""Authorization"", ""Bearer "" + accessToken);response = client.execute(request);entity = response.getEntity();content = EntityUtils.toString(entity);Log.d(TAG, String.format(""RESP2: %s"", content));if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {return null;}json = new JSONObject(content);if (!json.has(""login"")) {return null;}String returnedUsername = json.getString(""login"");return new String[] { accessToken, returnedUsername };} else {Log.e(TAG, ""Authentication failed: "" + content);return null;}}catch (IOException e) {request.abort();Log.w(TAG, ""Error for URL "" + url, e);} catch (JSONException e) {// TODO Auto-generated catch blocke.printStackTrace();}return null;}/** Create a file Uri for saving an image or video */private Uri getOutputMediaFileUri(Observation observation){ContentValues values = new ContentValues();String timeStamp = new SimpleDateFormat(""yyyyMMdd_HHmmss"").format(new Date());String name = ""observation_"" + observation.created_at.getTime() + ""_"" + timeStamp;values.put(android.provider.MediaStore.Images.Media.TITLE, name);return getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);}public void syncJson(JSONArray json, boolean isUser) {ArrayList<Integer> ids = new ArrayList<Integer>();ArrayList<Integer> existingIds = new ArrayList<Integer>();ArrayList<Integer> newIds = new ArrayList<Integer>();HashMap<Integer,Observation> jsonObservationsById = new HashMap<Integer,Observation>();Observation observation;Observation jsonObservation;BetterJSONObject o;for (int i = 0; i < json.length(); i++) {try {o = new BetterJSONObject(json.getJSONObject(i));ids.add(o.getInt(""id""));Observation obs = new Observation(o);jsonObservationsById.put(o.getInt(""id""), obs);if (isUser) {// Save the project observations aside (will be later used in the syncing of project observations)mProjectObservations.add(o.getJSONArray(""project_observations""));// Save project field valuesHashtable<Integer, ProjectFieldValue> fields = new Hashtable<Integer, ProjectFieldValue>();JSONArray jsonFields = o.getJSONArray(""observation_field_values"").getJSONArray();for (int j = 0; j < jsonFields.length(); j++) {BetterJSONObject field = new BetterJSONObject(jsonFields.getJSONObject(j));fields.put(field.getJSONObject(""observation_field"").getInt(""id""), new ProjectFieldValue(field));}mProjectFieldValues.put(o.getInt(""id""), fields);}} catch (JSONException e) {Log.e(TAG, ""JSONException: "" + e.toString());}}// find obs with existing idsString joinedIds = StringUtils.join(ids, "","");// TODO why doesn't selectionArgs work for id IN (?)Cursor c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""id IN (""+joinedIds+"")"", null, Observation.DEFAULT_SORT_ORDER);// update existingc.moveToFirst();ContentValues cv;while (c.isAfterLast() == false) {observation = new Observation(c);jsonObservation = jsonObservationsById.get(observation.id);boolean isModified = observation.merge(jsonObservation);cv = observation.getContentValues();if (observation._updated_at.before(jsonObservation.updated_at)) {// Remote observation is newer (and thus has overwritten the local one) - update its// sync at time so we won't update the remote servers later on (since we won't// accidently consider this an updated record)cv.put(Observation._SYNCED_AT, System.currentTimeMillis());}// Add any new photos that were added remotelyArrayList<Integer> observationPhotoIds = new ArrayList<Integer>();ArrayList<Integer> existingObservationPhotoIds = new ArrayList<Integer>();Cursor pc = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""(observation_id = ""+observation.id + "")"",null, null);pc.moveToFirst();while(pc.isAfterLast() == false) {int photoId = pc.getInt(pc.getColumnIndexOrThrow(ObservationPhoto.ID));if (photoId != 0) {existingObservationPhotoIds.add(photoId);}pc.moveToNext();}pc.close();for (int j = 0; j < jsonObservation.photos.size(); j++) {ObservationPhoto photo = jsonObservation.photos.get(j);photo._observation_id = jsonObservation._id;observationPhotoIds.add(photo.id);if (existingObservationPhotoIds.contains(photo.id)) {Log.d(TAG, ""photo "" + photo.id + "" has already been added, skipping..."");continue;}ContentValues opcv = photo.getContentValues();// So we won't re-add this photo as though it was a local photoopcv.put(ObservationPhoto._SYNCED_AT, System.currentTimeMillis());opcv.put(ObservationPhoto._OBSERVATION_ID, photo.observation_id);opcv.put(ObservationPhoto._PHOTO_ID, photo._photo_id);opcv.put(ObservationPhoto.ID, photo.id);try {getContentResolver().insert(ObservationPhoto.CONTENT_URI, opcv);} catch(SQLException ex) {// Happens when the photo already exists - ignore}}// Delete photos that were synced but weren't present in the remote response,// indicating they were deleted elsewhereString joinedPhotoIds = StringUtils.join(observationPhotoIds, "","");String where = ""observation_id = "" + observation.id + "" AND id IS NOT NULL"";if (joinedPhotoIds.length() > 0) {where += "" AND id NOT in ("" + joinedPhotoIds + "")"";}int deleteCount = getContentResolver().delete(ObservationPhoto.CONTENT_URI,where,null);if (deleteCount > 0) {Crashlytics.log(1, TAG, String.format(""Warning: Deleted %d photos locally after sever did not contain those IDs - observation id: %s, photo ids: %s"",deleteCount, observation.id, joinedPhotoIds));}if (isModified) {// Only update the DB if neededgetContentResolver().update(observation.getUri(), cv, null, null);}existingIds.add(observation.id);c.moveToNext();}c.close();// insert newList<Observation> newObservations = new ArrayList<Observation>();newIds = (ArrayList<Integer>) CollectionUtils.subtract(ids, existingIds);Collections.sort(newIds);for (int i = 0; i < newIds.size(); i++) {jsonObservation = jsonObservationsById.get(newIds.get(i));cv = jsonObservation.getContentValues();cv.put(Observation._SYNCED_AT, System.currentTimeMillis());cv.put(Observation.LAST_COMMENTS_COUNT, jsonObservation.comments_count);cv.put(Observation.LAST_IDENTIFICATIONS_COUNT, jsonObservation.identifications_count);Uri newObs = getContentResolver().insert(Observation.CONTENT_URI, cv);Long newObsId = ContentUris.parseId(newObs);jsonObservation._id = Integer.valueOf(newObsId.toString());newObservations.add(jsonObservation);}if (isUser) {for (int i = 0; i < newObservations.size(); i++) {jsonObservation = newObservations.get(i);// Save the new observation's photosfor (int j = 0; j < jsonObservation.photos.size(); j++) {ObservationPhoto photo = jsonObservation.photos.get(j);photo._observation_id = jsonObservation._id;ContentValues opcv = photo.getContentValues();opcv.put(ObservationPhoto._SYNCED_AT, System.currentTimeMillis()); // So we won't re-add this photo as though it was a local photoopcv.put(ObservationPhoto._OBSERVATION_ID, photo._observation_id);opcv.put(ObservationPhoto._PHOTO_ID, photo._photo_id);opcv.put(ObservationPhoto._ID, photo.id);getContentResolver().insert(ObservationPhoto.CONTENT_URI, opcv);}}}if (isUser) {if (mResponseHeaders != null) {// Delete any local observations which were deleted remotely by the userfor (Header header : mResponseHeaders) {if (!header.getName().equalsIgnoreCase(""X-Deleted-Observations"")) continue;String deletedIds = header.getValue().trim();getContentResolver().delete(Observation.CONTENT_URI, ""(id IN (""+deletedIds+""))"", null);// Delete associated project-fields and photosint count1 = getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""observation_id in ("" + deletedIds + "")"", null);int count2 = getContentResolver().delete(ProjectObservation.CONTENT_URI, ""observation_id in ("" + deletedIds + "")"", null);int count3 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, ""observation_id in ("" + deletedIds + "")"", null);break;}mResponseHeaders = null;}}}private ArrayList<NameValuePair> paramsForObservation(Observation observation, boolean isPOST) {ArrayList<NameValuePair> params = observation.getParams();params.add(new BasicNameValuePair(""ignore_photos"", ""true""));if (isPOST) {String inatNetwork = mApp.getInaturalistNetworkMember();params.add(new BasicNameValuePair(""site_id"", mApp.getStringResourceByName(""inat_site_id_"" + inatNetwork)));}return params;}private void handleObservationResponse(Observation observation, JSONArray response) {try {if (response == null || response.length() != 1) {return;}JSONObject json = response.getJSONObject(0);BetterJSONObject o = new BetterJSONObject(json);Observation jsonObservation = new Observation(o);observation.merge(jsonObservation);ContentValues cv = observation.getContentValues();cv.put(Observation._SYNCED_AT, System.currentTimeMillis());getContentResolver().update(observation.getUri(), cv, null, null);} catch (JSONException e) {// Log.d(TAG, ""JSONException: "" + e.toString());}}private class AuthenticationException extends Exception {private static final long serialVersionUID = 1L;}@Overridepublic void onConnectionFailed(ConnectionResult arg0) {Log.e(TAG, ""onConnectionFailed: "" + (arg0 != null ? arg0.toString() : ""null""));// Try using the GPS for the locationThread thread = new Thread(new Runnable() {@Overridepublic void run() {SerializableJSONArray projects;try {if (mGetLocationForProjects) {projects = getNearByProjects(false);} else {projects = getNearByGuides(false);}} catch (AuthenticationException e) {projects = new SerializableJSONArray();e.printStackTrace();}Intent reply = new Intent(mGetLocationForProjects ? ACTION_NEARBY_PROJECTS_RESULT: ACTION_NEAR_BY_GUIDES_RESULT);mApp.setServiceResult(mGetLocationForProjects ? ACTION_NEARBY_PROJECTS_RESULT: ACTION_NEAR_BY_GUIDES_RESULT, projects);reply.putExtra(IS_SHARED_ON_APP, true);sendBroadcast(reply);}});thread.start();}@Overridepublic void onConnected(Bundle arg0) {Log.i(TAG, ""onConnected: "" + (arg0 != null ? arg0.toString() : ""null""));Thread thread = new Thread(new Runnable() {@Overridepublic void run() {SerializableJSONArray projects;try {if (mGetLocationForProjects) {projects = getNearByProjects(true);} else {projects = getNearByGuides(true);}} catch (AuthenticationException e) {projects = new SerializableJSONArray();e.printStackTrace();}Intent reply = new Intent(mGetLocationForProjects ? ACTION_NEARBY_PROJECTS_RESULT : ACTION_NEAR_BY_GUIDES_RESULT);reply.putExtra(mGetLocationForProjects ? PROJECTS_RESULT : GUIDES_RESULT, projects);sendBroadcast(reply);}});thread.start();}@Overridepublic void onConnectionSuspended(int i) {}@Overridepublic void onDestroy() {mIsStopped = true;super.onDestroy();}}",INaturalistService.java,0
200,"package org.inaturalist.android;import com.cocosw.bottomsheet.BottomSheet;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.nio.channels.FileChannel;import java.sql.Timestamp;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.Hashtable;import java.util.Iterator;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.Map.Entry;import java.util.Random;import java.util.UUID;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.sanselan.ImageReadException;import org.apache.sanselan.ImageWriteException;import org.apache.sanselan.Sanselan;import org.apache.sanselan.common.IImageMetadata;import org.apache.sanselan.formats.jpeg.JpegImageMetadata;import org.apache.sanselan.formats.jpeg.exifRewrite.ExifRewriter;import org.apache.sanselan.formats.tiff.TiffImageMetadata;import org.apache.sanselan.formats.tiff.constants.TagInfo;import org.apache.sanselan.formats.tiff.constants.TiffConstants;import org.apache.sanselan.formats.tiff.write.TiffOutputDirectory;import org.apache.sanselan.formats.tiff.write.TiffOutputField;import org.apache.sanselan.formats.tiff.write.TiffOutputSet;import org.json.JSONArray;import org.json.JSONException;import org.lucasr.twowayview.TwoWayView;import com.ptashek.widgets.datetimepicker.DateTimePicker;import android.annotation.SuppressLint;import android.app.Activity;import android.app.ActivityOptions;import android.app.AlertDialog;import android.app.DatePickerDialog;import android.app.Dialog;import android.app.TimePickerDialog;import android.content.ActivityNotFoundException;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.ContentUris;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.content.pm.ResolveInfo;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.Typeface;import android.graphics.drawable.ColorDrawable;import android.location.Address;import android.location.Geocoder;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.media.ExifInterface;import android.media.MediaScannerConnection;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Parcelable;import android.provider.DocumentsContract;import android.provider.MediaStore;import android.support.v4.app.DialogFragment;import android.support.v4.content.CursorLoader;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Editable;import android.text.Html;import android.text.InputType;import android.text.TextWatcher;import android.util.Log;import android.util.TypedValue;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.ViewTreeObserver;import android.view.ViewTreeObserver.OnGlobalLayoutListener;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.DatePicker;import android.widget.EditText;import android.widget.Gallery;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.RadioButton;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TableLayout;import android.widget.TableRow;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;public class ObservationEditor extends AppCompatActivity {private final static String TAG = ""INAT: ObservationEditor"";public final static String TAKE_PHOTO = ""take_photo"";public final static String CHOOSE_PHOTO = ""choose_photo"";public final static String RETURN_TO_OBSERVATION_LIST = ""return_to_observation_list"";public static final int RESULT_DELETED = 0x1000;public static final int RESULT_RETURN_TO_OBSERVATION_LIST = 0x1001;public static final int RESULT_REFRESH_OBS = 0x1002;private Uri mUri;private Cursor mCursor;private Cursor mImageCursor;private EditText mSpeciesGuessTextView;private TextView mDescriptionTextView;private TextView mSaveButton;private TextView mObservedOnStringTextView;private TextView mObservedOnButton;private TextView mTimeObservedAtButton;private TwoWayView mGallery;private TextView mLatitudeView;private TextView mLongitudeView;private TextView mAccuracyView;private ProgressBar mLocationProgressView;private View mLocationRefreshButton;private TextView mProjectSelector;private Uri mFileUri;private Observation mObservation;private LocationManager mLocationManager;private LocationListener mLocationListener;private Location mCurrentLocation;private Long mLocationRequestedAt;private INaturalistApp app;private ActivityHelper mHelper;private boolean mCanceled = false;private boolean mIsCaptive = false;private ActionBar mTopActionBar;private ImageButton mDeleteButton;private ImageButton mViewOnInat;private TextView mObservationCommentsIds;private TableLayout mProjectFieldsTable;private ArrayList<String> mPhotosAdded;private ArrayList<ObservationPhoto> mPhotosRemoved;private static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 100;private static final int COMMENTS_IDS_REQUEST_CODE = 101;private static final int PROJECT_SELECTOR_REQUEST_CODE = 102;private static final int LOCATION_CHOOSER_REQUEST_CODE = 103;private static final int OBSERVATION_PHOTOS_REQUEST_CODE = 104;private static final int MEDIA_TYPE_IMAGE = 1;private static final int DATE_DIALOG_ID = 0;private static final int TIME_DIALOG_ID = 1;private static final int ONE_MINUTE = 60 * 1000;private static final int TAXON_SEARCH_REQUEST_CODE = 302;public static final String SPECIES_GUESS = ""species_guess"";public static final String OBSERVATION_PROJECT = ""observation_project"";private List<ProjectFieldViewer> mProjectFieldViewers;private CompoundButton mIdPlease;private Spinner mGeoprivacy;private String mSpeciesGuess;private ProjectReceiver mProjectReceiver;private ArrayList<BetterJSONObject> mProjects = null;private boolean mProjectFieldsUpdated = false;private boolean mDeleted = false;private boolean mIsConfirmation;private boolean mPictureTaken;private ImageView mSpeciesGuessIcon;private String mPreviousTaxonSearch = """";private String mTaxonPicUrl;private boolean mIsTaxonUnknown;private boolean mIsCustomTaxon;private TextView mProjectCount;private String mFirstPositionPhotoId;private boolean mGettingLocation;private ImageView mLocationIcon;private TextView mLocationGuess;private TextView mFindingCurrentLocation;private boolean mLocationManuallySet;private boolean mReturnToObservationList;private boolean mTaxonTextChanged = false;private boolean mTaxonSearchStarted = false;private boolean mPhotosChanged = false;private ArrayList<String> mCameraPhotos;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){// http://stackoverflow.com/questions/20776925/failed-binder-transaction-after-starting-an-activity#20803653// Remove what could be a giant array for users with a lot of projects. If you don't,// activities launched from this view (e.g. TaxonSearchActivity) are likely to experience a// lag before interactivity due to a FAILED BINDER TRANSACTIONif (mProjects != null) {mProjects.removeAll(mProjects);}super.onStop();FlurryAgent.onEndSession(this);}private class ProjectReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {mProjects = new ArrayList<BetterJSONObject>();SerializableJSONArray serializableArray = (SerializableJSONArray) intent.getSerializableExtra(INaturalistService.PROJECTS_RESULT);JSONArray projectList = new JSONArray();if (serializableArray != null) {projectList = serializableArray.getJSONArray();}for (int i = 0; i < projectList.length(); i++) {try {mProjects.add(new BetterJSONObject(projectList.getJSONObject(i)));} catch (JSONException e) {e.printStackTrace();}}Collections.sort(mProjects, new Comparator<BetterJSONObject>() {@Overridepublic int compare(BetterJSONObject lhs, BetterJSONObject rhs) {return lhs.getString(""title"").compareTo(rhs.getString(""title""));}});refreshProjectList();}}private void refreshProjectList() {if (mProjectIds.size() == 0) {mProjectCount.setVisibility(View.GONE);mProjectSelector.setTextColor(Color.parseColor(""#8A000000""));mProjectSelector.setText(R.string.add_to_projects);} else {mProjectCount.setVisibility(View.VISIBLE);mProjectCount.setText(String.valueOf(mProjectIds.size()));mProjectSelector.setTextColor(Color.parseColor(""#000000""));mProjectSelector.setText(R.string.projects);}}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {MenuInflater inflater = getMenuInflater();if (mIsConfirmation) {inflater.inflate(R.menu.observation_confirmation_menu, menu);} else {inflater.inflate(R.menu.observation_editor_menu, menu);}return true;}/*** LIFECYCLE CALLBACKS*/@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);final Intent intent = getIntent();if ((savedInstanceState == null) && (intent != null) && (intent.getData() != null)) {int uriMatch = ObservationProvider.URI_MATCHER.match(intent.getData());if ((uriMatch == Observation.OBSERVATIONS_URI_CODE) || (uriMatch == ObservationPhoto.OBSERVATION_PHOTOS_URI_CODE)) {// Show the confirmation screenmIsConfirmation = true;} else {mIsConfirmation = false;}} else {// Show the observation editor screenmIsConfirmation = savedInstanceState.getBoolean(""mIsConfirmation"", false);}mCameraPhotos = new ArrayList<String>();setContentView(R.layout.observation_confirmation);if (mIsConfirmation) {setTitle(R.string.details);} else {setTitle(R.string.edit_observation);}if (app == null) {app = (INaturalistApp) getApplicationContext();}if (mHelper == null) {mHelper = new ActivityHelper(this);}if (savedInstanceState == null) {// Do some setup based on the action being performed.Uri uri = intent.getData();if (uri == null) {Log.e(TAG, ""Null URI from intent.getData"");finish();return;}switch (ObservationProvider.URI_MATCHER.match(uri)) {case Observation.OBSERVATION_ID_URI_CODE:getIntent().setAction(Intent.ACTION_EDIT);mUri = uri;break;case Observation.OBSERVATIONS_URI_CODE:mUri = getContentResolver().insert(uri, null);if (mUri == null) {Log.e(TAG, ""Failed to insert new observation into "" + uri);finish();return;}setResult(RESULT_OK, (new Intent()).setAction(mUri.toString()));getIntent().setAction(Intent.ACTION_INSERT);break;case ObservationPhoto.OBSERVATION_PHOTOS_URI_CODE:mFileUri = (Uri) intent.getExtras().get(""photoUri"");if (mFileUri == null) {Toast.makeText(getApplicationContext(), getString(R.string.photo_not_specified), Toast.LENGTH_SHORT).show();finish();return;}mFileUri = getPath(this, mFileUri);mUri = getContentResolver().insert(Observation.CONTENT_URI, null);if (mUri == null) {Log.e(TAG, ""Failed to insert new observation into "" + uri);finish();return;}mCursor = managedQuery(mUri, Observation.PROJECTION, null, null, null);mObservation = new Observation(mCursor);updateImageOrientation(mFileUri);createObservationPhotoForPhoto(mFileUri);setResult(RESULT_OK, (new Intent()).setAction(mUri.toString()));getIntent().setAction(Intent.ACTION_INSERT);mFileUri = null;break;default:Log.e(TAG, ""Unknown action, exiting"");finish();return;}mPhotosAdded = new ArrayList<String>();mPhotosRemoved = new ArrayList<ObservationPhoto>();} else {String fileUri = savedInstanceState.getString(""mFileUri"");if (fileUri != null) {mFileUri = Uri.parse(fileUri);}String obsUri = savedInstanceState.getString(""mUri"");if (obsUri != null) {mUri = Uri.parse(obsUri);} else {mUri = intent.getData();}mObservation = (Observation) savedInstanceState.getSerializable(""mObservation"");mProjects = (ArrayList<BetterJSONObject>) savedInstanceState.getSerializable(""mProjects"");mProjectIds = savedInstanceState.getIntegerArrayList(""mProjectIds"");mProjectFieldValues = (HashMap<Integer, ProjectFieldValue>) savedInstanceState.getSerializable(""mProjectFieldValues"");mProjectFieldsUpdated = savedInstanceState.getBoolean(""mProjectFieldsUpdated"");mPictureTaken = savedInstanceState.getBoolean(""mPictureTaken"", false);mPreviousTaxonSearch = savedInstanceState.getString(""mPreviousTaxonSearch"");mTaxonPicUrl = savedInstanceState.getString(""mTaxonPicUrl"");mIsCaptive = savedInstanceState.getBoolean(""mIsCaptive"", false);mFirstPositionPhotoId = savedInstanceState.getString(""mFirstPositionPhotoId"");mGettingLocation = savedInstanceState.getBoolean(""mGettingLocation"");mLocationManuallySet = savedInstanceState.getBoolean(""mLocationManuallySet"");mReturnToObservationList = savedInstanceState.getBoolean(""mReturnToObservationList"");mPhotosChanged = savedInstanceState.getBoolean(""mPhotosChanged"");mPhotosAdded = savedInstanceState.getStringArrayList(""mPhotosAdded"");mPhotosRemoved = (ArrayList<ObservationPhoto>) savedInstanceState.getSerializable(""mPhotosRemoved"");mCameraPhotos = savedInstanceState.getStringArrayList(""mCameraPhotos"");}findViewById(R.id.locationVisibility).setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {mHelper.selection(getString(R.string.location_visibility), getResources().getStringArray(R.array.geoprivacy_items), new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {mGeoprivacy.setSelection(which);updateObservationVisibilityDescription();}});}});findViewById(R.id.is_captive_checkbox).setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {mIsCaptive = !mIsCaptive;if (mIsCaptive) {findViewById(R.id.is_captive_on_icon).setVisibility(View.VISIBLE);findViewById(R.id.is_captive_off_icon).setVisibility(View.GONE);} else {findViewById(R.id.is_captive_on_icon).setVisibility(View.GONE);findViewById(R.id.is_captive_off_icon).setVisibility(View.VISIBLE);}}});mIdPlease = (CompoundButton) findViewById(R.id.id_please);mGeoprivacy = (Spinner) findViewById(R.id.geoprivacy);mSpeciesGuessTextView = (EditText) findViewById(R.id.speciesGuess);mSpeciesGuessIcon = (ImageView) findViewById(R.id.species_guess_icon);mDescriptionTextView = (TextView) findViewById(R.id.description);mSaveButton = (TextView) findViewById(R.id.save_observation);mObservedOnButton = (TextView) findViewById(R.id.observed_on);mObservedOnStringTextView = (TextView) findViewById(R.id.observed_on_string);mTimeObservedAtButton = (TextView) findViewById(R.id.time_observed_at);mGallery = (TwoWayView) findViewById(R.id.gallery);float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics());mGallery.setItemMargin((int)px);mLatitudeView = (TextView) findViewById(R.id.latitude);mLongitudeView = (TextView) findViewById(R.id.longitude);mAccuracyView = (TextView) findViewById(R.id.accuracy);mLocationProgressView = (ProgressBar) findViewById(R.id.locationProgress);mLocationRefreshButton = (View) findViewById(R.id.locationRefreshButton);mTopActionBar = getSupportActionBar();mDeleteButton = (ImageButton) findViewById(R.id.delete_observation);mViewOnInat = (ImageButton) findViewById(R.id.view_on_inat);mObservationCommentsIds = (TextView) findViewById(R.id.commentIdCount);mProjectSelector = (TextView) findViewById(R.id.select_projects);mProjectCount = (TextView) findViewById(R.id.project_count);mProjectFieldsTable = (TableLayout) findViewById(R.id.project_fields);mLocationIcon = (ImageView) findViewById(R.id.location_icon);mLocationGuess = (TextView) findViewById(R.id.location_guess);mFindingCurrentLocation = (TextView) findViewById(R.id.finding_current_location);mProjectSelector.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(ObservationEditor.this, ProjectSelectorActivity.class);intent.putExtra(INaturalistService.OBSERVATION_ID, (mObservation.id == null ? mObservation._id : mObservation.id));intent.putExtra(ProjectSelectorActivity.IS_CONFIRMATION, true);intent.putExtra(ProjectSelectorActivity.PROJECT_FIELDS, mProjectFieldValues);intent.putIntegerArrayListExtra(INaturalistService.PROJECT_ID, mProjectIds);startActivityForResult(intent, PROJECT_SELECTOR_REQUEST_CODE);}});findViewById(R.id.coordinates).setVisibility(View.GONE);if (mTaxonPicUrl != null) {UrlImageViewHelper.setUrlDrawable(mSpeciesGuessIcon, mTaxonPicUrl, R.drawable.ic_species_guess_black_24dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {mSpeciesGuessIcon.setAlpha(1.0f);}}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});}mSpeciesGuessTextView.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {mTaxonSearchStarted = true;Intent intent = new Intent(ObservationEditor.this, TaxonSearchActivity.class);intent.putExtra(TaxonSearchActivity.SPECIES_GUESS, mSpeciesGuessTextView.getText().toString());intent.putExtra(TaxonSearchActivity.SHOW_UNKNOWN, true);startActivityForResult(intent, TAXON_SEARCH_REQUEST_CODE);}});mSpeciesGuessTextView.addTextChangedListener(new TextWatcher() {@Overridepublic void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}@Overridepublic void afterTextChanged(Editable editable) {return;/*String newTaxon = mSpeciesGuessTextView.getText().toString();if ((!mTaxonTextChanged) && (!mTaxonSearchStarted)) {mTaxonSearchStarted = true;Intent intent = new Intent(ObservationEditor.this, TaxonSearchActivity.class);intent.putExtra(TaxonSearchActivity.SPECIES_GUESS, newTaxon);intent.putExtra(TaxonSearchActivity.SHOW_UNKNOWN, true);if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {// Special material design animationView sharedView = mSpeciesGuessTextView;String transitionName = ""search_taxon"";ActivityOptions transitionActivityOptions = ActivityOptions.makeSceneTransitionAnimation(ObservationEditor.this, sharedView, transitionName);try {startActivityForResult(intent, TAXON_SEARCH_REQUEST_CODE, transitionActivityOptions.toBundle());} catch (Exception exc) {// Internal Android bug when rotating screen of activity opened this wayexc.printStackTrace();startActivityForResult(intent, TAXON_SEARCH_REQUEST_CODE);}} else {startActivityForResult(intent, TAXON_SEARCH_REQUEST_CODE);}}*/}});mTopActionBar.setHomeButtonEnabled(true);mTopActionBar.setDisplayHomeAsUpEnabled(true);View takePhoto;mTopActionBar.setLogo(R.drawable.ic_arrow_back);mTopActionBar.setTitle(getString(R.string.details));takePhoto = findViewById(R.id.take_photo);takePhoto.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {mFileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE); // create a file to save the imagemFileUri = getPath(ObservationEditor.this, mFileUri);openImageIntent(ObservationEditor.this, mFileUri, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);}});mSpeciesGuess = intent.getStringExtra(SPECIES_GUESS);initUi();mObservedOnButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {showDialog(DATE_DIALOG_ID);}});mTimeObservedAtButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {showDialog(TIME_DIALOG_ID);}});mLocationRefreshButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {AlertDialog.Builder builder = new AlertDialog.Builder(ObservationEditor.this);// Set the adapterString[] items = {getResources().getString(R.string.get_current_location),getResources().getString(R.string.edit_location)};builder.setAdapter(new ArrayAdapter<String>(ObservationEditor.this,android.R.layout.simple_list_item_1, items), null);final AlertDialog alertDialog = builder.create();ListView listView = alertDialog.getListView();listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {alertDialog.dismiss();if (position == 0) {// Get current locationmLocationManuallySet = true;getLocation();} else {// Edit locationIntent intent = new Intent(ObservationEditor.this, LocationChooserActivity.class);Double lat, lon;lat = mObservation.private_latitude == null ? mObservation.latitude : mObservation.private_latitude;lon = mObservation.private_longitude == null ? mObservation.longitude : mObservation.private_longitude;intent.putExtra(LocationChooserActivity.LONGITUDE, lon);intent.putExtra(LocationChooserActivity.LATITUDE,  lat);intent.putExtra(LocationChooserActivity.ACCURACY, (mObservation.positional_accuracy != null ? mObservation.positional_accuracy.doubleValue() : 0));intent.putExtra(LocationChooserActivity.ICONIC_TAXON_NAME, mObservation.iconic_taxon_name);startActivityForResult(intent, LOCATION_CHOOSER_REQUEST_CODE);}}});alertDialog.show();}});if (getCurrentFocus() != null) {// Hide keyboardgetWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);}getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);if (mProjectIds == null) {if ((intent != null) && (intent.hasExtra(OBSERVATION_PROJECT))) {Integer projectId = intent.getIntExtra(OBSERVATION_PROJECT, 0);mProjectIds = new ArrayList<Integer>();mProjectIds.add(projectId);} else {// Get IDs of project-observationsint obsId = (mObservation.id == null ? mObservation._id : mObservation.id);Cursor c = getContentResolver().query(ProjectObservation.CONTENT_URI, ProjectObservation.PROJECTION,""(observation_id = "" + obsId + "") AND ((is_deleted = 0) OR (is_deleted is NULL))"",null, ProjectObservation.DEFAULT_SORT_ORDER);c.moveToFirst();mProjectIds = new ArrayList<Integer>();while (c.isAfterLast() == false) {ProjectObservation projectObservation = new ProjectObservation(c);mProjectIds.add(projectObservation.project_id);c.moveToNext();}c.close();}}refreshProjectFields();mProjectReceiver = new ProjectReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_JOINED_PROJECTS_RESULT);registerReceiver(mProjectReceiver, filter);if (mProjects == null) {Intent serviceIntent = new Intent(INaturalistService.ACTION_GET_JOINED_PROJECTS, null, this, INaturalistService.class);startService(serviceIntent);} else {refreshProjectList();}if ((intent != null) && (!mPictureTaken)) {if (intent.getBooleanExtra(TAKE_PHOTO, false)) {// Immediately take a phototakePhoto();} else if (intent.getBooleanExtra(CHOOSE_PHOTO, false)) {// Immediately choose an existing photochoosePhoto();}}if (intent != null) {mReturnToObservationList =  intent.getBooleanExtra(RETURN_TO_OBSERVATION_LIST, false);}updateObservationVisibilityDescription();((SwipeableLinearLayout)findViewById(R.id.swipeable_layout)).setOnSwipeListener(new SwipeableLinearLayout.SwipeListener() {@Overridepublic void onSwipeRight() {editNextObservation(-1);}@Overridepublic void onSwipeLeft() {editNextObservation(1);}});}private void editNextObservation(int direction) {Log.v(""ObservationEditor"", ""editNextObservation: Direction = "" + direction);SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String login = prefs.getString(""username"", null);String conditions = ""(_synced_at IS NULL"";if (login != null) {conditions += "" OR user_login = '"" + login + ""'"";}conditions += "") AND (is_deleted = 0 OR is_deleted is NULL)""; // Don't show deleted observationsCursor cursor = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION,conditions, null, Observation.DEFAULT_SORT_ORDER);// Find next observationLong obsId, externalObsId;cursor.moveToFirst();Log.e(""ObservationEditor"", ""Current obs id: "" + mObservation._id + "", "" + mObservation.id);do {obsId = cursor.getLong(cursor.getColumnIndexOrThrow(Observation._ID));externalObsId = cursor.getLong(cursor.getColumnIndexOrThrow(Observation.ID));if (((mObservation._id != null) && (obsId.equals(mObservation._id.longValue()))) ||((mObservation.id != null) && (externalObsId.equals(mObservation.id.longValue())))) {Log.e(""ObservationEditor"", ""Found current obs with "" + obsId + "", "" + externalObsId);break;}} while (cursor.moveToNext());if (((direction == 1) && !cursor.isLast() && !cursor.isAfterLast()) ||((direction == -1) && !cursor.isFirst() && !cursor.isBeforeFirst())) {// Edit the next observation (if one is available)if (direction == 1) {Log.v(""ObservationEditor"", ""Moving to previous observation"");cursor.moveToNext();} else {Log.v(""ObservationEditor"", ""Moving to next observation"");cursor.moveToPrevious();}obsId = cursor.getLong(cursor.getColumnIndexOrThrow(Observation._ID));externalObsId = cursor.getLong(cursor.getColumnIndexOrThrow(Observation.ID));Log.e(""ObservationEditor"", ""Next obs ID: "" + obsId + "", "" + externalObsId);cursor.close();Uri uri = ContentUris.withAppendedId(Observation.CONTENT_URI, obsId != null ? obsId : externalObsId);Intent intent = new Intent(Intent.ACTION_EDIT, uri, this, ObservationEditor.class);intent.putExtra(RETURN_TO_OBSERVATION_LIST, true);startActivity(intent);uiToProjectFieldValues();if (save()) {setResult(RESULT_RETURN_TO_OBSERVATION_LIST);finish();}}}private void takePhoto() {/*mFileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE); // create a file to save the imagemFileUri = getPath(ObservationEditor.this, mFileUri);*/// Temp file for the photomFileUri = Uri.fromFile(new File(getExternalCacheDir(), UUID.randomUUID().toString() + "".jpeg""));final Intent galleryIntent = new Intent();galleryIntent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);galleryIntent.putExtra(MediaStore.EXTRA_OUTPUT, mFileUri);this.startActivityForResult(galleryIntent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);// In case a new/existing photo was taken - make sure we won't retake it in case the activity pauses/resumes.mPictureTaken = true;}private void choosePhoto() {mFileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE); // create a file to save the imagemFileUri = getPath(ObservationEditor.this, mFileUri);final Intent galleryIntent = new Intent();galleryIntent.setType(""image/*"");galleryIntent.setAction(Intent.ACTION_GET_CONTENT);this.startActivityForResult(galleryIntent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);// In case a new/existing photo was taken - make sure we won't retake it in case the activity pauses/resumes.mPictureTaken = true;}@Overridepublic void onBackPressed() {onBack();}private boolean onBack() {Observation observationCopy = new Observation(mCursor);uiToObservation();if (!mObservation.isDirty() && !mPhotosChanged) {// User hasn't changed anything - no need to display confirmation dialogmCanceled = true;setResult(mReturnToObservationList ? RESULT_RETURN_TO_OBSERVATION_LIST : RESULT_CANCELED);finish();return false;}// Restore the old observation (since uiToObservation has overwritten it)mObservation = observationCopy;// Display a confirmation dialogconfirm(ObservationEditor.this, R.string.edit_observation, R.string.discard_changes,R.string.yes, R.string.no,new Runnable() {public void run() {// Get back to the observations list (consider this as canceled)mCanceled = true;revertPhotos();setResult(mReturnToObservationList ? RESULT_RETURN_TO_OBSERVATION_LIST : RESULT_CANCELED);finish();}},null);return true;}// User canceled - revert any changes made to the observation photosprivate void revertPhotos() {// Add any photos that were deletedfor (ObservationPhoto photo : mPhotosRemoved) {ContentValues cv = photo.getContentValues();getContentResolver().insert(ObservationPhoto.CONTENT_URI, cv);}// Delete any photos that were addedfor (String uriString : mPhotosAdded) {Uri uri = Uri.parse(uriString);getContentResolver().delete(uri, null, null);}// Restore the positions of all photosupdateImages();GalleryCursorAdapter adapter = (GalleryCursorAdapter) mGallery.getAdapter();adapter.refreshPhotoPositions(null);}private boolean hasNoCoords() {if (mLatitudeView.getText() == null || mLatitudeView.getText().length() == 0) {return true;}if (mLongitudeView.getText() == null || mLongitudeView.getText().length() == 0) {return true;}return false;}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:return onBack();case R.id.save_observation:if (hasNoCoords()) {// Confirm with the user that he's about to save an observation with no coordinatesconfirm(ObservationEditor.this, R.string.save_observation, R.string.are_you_sure_you_want_to_save_obs_without_coords,R.string.yes, R.string.no,new Runnable() {@Overridepublic void run() {uiToProjectFieldValues();if (save()) {setResult(mReturnToObservationList ? RESULT_RETURN_TO_OBSERVATION_LIST : RESULT_REFRESH_OBS);finish();}}}, null);return true;}uiToProjectFieldValues();if (save()) {setResult(mReturnToObservationList ? RESULT_RETURN_TO_OBSERVATION_LIST : RESULT_REFRESH_OBS);finish();}return true;case R.id.delete_observation:// Display a confirmation dialogconfirm(ObservationEditor.this, R.string.delete_observation, R.string.delete_confirmation,R.string.yes, R.string.no,new Runnable() {public void run() {delete((mObservation == null) || (mObservation.id == null));Toast.makeText(ObservationEditor.this, R.string.observation_deleted, Toast.LENGTH_SHORT).show();if (app.getAutoSync() && !app.getIsSyncing()) {// Trigger a syncIntent serviceIntent = new Intent(INaturalistService.ACTION_SYNC, null, ObservationEditor.this, INaturalistService.class);startService(serviceIntent);}setResult(mReturnToObservationList ? RESULT_RETURN_TO_OBSERVATION_LIST : RESULT_DELETED);finish();}},null);return true;}return true;}@Overrideprotected void onSaveInstanceState(Bundle outState) {// Save away the original text, so we still have it if the activity// needs to be killed while paused.if (mFileUri != null) { outState.putString(""mFileUri"", mFileUri.toString()); }if (mUri != null) { outState.putString(""mUri"", mUri.toString()); }uiToObservation();outState.putSerializable(""mObservation"", mObservation);outState.putSerializable(""mProjects"", mProjects);outState.putIntegerArrayList(""mProjectIds"", mProjectIds);uiToProjectFieldValues();outState.putSerializable(""mProjectFieldValues"", mProjectFieldValues);outState.putBoolean(""mProjectFieldsUpdated"", mProjectFieldsUpdated);outState.putBoolean(""mIsConfirmation"", mIsConfirmation);outState.putBoolean(""mPictureTaken"", mPictureTaken);outState.putString(""mPreviousTaxonSearch"", mPreviousTaxonSearch);outState.putString(""mTaxonPicUrl"", mTaxonPicUrl);outState.putBoolean(""mIsCaptive"", mIsCaptive);outState.putString(""mFirstPositionPhotoId"", mFirstPositionPhotoId);outState.putBoolean(""mGettingLocation"", mGettingLocation);outState.putBoolean(""mLocationManuallySet"", mLocationManuallySet);outState.putBoolean(""mReturnToObservationList"", mReturnToObservationList);outState.putBoolean(""mPhotosChanged"", mPhotosChanged);outState.putStringArrayList(""mPhotosAdded"", mPhotosAdded);outState.putSerializable(""mPhotosRemoved"", mPhotosRemoved);outState.putStringArrayList(""mCameraPhotos"", mCameraPhotos);super.onSaveInstanceState(outState);}@Overrideprotected void onPause() {super.onPause();if (mProjectReceiver != null) {try {unregisterReceiver(mProjectReceiver);} catch (Exception exc) {exc.printStackTrace();}}stopGetLocation();uiToProjectFieldValues();if (isFinishing()) {if (!mDeleted) {if (isDeleteable()) {delete(true);} else if (!mCanceled) {save();}}}}private void uiToProjectFieldValues() {int obsId = (mObservation.id == null ? mObservation._id : mObservation.id);for (int fieldId : mProjectFieldValues.keySet()) {ProjectFieldValue fieldValue = mProjectFieldValues.get(fieldId);fieldValue.observation_id = obsId;mProjectFieldsUpdated = true;}}@Overrideprotected void onResume() {super.onResume();initUi();if (app == null) {app = (INaturalistApp) getApplicationContext();}}private void initUi() {if (mCursor == null) {mCursor = managedQuery(mUri, Observation.PROJECTION, null, null, null);} else {mCursor.requery();}if (mObservation == null) {mObservation = new Observation(mCursor);}if ((mSpeciesGuess != null) && (mObservation.species_guess == null)) {mObservation.species_guess = mSpeciesGuess;}mLocationProgressView.setVisibility(View.GONE);mFindingCurrentLocation.setVisibility(View.GONE);mLocationRefreshButton.setVisibility(View.VISIBLE);mLocationIcon.setVisibility(View.VISIBLE);if (mGettingLocation) {mLocationProgressView.setVisibility(View.VISIBLE);mFindingCurrentLocation.setVisibility(View.VISIBLE);mLocationRefreshButton.setVisibility(View.GONE);mLocationIcon.setVisibility(View.GONE);getLocation();}if (Intent.ACTION_INSERT.equals(getIntent().getAction())) {if (mObservation.observed_on == null) {mObservation.observed_on = mObservation.observed_on_was = new Timestamp(System.currentTimeMillis());mObservation.time_observed_at = mObservation.time_observed_at_was = mObservation.observed_on;mObservation.observed_on_string = mObservation.observed_on_string_was = app.formatDatetime(mObservation.time_observed_at);if (mObservation.latitude == null && mCurrentLocation == null) {getLocation();}}}if ((mObservation != null) && (mObservation.id != null)) {// Display the errors for the observation, if anyJSONArray errors = app.getErrorsForObservation(mObservation.id);TextView errorsDescription = (TextView) findViewById(R.id.errors);if (errors.length() == 0) {errorsDescription.setVisibility(View.GONE);} else {errorsDescription.setVisibility(View.VISIBLE);StringBuilder errorsHtml = new StringBuilder();try {for (int i = 0; i < errors.length(); i++) {errorsHtml.append(""&#8226; "");errorsHtml.append(errors.getString(i));if (i < errors.length() - 1)errorsHtml.append(""<br/>"");}} catch (JSONException e) {e.printStackTrace();}errorsDescription.setText(Html.fromHtml(errorsHtml.toString()));}}updateUi();}private void updateUi() {observationToUi();updateImages();}private void uiToObservation() {if ((((mObservation.species_guess == null) && (mSpeciesGuessTextView.getText().length() > 0) && (!mIsTaxonUnknown)) || (mObservation.species_guess != null)) && (!mTaxonSearchStarted)) mObservation.species_guess = mSpeciesGuessTextView.getText().toString();if (((mObservation.description == null) && (mDescriptionTextView.getText().length() > 0)) || (mObservation.description != null)) mObservation.description = mDescriptionTextView.getText().toString();if (mObservedOnStringTextView.getText() == null || mObservedOnStringTextView.getText().length() == 0) {mObservation.observed_on_string = null;} else {mObservation.observed_on_string = mObservedOnStringTextView.getText().toString();mObservation.observed_on = mDateSetByUser;mObservation.time_observed_at = mTimeSetByUser;}if (mLatitudeView.getText() == null || mLatitudeView.getText().length() == 0) {mObservation.latitude = null;} else {mObservation.latitude = Double.parseDouble(mLatitudeView.getText().toString());}if (mLongitudeView.getText() == null || mLongitudeView.getText().length() == 0) {mObservation.longitude = null;} else {mObservation.longitude = Double.parseDouble(mLongitudeView.getText().toString());}if (mAccuracyView.getText() == null || mAccuracyView.getText().length() == 0) {mObservation.positional_accuracy = null;} else {mObservation.positional_accuracy = ((Float) Float.parseFloat(mAccuracyView.getText().toString())).intValue();}if (mObservation.uuid == null) {mObservation.uuid = UUID.randomUUID().toString();}mObservation.id_please = mIdPlease.isChecked();List<String> values = Arrays.asList(getResources().getStringArray(R.array.geoprivacy_values));String selectedValue = values.get(mGeoprivacy.getSelectedItemPosition());if ((mObservation.geoprivacy != null) || (mGeoprivacy.getSelectedItemPosition() != 0)) {mObservation.geoprivacy = selectedValue;}if ((mObservation.captive != null) || ((mObservation.captive == null) && (mIsCaptive))) {mObservation.captive = mIsCaptive;}}private void updateObservationVisibilityDescription() {List<String> names = Arrays.asList(getResources().getStringArray(R.array.geoprivacy_items));String selectedName = names.get(mGeoprivacy.getSelectedItemPosition());((TextView)findViewById(R.id.location_visibility_description)).setText(getString(R.string.location_is) + "" "" + selectedName);}private void observationToUi() {List<String> values = Arrays.asList(getResources().getStringArray(R.array.geoprivacy_values));if (mObservation.geoprivacy != null) {mGeoprivacy.setSelection(values.indexOf(mObservation.geoprivacy));} else {mGeoprivacy.setSelection(0);}updateObservationVisibilityDescription();mIdPlease.setChecked(mObservation.id_please);mTaxonTextChanged = true;mSpeciesGuessTextView.setText(mIsTaxonUnknown ? ""Unknown"" : mObservation.species_guess);mTaxonTextChanged = false;mDescriptionTextView.setText(mObservation.description);if (mObservation.observed_on == null) {mObservedOnButton.setText(getString(R.string.set_date));mObservedOnButton.setTextColor(Color.parseColor(""#757575""));} else {mObservedOnButton.setText(app.shortFormatDate(mObservation.observed_on));mObservedOnButton.setTextColor(Color.parseColor(""#000000""));}if (mObservation.observed_on_string != null) {mObservedOnStringTextView.setText(mObservation.observed_on_string);mObservedOnStringTextView.setTextColor(Color.parseColor(""#000000""));mDateSetByUser = mObservation.observed_on;}if (mObservation.time_observed_at == null) {mTimeObservedAtButton.setText(getString(R.string.set_time));mTimeObservedAtButton.setTextColor(Color.parseColor(""#757575""));} else {mTimeObservedAtButton.setText(app.shortFormatTime(mObservation.time_observed_at));mTimeSetByUser = mObservation.time_observed_at;mTimeObservedAtButton.setTextColor(Color.parseColor(""#000000""));}if ((mObservation.latitude != null) || (mObservation.private_latitude != null)) {mLatitudeView.setText(mObservation.latitude != null ? mObservation.latitude.toString() : mObservation.private_latitude.toString() );findViewById(R.id.coordinates).setVisibility(View.VISIBLE);} else {mLatitudeView.setText("""");}if ((mObservation.longitude != null) || (mObservation.private_longitude != null)) {mLongitudeView.setText(mObservation.longitude != null ? mObservation.longitude.toString() : mObservation.private_longitude.toString() );} else {mLongitudeView.setText("""");}if ((mObservation.positional_accuracy == null) && (mObservation.private_positional_accuracy == null)) {mAccuracyView.setText("""");findViewById(R.id.accuracy_prefix).setVisibility(View.GONE);findViewById(R.id.accuracy).setVisibility(View.GONE);} else {mAccuracyView.setText(mObservation.positional_accuracy != null ? mObservation.positional_accuracy.toString() : mObservation.private_positional_accuracy.toString() );findViewById(R.id.accuracy_prefix).setVisibility(View.VISIBLE);findViewById(R.id.accuracy).setVisibility(View.VISIBLE);}mIsCaptive = mObservation.captive;if (mIsCaptive) {findViewById(R.id.is_captive_on_icon).setVisibility(View.VISIBLE);findViewById(R.id.is_captive_off_icon).setVisibility(View.GONE);} else {findViewById(R.id.is_captive_on_icon).setVisibility(View.GONE);findViewById(R.id.is_captive_off_icon).setVisibility(View.VISIBLE);}if (mObservation.place_guess != null) {mLocationGuess.setText(mObservation.place_guess);mLocationGuess.setTextColor(Color.parseColor(""#000000""));} else {mLocationGuess.setText(getString(R.string.set_location));mLocationGuess.setTextColor(Color.parseColor(""#757575""));}}/*** CRUD WRAPPERS*/private final Boolean isDeleteable() {if (mCursor == null) { return true; }Cursor c = getContentResolver().query(mUri, new String[]{Observation._ID}, null, null, null);if (c.getCount() == 0) { return true; }//if (mImageCursor != null && mImageCursor.getCount() > 0) { return false; }if (Intent.ACTION_INSERT.equals(getIntent().getAction()) && mCanceled) return true;return false;}private final boolean save() {if (mCursor == null) { return true; }uiToObservation();boolean updatedProjects = saveProjects();saveProjectFields();if ((Intent.ACTION_INSERT.equals(getIntent().getAction())) || (mObservation.isDirty()) || (mProjectFieldsUpdated) || (updatedProjects)) {try {ContentValues cv = mObservation.getContentValues();if (mObservation.latitude_changed()) {cv.put(Observation.POSITIONING_METHOD, ""gps"");cv.put(Observation.POSITIONING_DEVICE, ""gps"");}getContentResolver().update(mUri, cv, null, null);} catch (NullPointerException e) {Log.e(TAG, ""failed to save observation:"" + e);}}if (app.getAutoSync() && !app.getIsSyncing()) {// Trigger a syncIntent serviceIntent = new Intent(INaturalistService.ACTION_SYNC, null, ObservationEditor.this, INaturalistService.class);startService(serviceIntent);}return true;}private final void delete(boolean deleteLocal) {if (mCursor == null) { return; }if (deleteLocal) {try {getContentResolver().delete(mUri, null, null);if (mImageCursor != null && mImageCursor.getCount() > 0) {// Delete any observation photos taken with itgetContentResolver().delete(ObservationPhoto.CONTENT_URI, ""_observation_id=?"", new String[]{mObservation._id.toString()});}} catch (NullPointerException e) {Log.e(TAG, ""Failed to delete observation: "" + e);}} else {// Only mark as deleted (so we'll later on sync the deletion)ContentValues cv = mObservation.getContentValues();cv.put(Observation.IS_DELETED, 1);getContentResolver().update(mUri, cv, null, null);}mDeleted = true;}/*** MENUS*//** Create a file Uri for saving an image or video */private Uri getOutputMediaFileUri(int type){ContentValues values = new ContentValues();String timeStamp = new SimpleDateFormat(""yyyyMMdd_HHmmss"").format(new Date());String name = ""observation_"" + mObservation._created_at.getTime() + ""_"" + timeStamp;values.put(android.provider.MediaStore.Images.Media.TITLE, name);return getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);}/*** Date/Time Pickers*/private DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() {public void onDateSet(DatePicker view, int year, int month, int day) {Timestamp refDate;Timestamp date;try {refDate = new Timestamp(INaturalistApp.DATETIME_FORMAT.parse(mObservedOnStringTextView.getText().toString()).getTime());date = new Timestamp(year - 1900, month, day, refDate.getHours(), refDate.getMinutes(), refDate.getSeconds(), refDate.getNanos());if (date.getTime() > System.currentTimeMillis()) {date = new Timestamp(System.currentTimeMillis());}mObservedOnStringTextView.setText(INaturalistApp.DATETIME_FORMAT.format(date));mObservedOnStringTextView.setTextColor(Color.parseColor(""#000000""));mObservedOnButton.setText(app.shortFormatDate(date));} catch (ParseException dateTimeException) {date = new Timestamp(year - 1900, month, day, 0, 0, 0, 0);if (date.getTime() > System.currentTimeMillis()) {date = new Timestamp(System.currentTimeMillis());}mObservedOnStringTextView.setText(app.formatDate(date));mObservedOnStringTextView.setTextColor(Color.parseColor(""#000000""));mObservedOnButton.setText(app.shortFormatDate(date));}mDateSetByUser = date;mObservedOnButton.setTextColor(Color.parseColor(""#000000""));}};private Timestamp mDateSetByUser;private Timestamp mTimeSetByUser;private TimePickerDialog.OnTimeSetListener mTimeSetListener = new TimePickerDialog.OnTimeSetListener() {public void onTimeSet(TimePicker view, int hour, int minute) {Timestamp refDate;Date date;try {date = INaturalistApp.DATETIME_FORMAT.parse(mObservedOnStringTextView.getText().toString());refDate = new Timestamp(date.getTime());} catch (ParseException dateTimeException) {try {date = INaturalistApp.DATE_FORMAT.parse(mObservedOnStringTextView.getText().toString());refDate = new Timestamp(date.getTime());} catch (ParseException dateException) {if (mObservation.time_observed_at != null) {refDate = mObservation.time_observed_at;} else if (mObservation.observed_on != null) {refDate = mObservation.observed_on;} else {refDate = new Timestamp(System.currentTimeMillis());}}}Timestamp datetime = new Timestamp(refDate.getYear(), refDate.getMonth(), refDate.getDate(), hour, minute, 0, 0);if (datetime.getTime() > System.currentTimeMillis()) {datetime = new Timestamp(System.currentTimeMillis());}mObservedOnStringTextView.setText(app.formatDatetime(datetime));mObservedOnStringTextView.setTextColor(Color.parseColor(""#000000""));mTimeObservedAtButton.setText(app.shortFormatTime(datetime));mTimeObservedAtButton.setTextColor(Color.parseColor(""#000000""));mTimeSetByUser = datetime;}};private ArrayList<Integer> mProjectIds;private Hashtable<Integer, ProjectField> mProjectFields;private HashMap<Integer, ProjectFieldValue> mProjectFieldValues = null;@Overrideprotected Dialog onCreateDialog(int id) {switch (id) {case DATE_DIALOG_ID:Timestamp refDate;if (mObservation.observed_on != null) {refDate = mObservation.observed_on;} else {refDate = new Timestamp(Long.valueOf(System.currentTimeMillis()));}try {return new DatePickerDialog(this, mDateSetListener,refDate.getYear() + 1900,refDate.getMonth(),refDate.getDate());} catch (IllegalArgumentException e) {refDate = new Timestamp(Long.valueOf(System.currentTimeMillis()));return new DatePickerDialog(this, mDateSetListener,refDate.getYear() + 1900,refDate.getMonth(),refDate.getDate());}case TIME_DIALOG_ID:if (mObservation.time_observed_at != null) {refDate = mObservation.time_observed_at;} else {refDate = new Timestamp(Long.valueOf(System.currentTimeMillis()));}return new TimePickerDialog(this, mTimeSetListener,refDate.getHours(),refDate.getMinutes(),false);}return null;}/*** Location*/// Kicks off location serviceprivate void getLocation() {if (mLocationListener != null) {return;}mLocationProgressView.setVisibility(View.VISIBLE);mFindingCurrentLocation.setVisibility(View.VISIBLE);mLocationRefreshButton.setVisibility(View.GONE);mLocationIcon.setVisibility(View.GONE);mGettingLocation = true;if (mLocationManager == null) {mLocationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);}if (mLocationListener == null) {// Define a listener that responds to location updatesmLocationListener = new LocationListener() {public void onLocationChanged(Location location) {// Called when a new location is found by the network location provider.handleNewLocation(location);}public void onStatusChanged(String provider, int status, Bundle extras) {}public void onProviderEnabled(String provider) {}public void onProviderDisabled(String provider) {}};}// Register the listener with the Location Manager to receive location updatesif (mLocationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {mLocationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, mLocationListener);}if (mLocationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, mLocationListener);}mLocationRequestedAt = System.currentTimeMillis();}private void handleNewLocation(Location location) {if (isBetterLocation(location, mCurrentLocation)) {setCurrentLocation(location);}if (locationIsGood(mCurrentLocation)) {// Log.d(TAG, ""location was good, removing updates.  mCurrentLocation: "" + mCurrentLocation);stopGetLocation();}if (locationRequestIsOld() && locationIsGoodEnough(mCurrentLocation)) {// Log.d(TAG, ""location request was old and location was good enough, removing updates.  mCurrentLocation: "" + mCurrentLocation);stopGetLocation();}mLocationProgressView.setVisibility(View.GONE);mFindingCurrentLocation.setVisibility(View.GONE);mLocationRefreshButton.setVisibility(View.VISIBLE);mLocationIcon.setVisibility(View.VISIBLE);}private void stopGetLocation() {if (mLocationManager != null && mLocationListener != null) {mLocationManager.removeUpdates(mLocationListener);}mLocationListener = null;mGettingLocation = false;}private void guessLocation() {if ((mObservation.latitude == null) || (mObservation.longitude == null)) {return;}(new Thread(new Runnable() {@Overridepublic void run() {Geocoder geocoder = new Geocoder(getApplicationContext(), Locale.getDefault());try {List<Address> addresses = geocoder.getFromLocation(mObservation.latitude, mObservation.longitude, 1);if((null != addresses) && (addresses.size() > 0)) {Address address = addresses.get(0);final StringBuilder location = new StringBuilder();for (int i = 0; i < address.getMaxAddressLineIndex(); i++) {location.append(address.getAddressLine(i));location.append("" "");}runOnUiThread(new Runnable() {@Overridepublic void run() {setPlaceGuess(location.toString());}});}} catch (IOException e) {e.printStackTrace();}}})).start();}private void setPlaceGuess(String placeGuess) {if (placeGuess != null) {placeGuess = placeGuess.trim();}if ((placeGuess != null) && (placeGuess.length() > 0)) {mLocationGuess.setText(placeGuess);mLocationGuess.setTextColor(Color.parseColor(""#000000""));mObservation.place_guess = placeGuess;} else {mLocationGuess.setText(R.string.set_location);mLocationGuess.setTextColor(Color.parseColor(""#757575""));mObservation.place_guess = null;}}private void setCurrentLocation(Location location) {mCurrentLocation = location;// Update any external photos taken through the app with the coordinatesfor (String filename : mCameraPhotos) {try {ExifInterface exif;double latitude = location.getLatitude();double longitude = location.getLongitude();exif = new ExifInterface(filename);exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, GPSEncoder.convert(latitude));exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF, GPSEncoder.latitudeRef(latitude));exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, GPSEncoder.convert(longitude));exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF, GPSEncoder.longitudeRef(longitude));exif.saveAttributes();} catch (IOException e) {e.printStackTrace();}}mObservation.latitude = location.getLatitude();mObservation.longitude = location.getLongitude();if ((mObservation.geoprivacy != null) && ((mObservation.geoprivacy.equals(""private"") || mObservation.geoprivacy.equals(""obscured"")))) {mObservation.private_longitude = mObservation.longitude;mObservation.private_latitude = mObservation.latitude;}mLatitudeView.setText(Double.toString(location.getLatitude()));mLongitudeView.setText(Double.toString(location.getLongitude()));findViewById(R.id.coordinates).setVisibility(View.VISIBLE);if (location.hasAccuracy()) {mAccuracyView.setText(Float.toString(location.getAccuracy()));mObservation.positional_accuracy = ((Float) location.getAccuracy()).intValue();findViewById(R.id.accuracy_prefix).setVisibility(View.VISIBLE);findViewById(R.id.accuracy).setVisibility(View.VISIBLE);} else {findViewById(R.id.accuracy_prefix).setVisibility(View.GONE);findViewById(R.id.accuracy).setVisibility(View.GONE);}if (Intent.ACTION_INSERT.equals(getIntent().getAction())) {mObservation.latitude_was = mObservation.latitude;mObservation.longitude_was = mObservation.longitude;mObservation.positional_accuracy_was = mObservation.positional_accuracy;}if (isNetworkAvailable()) {guessLocation();} else {setPlaceGuess(null);}}private boolean locationRequestIsOld() {long delta = System.currentTimeMillis() - mLocationRequestedAt;return delta > ONE_MINUTE;}private boolean isBetterLocation(Location newLocation, Location currentLocation) {if (currentLocation == null) {return true;}if (newLocation.hasAccuracy() && !currentLocation.hasAccuracy()) {return true;}if (!newLocation.hasAccuracy() && currentLocation.hasAccuracy()) {return false;}return newLocation.getAccuracy() < currentLocation.getAccuracy();}private boolean locationIsGood(Location location) {if (!locationIsGoodEnough(location)) { return false; }if (location.getAccuracy() <= 10) {return true;}return false;}private boolean locationIsGoodEnough(Location location) {if (location == null || !location.hasAccuracy()) { return false; }if (location.getAccuracy() <= 500) { return true; }return false;}/*** MISC*/private void saveProjectFields() {for (ProjectFieldValue fieldValue : mProjectFieldValues.values()) {if (fieldValue.value == null) {continue;}if (fieldValue._id == null) {// New field valueContentValues cv = fieldValue.getContentValues();cv.put(ProjectFieldValue._SYNCED_AT, System.currentTimeMillis() - 100);Uri newRow = getContentResolver().insert(ProjectFieldValue.CONTENT_URI, cv);getContentResolver().update(newRow, fieldValue.getContentValues(), null, null);} else {// Update field valuegetContentResolver().update(fieldValue.getUri(), fieldValue.getContentValues(), null, null);}}}private boolean saveProjects() {Boolean updatedProjects = false; // Indicates whether or not *any* projects were changedString joinedIds = StringUtils.join(mProjectIds, "","");int obsId = (mObservation.id == null ? mObservation._id : mObservation.id);// First, mark for deletion any projects that are no longer associated with this observationCursor c = getContentResolver().query(ProjectObservation.CONTENT_URI, ProjectObservation.PROJECTION,""(observation_id = "" + obsId + "") AND (project_id NOT IN ("" + joinedIds + ""))"",null, ProjectObservation.DEFAULT_SORT_ORDER);c.moveToFirst();while (c.isAfterLast() == false) {updatedProjects = true;ProjectObservation projectObservation = new ProjectObservation(c);projectObservation.is_deleted = true;getContentResolver().update(projectObservation.getUri(), projectObservation.getContentValues(), null, null);c.moveToNext();}c.close();// Next, unmark for deletion any project-observations which were re-addedc = getContentResolver().query(ProjectObservation.CONTENT_URI, ProjectObservation.PROJECTION,""(observation_id = "" + obsId + "") AND (project_id IN ("" + joinedIds + ""))"",null, ProjectObservation.DEFAULT_SORT_ORDER);c.moveToFirst();ArrayList<Integer> existingIds = new ArrayList<Integer>();while (c.isAfterLast() == false) {ProjectObservation projectObservation = new ProjectObservation(c);if (projectObservation.is_deleted == true) {updatedProjects = true;}projectObservation.is_deleted = false;existingIds.add(projectObservation.project_id);getContentResolver().update(projectObservation.getUri(), projectObservation.getContentValues(), null, null);c.moveToNext();}c.close();// Finally, add new project-observation recordsArrayList<Integer> newIds = (ArrayList<Integer>) CollectionUtils.subtract(mProjectIds, existingIds);for (int i = 0; i < newIds.size(); i++) {updatedProjects = true;int projectId = newIds.get(i);ProjectObservation projectObservation = new ProjectObservation();projectObservation.project_id = projectId;projectObservation.observation_id = obsId;projectObservation.is_new = true;projectObservation.is_deleted = false;getContentResolver().insert(ProjectObservation.CONTENT_URI, projectObservation.getContentValues());}return updatedProjects;}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);(new Handler()).postDelayed(new Runnable() {@Overridepublic void run() {((EditText) mSpeciesGuessTextView).clearFocus();mDescriptionTextView.clearFocus();getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);if (getCurrentFocus() != null)imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);}}, 10);if (requestCode == OBSERVATION_PHOTOS_REQUEST_CODE) {if (resultCode == RESULT_OK) {Integer setFirstPhotoIndex = data.getIntExtra(ObservationPhotosViewer.SET_DEFAULT_PHOTO_INDEX, -1);Integer deletePhotoIndex = data.getIntExtra(ObservationPhotosViewer.DELETE_PHOTO_INDEX, -1);if (setFirstPhotoIndex > -1) {((GalleryCursorAdapter)mGallery.getAdapter()).setAsFirstPhoto(setFirstPhotoIndex);} else if (deletePhotoIndex > -1) {deletePhoto(deletePhotoIndex);}}} else if (requestCode == LOCATION_CHOOSER_REQUEST_CODE) {if (resultCode == RESULT_OK) {mLocationManuallySet = true;stopGetLocation();double longitude = data.getDoubleExtra(LocationChooserActivity.LONGITUDE, 0);double latitude = data.getDoubleExtra(LocationChooserActivity.LATITUDE, 0);double accuracy = data.getDoubleExtra(LocationChooserActivity.ACCURACY, 0);mObservation.latitude = latitude;mObservation.longitude = longitude;mObservation.positional_accuracy = (int) Math.ceil(accuracy);if ((mObservation.geoprivacy != null) && ((mObservation.geoprivacy.equals(""private"") || mObservation.geoprivacy.equals(""obscured"")))) {mObservation.private_longitude = mObservation.longitude;mObservation.private_latitude = mObservation.latitude;}mLatitudeView.setText(Double.toString(latitude));mLongitudeView.setText(Double.toString(longitude));mAccuracyView.setText(mObservation.positional_accuracy.toString());findViewById(R.id.coordinates).setVisibility(View.VISIBLE);findViewById(R.id.accuracy_prefix).setVisibility(View.VISIBLE);findViewById(R.id.accuracy).setVisibility(View.VISIBLE);if (isNetworkAvailable()) {guessLocation();} else {setPlaceGuess(null);}}} else if (requestCode == TAXON_SEARCH_REQUEST_CODE) {mTaxonSearchStarted = false;if (resultCode == RESULT_OK) {String iconicTaxonName = data.getStringExtra(TaxonSearchActivity.ICONIC_TAXON_NAME);String taxonName = data.getStringExtra(TaxonSearchActivity.TAXON_NAME);String idName = data.getStringExtra(TaxonSearchActivity.ID_NAME);String idPicUrl = data.getStringExtra(TaxonSearchActivity.ID_PIC_URL);Integer taxonId = data.getIntExtra(TaxonSearchActivity.TAXON_ID, 0);boolean isCustomTaxon = data.getBooleanExtra(TaxonSearchActivity.IS_CUSTOM, false);if (taxonId == TaxonSearchActivity.UNKNOWN_TAXON_ID) {mSpeciesGuess = null;mObservation.species_guess = null;mObservation.taxon_id = null;mTaxonTextChanged = true;mSpeciesGuessTextView.setText(""Unknown"");mTaxonTextChanged = false;mPreviousTaxonSearch = ""Unknown"";mObservation.preferred_common_name = null;mTaxonPicUrl = null;mIsTaxonUnknown = true;mIsCustomTaxon = false;mSpeciesGuessIcon.setImageResource(R.drawable.ic_species_guess_black_24dp);if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {mSpeciesGuessIcon.setAlpha(0.6f);}} else {String speciesGuess = String.format(""%s"", idName);mObservation.preferred_common_name = isCustomTaxon ? null : idName;mSpeciesGuess = speciesGuess;mObservation.species_guess = speciesGuess;mObservation.taxon_id = isCustomTaxon ? null : taxonId;mTaxonTextChanged = true;mSpeciesGuessTextView.setText(mSpeciesGuess);mTaxonTextChanged = false;mPreviousTaxonSearch = mSpeciesGuess;mTaxonPicUrl = isCustomTaxon ? null : idPicUrl;mIsTaxonUnknown = false;mIsCustomTaxon = isCustomTaxon;mObservation.iconic_taxon_name = isCustomTaxon ? null : iconicTaxonName;((EditText)mSpeciesGuessTextView).clearFocus();mDescriptionTextView.clearFocus();getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);if (!mIsCustomTaxon) {UrlImageViewHelper.setUrlDrawable(mSpeciesGuessIcon, mTaxonPicUrl, R.drawable.ic_species_guess_black_24dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {mSpeciesGuessIcon.setAlpha(1.0f);}if (loadedBitmap != null) imageView.setImageBitmap(ImageUtils.getRoundedCornerBitmap(loadedBitmap));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});} else {mSpeciesGuessIcon.setImageResource(R.drawable.iconic_taxon_unknown);if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {mSpeciesGuessIcon.setAlpha(1.0f);}}}} else {// Restore original taxon guessmTaxonTextChanged = true;mSpeciesGuessTextView.setText(mIsTaxonUnknown ? ""Unknown"" : mObservation.species_guess);mTaxonTextChanged = false;}} else if (requestCode == ProjectFieldViewer.PROJECT_FIELD_TAXON_SEARCH_REQUEST_CODE) {if (resultCode == RESULT_OK) {// Notify the project fields that we returned from a taxon searchfor (ProjectFieldViewer viewer : mProjectFieldViewers) {viewer.onTaxonSearchResult(data);}}} else if (requestCode == PROJECT_SELECTOR_REQUEST_CODE) {if (resultCode == RESULT_OK) {ArrayList<Integer> projectIds = data.getIntegerArrayListExtra(ProjectSelectorActivity.PROJECT_IDS);HashMap<Integer, ProjectFieldValue> values = (HashMap<Integer, ProjectFieldValue>) data.getSerializableExtra(ProjectSelectorActivity.PROJECT_FIELDS);mProjectIds = projectIds;mProjectFieldValues = values;refreshProjectFields();refreshProjectList();}} else if (requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) {if (resultCode == RESULT_OK) {final boolean isCamera;if ((data == null) || (data.getScheme() == null)) {isCamera = true;} else {final String action = data.getAction();if(action == null) {isCamera = false;} else {isCamera = action.equals(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);}}Uri selectedImageUri;if(isCamera) {selectedImageUri = mFileUri;} else {selectedImageUri = data == null ? null : data.getData();if (selectedImageUri == null) {selectedImageUri = mFileUri;}}Log.v(TAG, String.format(""%s: %s"", isCamera, selectedImageUri));if (isCamera) {// Image captured and saved to mFileUri specified in the IntentToast.makeText(this, getString(R.string.image_saved), Toast.LENGTH_LONG).show();}Uri createdUri = createObservationPhotoForPhoto(selectedImageUri);mPhotosAdded.add(createdUri.toString());if (isCamera)  {// Make a copy of the image into the phone's camera folderString path = FileUtils.getPath(this, selectedImageUri);String copyPath = addPhotoToGallery(path);if (copyPath != null) {mCameraPhotos.add(copyPath);}// Delete original photo (before resize)File f = new File(path);f.delete();}if (createdUri == null) {mHelper.alert(getResources().getString(R.string.alert_unsupported_media_type));mFileUri = null;return;}updateImages();if (!isCamera) {// Import photo metadata (e.g. location) only when the location hasn't been set// by the user before (whether manually or by importing previous images)if (!mLocationManuallySet) {stopGetLocation();mLocationManuallySet = true;importPhotoMetadata(selectedImageUri);}} else {// Retrieve current coordinates (since we can't launch the camera intent with GPS coordinates)if (!mLocationManuallySet && !mGettingLocation) {getLocation();}}} else if (resultCode == RESULT_CANCELED) {// User cancelled the image capture} else {// Image capture failed, advise userToast.makeText(this,  String.format(getString(R.string.something_went_wrong), mFileUri.toString()), Toast.LENGTH_LONG).show();Log.e(TAG, ""camera bailed, requestCode: "" + requestCode + "", resultCode: "" + resultCode + "", data: "" + (data == null ? ""null"" : data.getData()));}mFileUri = null; // don't let this hang around}if (Intent.ACTION_INSERT.equals(getIntent().getAction())) {// Returned from activity AND it's a new observationif ((mObservation.longitude == null) && (mGettingLocation)) {// Got stopped in the middle of retrieving GPS coordinates - try againgetLocation();}}}private void refreshCommentsIdSize(Integer value) {ViewTreeObserver observer = mObservationCommentsIds.getViewTreeObserver();// Make sure the height and width of the rectangle are the same (i.e. a square)observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {@SuppressLint(""NewApi"")@Overridepublic void onGlobalLayout() {int dimension = mObservationCommentsIds.getHeight();ViewGroup.LayoutParams params = mObservationCommentsIds.getLayoutParams();if (dimension > mObservationCommentsIds.getWidth()) {// Only resize if there's enough roomparams.width = dimension;mObservationCommentsIds.setLayoutParams(params);}ViewTreeObserver observer = mObservationCommentsIds.getViewTreeObserver();if(Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {observer.removeGlobalOnLayoutListener(this);} else {observer.removeOnGlobalLayoutListener(this);}}});mObservationCommentsIds.setText(value.toString());}private Uri createObservationPhotoForPhoto(Uri photoUri) {mPhotosChanged = true;String path = FileUtils.getPath(this, photoUri);InputStream is = null;String resizedPhoto;try {if (path == null) {is = getContentResolver().openInputStream(photoUri);} else {is = new FileInputStream(path);}// Resize photo to 2048x2048 maxresizedPhoto = resizeImage(is, path);if (resizedPhoto == null) {return null;}} catch (FileNotFoundException e) {e.printStackTrace();return null;}ObservationPhoto op = new ObservationPhoto();op.uuid = UUID.randomUUID().toString();ContentValues cv = op.getContentValues();cv.put(ObservationPhoto._OBSERVATION_ID, mObservation._id);cv.put(ObservationPhoto.OBSERVATION_ID, mObservation.id);cv.put(ObservationPhoto.PHOTO_FILENAME, resizedPhoto);if (mGallery.getCount() == 0) {cv.put(ObservationPhoto.POSITION, 0);} else {cv.put(ObservationPhoto.POSITION, mGallery.getCount());}return getContentResolver().insert(ObservationPhoto.CONTENT_URI, cv);}private void importPhotoMetadata(Uri photoUri) {String imgFilePath = FileUtils.getPath(this, photoUri);if (imgFilePath == null) return;try {ExifInterface exif = new ExifInterface(imgFilePath);float[] latLng = new float[2];uiToObservation();if (exif.getLatLong(latLng)) {stopGetLocation();mObservation.latitude = (double) latLng[0];mObservation.longitude = (double) latLng[1];mObservation.positional_accuracy = null;} else {// No coordinates - don't override the observation coordinatesreturn;}if ((mObservation.geoprivacy != null) && ((mObservation.geoprivacy.equals(""private"") || mObservation.geoprivacy.equals(""obscured"")))) {mObservation.private_longitude = mObservation.longitude;mObservation.private_latitude = mObservation.latitude;}if (mObservation.latitude_changed()) {if (isNetworkAvailable()) {guessLocation();} else {setPlaceGuess(null);}}String datetime = exif.getAttribute(ExifInterface.TAG_DATETIME);if (datetime != null) {SimpleDateFormat exifDateFormat = new SimpleDateFormat(""yyyy:MM:dd HH:mm:ss"");try {Date date = exifDateFormat.parse(datetime);Timestamp timestamp = new Timestamp(date.getTime());mObservation.observed_on = timestamp;mObservation.time_observed_at = timestamp;mObservation.observed_on_string = app.formatDatetime(timestamp);mObservedOnStringTextView.setText(app.formatDatetime(timestamp));mObservedOnStringTextView.setTextColor(Color.parseColor(""#000000""));mTimeObservedAtButton.setText(app.shortFormatTime(timestamp));mTimeObservedAtButton.setTextColor(Color.parseColor(""#000000""));mDateSetByUser = timestamp;mTimeSetByUser = timestamp;} catch (ParseException e) {Log.d(TAG, ""Failed to parse "" + datetime + "": "" + e);}}observationToUi();} catch (IOException e) {Log.e(TAG, ""couldn't find "" + imgFilePath);}}private void deletePhoto(int position) {mPhotosChanged = true;GalleryCursorAdapter adapter = (GalleryCursorAdapter) mGallery.getAdapter();Cursor cursor = adapter.getCursor();cursor.moveToPosition(position);ObservationPhoto op = new ObservationPhoto(cursor);mPhotosRemoved.add(op);String photoId = adapter.getItemIdString(position);String photoFilename = cursor.getString(cursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_FILENAME));if (photoFilename != null) {getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""photo_filename = '"" + photoId + ""'"", null);} else {getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""photo_url = '"" + photoId + ""'"", null);}updateImages();// Refresh the positions of all other photosadapter = (GalleryCursorAdapter) mGallery.getAdapter();adapter.refreshPhotoPositions(null);}/*** @param uri The Uri to check.* @return Whether the Uri authority is ExternalStorageProvider.*/public static boolean isExternalStorageDocument(Uri uri) {return ""com.android.externalstorage.documents"".equals(uri.getAuthority());}/*** @param uri The Uri to check.* @return Whether the Uri authority is DownloadsProvider.*/public static boolean isDownloadsDocument(Uri uri) {return ""com.android.providers.downloads.documents"".equals(uri.getAuthority());}/*** @param uri The Uri to check.* @return Whether the Uri authority is MediaProvider.*/public static boolean isMediaDocument(Uri uri) {return ""com.android.providers.media.documents"".equals(uri.getAuthority());}/*** Get the value of the data column for this Uri. This is useful for* MediaStore Uris, and other file-based ContentProviders.** @param context The context.* @param uri The Uri to query.* @param selection (Optional) Filter used in the query.* @param selectionArgs (Optional) Selection arguments used in the query.* @return The value of the _data column, which is typically a file path.*/public static String getDataColumn(Context context, Uri uri, String selection,String[] selectionArgs) {Cursor cursor = null;final String column = ""_data"";final String[] projection = {column};try {cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,null);if (cursor != null && cursor.moveToFirst()) {final int column_index = cursor.getColumnIndexOrThrow(column);return cursor.getString(column_index);}} finally {if (cursor != null)cursor.close();}return null;}/*** Get a file path from a Uri. This will get the the path for Storage Access* Framework Documents, as well as the _data field for the MediaStore and* other file-based ContentProviders.** @param context The context.* @param uri The Uri to query.* @author paulburke*/@SuppressLint(""NewApi"")private Uri getPath(final Context context, final Uri uri) {final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;// DocumentProviderif (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {// ExternalStorageProviderif (isExternalStorageDocument(uri)) {final String docId = DocumentsContract.getDocumentId(uri);final String[] split = docId.split("":"");final String type = split[0];if (""primary"".equalsIgnoreCase(type)) {return Uri.parse(Environment.getExternalStorageDirectory() + ""/"" + split[1]);}}// DownloadsProviderelse if (isDownloadsDocument(uri)) {final String id = DocumentsContract.getDocumentId(uri);final Uri contentUri = ContentUris.withAppendedId(Uri.parse(""content://downloads/public_downloads""), Long.valueOf(id));return contentUri;}// MediaProviderelse if (isMediaDocument(uri)) {final String docId = DocumentsContract.getDocumentId(uri);final String[] split = docId.split("":"");final String type = split[0];Uri contentUri = null;if (""image"".equals(type)) {contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;} else if (""video"".equals(type)) {contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;} else if (""audio"".equals(type)) {contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;}final String selection = ""_id=?"";final String[] selectionArgs = new String[] {split[1]};return ContentUris.withAppendedId(contentUri, Long.valueOf(split[1]));}}// MediaStore (and general)if (""content"".equalsIgnoreCase(uri.getScheme())) {return uri;}// Fileelse if (""file"".equalsIgnoreCase(uri.getScheme())) {return uri;}return null;}private void updateImageOrientation(Uri uri) {String imgFilePath = FileUtils.getPath(this, uri);if (imgFilePath == null) return;ContentValues values = new ContentValues();int degrees = -1;try {ExifInterface exif = new ExifInterface(imgFilePath);degrees = exifOrientationToDegrees(exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL));values.put(MediaStore.Images.ImageColumns.ORIENTATION, degrees);getContentResolver().update(uri, values, null, null);String lat = exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE);String d = exif.getAttribute(ExifInterface.TAG_DATETIME);Log.d(TAG, ""lat: "" + lat + "", d: "" + d);} catch (IOException e) {Log.e(TAG, ""couldn't find "" + imgFilePath);} catch (Exception e) {Log.e(TAG, ""Couldn't update image orientation for path: "" + uri);SharedPreferences pref = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = pref.getString(""username"", null);}}protected void updateImages() {if (mObservation.id != null) {mImageCursor = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""_observation_id=? or observation_id=?"",new String[]{mObservation._id.toString(), mObservation.id.toString()},ObservationPhoto.DEFAULT_SORT_ORDER);} else {mImageCursor = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""_observation_id=?"",new String[]{mObservation._id.toString()},""id ASC, _id ASC"");}mImageCursor.moveToFirst();mGallery.setAdapter(new GalleryCursorAdapter(this, mImageCursor));}public class GalleryCursorAdapter extends BaseAdapter {private Context mContext;private Cursor mCursor;private HashMap<Integer, View> mViews;public Cursor getCursor() {return mCursor;}public GalleryCursorAdapter(Context c, Cursor cur) {mContext = c;mCursor = cur;mViews = new HashMap<Integer, View>();}public int getCount() {return mCursor.getCount();}public Object getItem(int position) {mCursor.moveToPosition(position);return mCursor;}public long getItemId(int position) {mCursor.moveToPosition(position);return mCursor.getLong(mCursor.getColumnIndexOrThrow(ObservationPhoto.ID));}public String getItemIdString(int position) {mCursor.moveToPosition(position);String id = mCursor.getString(mCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_FILENAME));if (id == null) {return mCursor.getString(mCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_URL));} else {return id;}}public void setAsFirstPhoto(int position) {mPhotosChanged = true;String photoId = getItemIdString(position);mFirstPositionPhotoId = photoId;// Set current photo to be positioned firstmCursor.moveToPosition(position);ObservationPhoto op = new ObservationPhoto(mCursor);op.position = 0;if (op.photo_filename != null) {getContentResolver().update(ObservationPhoto.CONTENT_URI, op.getContentValues(), ""photo_filename = '"" + op.photo_filename + ""'"", null);} else {getContentResolver().update(ObservationPhoto.CONTENT_URI, op.getContentValues(), ""photo_url = '"" + op.photo_url + ""'"", null);}// Update the rest of the photos to be positioned afterwardsrefreshPhotoPositions(position);updateImages();}public void refreshPhotoPositions(Integer position) {int currentPosition = position == null ? 0 : 1;int count = mCursor.getCount();if (count == 0) return;mCursor.moveToPosition(0);do {if ((position == null) || (mCursor.getPosition() != position.intValue()))  {ObservationPhoto currentOp = new ObservationPhoto(mCursor);currentOp.position = currentPosition;if (currentOp.photo_filename != null) {getContentResolver().update(ObservationPhoto.CONTENT_URI, currentOp.getContentValues(), ""photo_filename = '"" + currentOp.photo_filename + ""'"", null);} else {getContentResolver().update(ObservationPhoto.CONTENT_URI, currentOp.getContentValues(), ""photo_url = '"" + currentOp.photo_url + ""'"", null);}currentPosition++;}} while (mCursor.moveToNext());}public View getView(final int position, View convertView, ViewGroup parent) {if (mViews.containsKey(position)) {return mViews.get(position);}mCursor.moveToPosition(position);LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);ViewGroup container = null;ImageView imageView;container = (ViewGroup) inflater.inflate(R.layout.observation_photo_gallery_item, null, false);imageView = (ImageView) container.findViewById(R.id.observation_photo);int imageId = mCursor.getInt(mCursor.getColumnIndexOrThrow(ObservationPhoto._ID));String imageUrl = mCursor.getString(mCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_URL));String photoFileName = mCursor.getString(mCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_FILENAME));if (imageUrl != null) {// Online photoimageView.setLayoutParams(new LinearLayout.LayoutParams(getResources().getDimensionPixelOffset(R.dimen.obs_viewer_photo_thumb_size), getResources().getDimensionPixelOffset(R.dimen.obs_viewer_photo_thumb_size)));UrlImageViewHelper.setUrlDrawable(imageView, imageUrl, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return ImageUtils.getRoundedCornerBitmap(ImageUtils.centerCropBitmap(loadedBitmap));}});} else {// Offline photoint orientation = 0;Bitmap bitmapImage = null;try {BitmapFactory.Options options = new BitmapFactory.Options();FileInputStream is = new FileInputStream(photoFileName);Bitmap bitmap = BitmapFactory.decodeStream(is, null, options);options.inJustDecodeBounds = true;BitmapFactory.decodeStream(is, null, options);is.close();// Decode into a thumbnailoptions.inSampleSize = ImageUtils.calculateInSampleSize(options, 200, 200);// Decode bitmap with inSampleSize setoptions.inJustDecodeBounds = false;// This decreases in-memory byte-storage per pixeloptions.inPreferredConfig = Bitmap.Config.ALPHA_8;bitmapImage = BitmapFactory.decodeFile(photoFileName, options);imageView.setImageBitmap(ImageUtils.getRoundedCornerBitmap(ImageUtils.centerCropBitmap(bitmapImage)));bitmap.recycle();} catch (FileNotFoundException exc) {exc.printStackTrace();} catch (IOException exc) {exc.printStackTrace();}}View isFirst = container.findViewById(R.id.observation_is_first);Integer obsPhotoPosition = mCursor.getInt(mCursor.getColumnIndexOrThrow(ObservationPhoto.POSITION));if ((obsPhotoPosition != null) && (obsPhotoPosition == 0)) {container.findViewById(R.id.is_first_on).setVisibility(View.VISIBLE);container.findViewById(R.id.is_first_off).setVisibility(View.GONE);container.findViewById(R.id.is_first_text).setVisibility(View.VISIBLE);} else {container.findViewById(R.id.is_first_on).setVisibility(View.GONE);container.findViewById(R.id.is_first_off).setVisibility(View.VISIBLE);container.findViewById(R.id.is_first_text).setVisibility(View.GONE);}imageView.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(ObservationEditor.this, ObservationPhotosViewer.class);intent.putExtra(ObservationPhotosViewer.OBSERVATION_ID, mObservation.id);intent.putExtra(ObservationPhotosViewer.OBSERVATION_ID_INTERNAL, mObservation._id);intent.putExtra(ObservationPhotosViewer.IS_NEW_OBSERVATION, true);intent.putExtra(ObservationPhotosViewer.CURRENT_PHOTO_INDEX, position);startActivityForResult(intent, OBSERVATION_PHOTOS_REQUEST_CODE);}});isFirst.setTag(new Integer(position));isFirst.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Integer position = (Integer) view.getTag();String photoId = getItemIdString(position);if ((mFirstPositionPhotoId == null) || (!mFirstPositionPhotoId.equals(photoId))) {setAsFirstPhoto(position);}}});mViews.put(position, container);return container;}}private int exifOrientationToDegrees(int orientation) {switch (orientation) {case ExifInterface.ORIENTATION_ROTATE_90:return 90;case ExifInterface.ORIENTATION_ROTATE_180:return 180;case ExifInterface.ORIENTATION_ROTATE_270:return -90;default:return 0;}}/*** Display a confirm dialog.* @param activity* @param title* @param message* @param positiveLabel* @param negativeLabel* @param onPositiveClick runnable to call (in UI thread) if positive button pressed. Can be null* @param onNegativeClick runnable to call (in UI thread) if negative button pressed. Can be null*/public final void confirm(final Activity activity,final int title,final int message,final int positiveLabel,final int negativeLabel,final Runnable onPositiveClick,final Runnable onNegativeClick) {mHelper.confirm(getString(title), getString(message),new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {if (onPositiveClick != null) onPositiveClick.run();}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {if (onNegativeClick != null) onNegativeClick.run();}},positiveLabel, negativeLabel);}private void refreshProjectFields() {ProjectFieldViewer.getProjectFields(this, mProjectIds, (mObservation.id == null ? mObservation._id : mObservation.id), new ProjectFieldViewer.ProjectFieldsResults() {@Overridepublic void onProjectFieldsResults(Hashtable<Integer, ProjectField> projectFields, HashMap<Integer, ProjectFieldValue> projectValues) {mProjectFields = projectFields;if (mProjectFieldValues == null) {mProjectFieldValues = projectValues;}addProjectFieldViewers();}});}private void addProjectFieldViewers() {// Prepare the fields for displayArrayList<Map.Entry<Integer, ProjectField>> fields = new ArrayList(mProjectFields.entrySet());Collections.sort(fields, new Comparator<Map.Entry<Integer, ProjectField>>() {@Overridepublic int compare(Entry<Integer, ProjectField> lhs, Entry<Integer, ProjectField> rhs) {ProjectField field1 = lhs.getValue();ProjectField field2 = rhs.getValue();Integer projectId1 = (field1.project_id != null ? field1.project_id : Integer.valueOf(-1));Integer projectId2 = (field2.project_id != null ? field2.project_id : Integer.valueOf(-1));if (projectId1 == projectId2) {// Same project - sort by positionInteger position1 = (field1.position != null ? field1.position : Integer.valueOf(0));Integer position2 = (field2.position != null ? field2.position : Integer.valueOf(0));return position1.compareTo(position2);} else {// Group fields together in the same projectreturn projectId1.compareTo(projectId2);}}});}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}private void openImageIntent(final Activity activity, Uri captureImageOutputFile, int requestCode) {new BottomSheet.Builder(activity).sheet(R.menu.observation_confirmation_photo_menu).listener(new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {Intent intent;switch (which) {case R.id.camera:takePhoto();break;case R.id.upload_photo:choosePhoto();break;}}}).show();}/*** Resizes an image to max size of 2048x2048* @param filename the image filename* @return the resized image - or original image if smaller than 2048x2048*/private String resizeImage(InputStream is, String filename) {BitmapFactory.Options options = new BitmapFactory.Options();try {Bitmap bitmap = BitmapFactory.decodeStream(is,null,options);int originalHeight = options.outHeight;int originalWidth = options.outWidth;int newHeight, newWidth;if (Math.max(originalHeight, originalWidth) < 2048) {if (filename != null) {// Original file is smaller than 2048x2048 - no need to resizereturn filename;} else {// Don't resize because image is smaller than 2048x2048 - however, make a local copy of itnewHeight = originalHeight;newWidth = originalWidth;}} else {// Resize but make sure we have the same width/height aspect ratioif (originalHeight > originalWidth) {newHeight = 2048;newWidth = (int) (2048 * ((float) originalWidth / originalHeight));} else {newWidth = 2048;newHeight = (int) (2048 * ((float) originalHeight / originalWidth));}}Log.d(TAG, ""Bitmap h:"" + options.outHeight + ""; w:"" + options.outWidth);Log.d(TAG, ""Resized Bitmap h:"" + newHeight + ""; w:"" + newWidth);Bitmap resizedBitmap = Bitmap.createScaledBitmap(bitmap, newWidth, newHeight, true);// Save resized imageFile imageFile = new File(getExternalCacheDir(), UUID.randomUUID().toString() + "".jpeg"");OutputStream os = new FileOutputStream(imageFile);resizedBitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);os.flush();os.close();// Copy all EXIF data from original image into resized imagecopyExifData(is, new File(imageFile.getAbsolutePath()), null);return imageFile.getAbsolutePath();} catch (OutOfMemoryError e) {e.printStackTrace();} catch (FileNotFoundException e) {e.printStackTrace();} catch (IOException e) {e.printStackTrace();}return filename;}// EXIF-copying code taken from: https://bricolsoftconsulting.com/copying-exif-metadata-using-sanselan/public static boolean copyExifData(InputStream sourceFileStream, File destFile, List<TagInfo> excludedFields) {String tempFileName = destFile.getAbsolutePath() + "".tmp"";File tempFile = null;OutputStream tempStream = null;try {tempFile = new File (tempFileName);TiffOutputSet sourceSet = getSanselanOutputSet(sourceFileStream, TiffConstants.DEFAULT_TIFF_BYTE_ORDER);TiffOutputSet destSet = getSanselanOutputSet(destFile, sourceSet.byteOrder);// If the EXIF data endianess of the source and destination files// differ then fail. This only happens if the source and// destination images were created on different devices. It's// technically possible to copy this data by changing the byte// order of the data, but handling this case is outside the scope// of this implementationif (sourceSet.byteOrder != destSet.byteOrder) return false;destSet.getOrCreateExifDirectory();// Go through the source directoriesList<?> sourceDirectories = sourceSet.getDirectories();for (int i=0; i<sourceDirectories.size(); i++) {TiffOutputDirectory sourceDirectory = (TiffOutputDirectory)sourceDirectories.get(i);TiffOutputDirectory destinationDirectory = getOrCreateExifDirectory(destSet, sourceDirectory);if (destinationDirectory == null) continue; // failed to create// Loop the fieldsList<?> sourceFields = sourceDirectory.getFields();for (int j=0; j<sourceFields.size(); j++) {// Get the source fieldTiffOutputField sourceField = (TiffOutputField) sourceFields.get(j);// Check exclusion listif (excludedFields != null && excludedFields.contains(sourceField.tagInfo)) {destinationDirectory.removeField(sourceField.tagInfo);continue;}// Remove any existing fielddestinationDirectory.removeField(sourceField.tagInfo);// Add fielddestinationDirectory.add(sourceField);}}// Save data to destinationtempStream = new BufferedOutputStream(new FileOutputStream(tempFile));new ExifRewriter().updateExifMetadataLossless(destFile, tempStream, destSet);tempStream.close();// Replace fileif (destFile.delete()) {tempFile.renameTo(destFile);}return true;} catch (ImageReadException exception) {exception.printStackTrace();} catch (ImageWriteException exception) {exception.printStackTrace();} catch (IOException exception) {exception.printStackTrace();} finally {if (tempStream != null) {try {tempStream.close();} catch (IOException e) {}}if (tempFile != null) {if (tempFile.exists()) tempFile.delete();}}return false;}private static TiffOutputDirectory getOrCreateExifDirectory(TiffOutputSet outputSet, TiffOutputDirectory outputDirectory) {TiffOutputDirectory result = outputSet.findDirectory(outputDirectory.type);if (result != null)return result;result = new TiffOutputDirectory(outputDirectory.type);try {outputSet.addDirectory(result);} catch (ImageWriteException e) {return null;}return result;}private static TiffOutputSet getSanselanOutputSet(InputStream stream, int defaultByteOrder)throws IOException, ImageReadException, ImageWriteException {TiffImageMetadata exif = null;TiffOutputSet outputSet = null;IImageMetadata metadata = Sanselan.getMetadata(stream, null);JpegImageMetadata jpegMetadata = (JpegImageMetadata) metadata;if (jpegMetadata != null) {exif = jpegMetadata.getExif();if (exif != null) {outputSet = exif.getOutputSet();}}// If JPEG file contains no EXIF metadata, create an empty set// of EXIF metadata. Otherwise, use existing EXIF metadata to// keep all other existing tagsif (outputSet == null)outputSet = new TiffOutputSet(exif==null?defaultByteOrder:exif.contents.header.byteOrder);return outputSet;}private static TiffOutputSet getSanselanOutputSet(File jpegImageFile, int defaultByteOrder)throws IOException, ImageReadException, ImageWriteException {TiffImageMetadata exif = null;TiffOutputSet outputSet = null;IImageMetadata metadata = Sanselan.getMetadata(jpegImageFile);JpegImageMetadata jpegMetadata = (JpegImageMetadata) metadata;if (jpegMetadata != null) {exif = jpegMetadata.getExif();if (exif != null) {outputSet = exif.getOutputSet();}}// If JPEG file contains no EXIF metadata, create an empty set// of EXIF metadata. Otherwise, use existing EXIF metadata to// keep all other existing tagsif (outputSet == null)outputSet = new TiffOutputSet(exif==null?defaultByteOrder:exif.contents.header.byteOrder);return outputSet;}private String addPhotoToGallery(String path) {// Copy the file into the camera folderString timeStamp = new SimpleDateFormat(""yyyyMMdd_HHmmss"").format(System.currentTimeMillis());File storageDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) + ""/Camera/"");if (!storageDir.exists()) storageDir.mkdirs();String outputPath;try {File image = File.createTempFile(timeStamp,                   /* prefix */"".jpeg"",                     /* suffix */storageDir                   /* directory */);outputPath = image.getPath();} catch (IOException e) {e.printStackTrace();return null;}try {FileInputStream inStream = null;inStream = new FileInputStream(path);FileOutputStream outStream = new FileOutputStream(outputPath);FileChannel inChannel = inStream.getChannel();FileChannel outChannel = outStream.getChannel();inChannel.transferTo(0, inChannel.size(), outChannel);inStream.close();outStream.close();} catch (Exception exc) {exc.printStackTrace();return null;}// Tell the OS to scan the file (will add it to the gallery and create a thumbnail for it)MediaScannerConnection.scanFile(this,new String[] { outputPath }, null,new MediaScannerConnection.OnScanCompletedListener() {public void onScanCompleted(String path, Uri uri) {}});return outputPath;}}",ObservationEditor.java,0
200,package org.inaturalist.android;/*** Created by yaron on 10/07/2016.*/public class CancelSyncException extends Exception {},CancelSyncException.java,0
200,"package org.inaturalist.android;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.ContentUris;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.provider.MediaStore;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Html;import android.text.InputType;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.View.MeasureSpec;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.PopupMenu;import android.widget.ProgressBar;import android.widget.TabHost;import android.widget.TabWidget;import android.widget.TextView;import android.widget.Toast;import com.cocosw.bottomsheet.BottomSheet;import com.crashlytics.android.Crashlytics;import com.flurry.android.FlurryAgent;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import com.viewpagerindicator.CirclePageIndicator;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.lucasr.twowayview.TwoWayView;import java.io.File;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.List;import java.util.Locale;public class ObservationViewerActivity extends AppCompatActivity {private static final int NEW_ID_REQUEST_CODE = 0x101;private static final int REQUEST_CODE_LOGIN = 0x102;private static final int REQUEST_CODE_EDIT_OBSERVATION = 0x103;public static final int RESULT_FLAGGED_AS_CAPTIVE = 0x300;private static String TAG = ""ObservationViewerActivity"";public final static String SHOW_COMMENTS = ""show_comments"";private static int DATA_QUALITY_CASUAL_GRADE = 0;private static int DATA_QUALITY_NEEDS_ID = 1;private static int DATA_QUALITY_RESEARCH_GRADE = 2;private static String QUALITY_GRADE_RESEARCH = ""research"";private static String QUALITY_GRADE_NEEDS_ID = ""needs_id"";private static String QUALITY_GRADE_CASUAL_GRADE = ""casual"";private INaturalistApp mApp;private ActivityHelper mHelper;private Observation mObservation;private boolean mFlagAsCaptive;private Uri mUri;private Cursor mCursor;private TextView mUserName;private ImageView mUserPic;private TextView mObservedOn;private ViewPager mPhotosViewPager;private CirclePageIndicator mIndicator;private ImageView mSharePhoto;private ImageView mIdPic;private TextView mIdName;private TextView mTaxonicName;private ViewGroup mIdRow;private JSONObject mTaxon;private TabHost mTabHost;private final static String VIEW_TYPE_INFO = ""info"";private final static String VIEW_TYPE_COMMENTS_IDS = ""comments_ids"";private final static String VIEW_TYPE_FAVS = ""favs"";private GoogleMap mMap;private ViewGroup mLocationMapContainer;private ImageView mUnknownLocationIcon;private TextView mLocationText;private ImageView mLocationPrivate;private TextView mCasualGradeText;private ImageView mCasualGradeIcon;private View mNeedsIdLine;private View mResearchGradeLine;private TextView mNeedsIdText;private ImageView mNeedsIdIcon;private TextView mResearchGradeText;private ImageView mResearchGradeIcon;private TextView mTipText;private ViewGroup mDataQualityReason;private TextView mIncludedInProjects;private ViewGroup mIncludedInProjectsContainer;private ObservationReceiver mObservationReceiver;private ArrayList<BetterJSONObject> mFavorites = null;private ArrayList<BetterJSONObject> mCommentsIds = null;private int mIdCount = 0;private ArrayList<Integer> mProjectIds;private ViewGroup mActivityTabContainer;private ViewGroup mInfoTabContainer;private ListView mCommentsIdsList;private ProgressBar mLoadingActivity;private CommentsIdsAdapter mAdapter;private ViewGroup mAddId;private ViewGroup mActivityButtons;private ViewGroup mAddComment;private ViewGroup mFavoritesTabContainer;private ProgressBar mLoadingFavs;private ListView mFavoritesList;private ViewGroup mAddFavorite;private FavoritesAdapter mFavoritesAdapter;private ViewGroup mRemoveFavorite;private int mFavIndex;private TextView mNoFavsMessage;private TextView mNoActivityMessage;private ViewGroup mNotesContainer;private TextView mNotes;private TextView mLoginToAddCommentId;private Button mActivitySignUp;private Button mActivityLogin;private ViewGroup mActivityLoginSignUpButtons;private TextView mLoginToAddFave;private Button mFavesSignUp;private Button mFavesLogin;private ViewGroup mFavesLoginSignUpButtons;private TextView mSyncToAddCommentsIds;private TextView mSyncToAddFave;private ImageView mIdPicBig;private ViewGroup mNoPhotosContainer;private PhotosViewPagerAdapter mPhotosAdapter = null;private ArrayList<BetterJSONObject> mProjects;private ImageView mIdArrow;private ViewGroup mUnknownLocationContainer;private boolean mReadOnly;private String mObsJson;private boolean mShowComments;private int mCommentCount;private String mTaxonImage;private String mTaxonIdName;private String mTaxonName;private String mActiveTab;private boolean mReloadObs;@Overrideprotected void onStart() {super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop() {super.onStop();FlurryAgent.onEndSession(this);}private class PhotosViewPagerAdapter extends PagerAdapter {private Cursor mImageCursor = null;public PhotosViewPagerAdapter() {if (!mReadOnly) {if (mObservation.id != null) {mImageCursor = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""_observation_id=? or observation_id=?"",new String[]{mObservation._id.toString(), mObservation.id.toString()},ObservationPhoto.DEFAULT_SORT_ORDER);} else {mImageCursor = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""_observation_id=?"",new String[]{mObservation._id.toString()},ObservationPhoto.DEFAULT_SORT_ORDER);}mImageCursor.moveToFirst();}}@Overridepublic int getCount() {return mReadOnly ? mObservation.photos.size() : mImageCursor.getCount();}@Overridepublic boolean isViewFromObject(View view, Object object) {return view == (ImageView)object;}private Cursor findPhotoInStorage(Integer photoId) {Cursor imageCursor = getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,new String[]{MediaStore.MediaColumns._ID, MediaStore.MediaColumns.TITLE, MediaStore.Images.ImageColumns.ORIENTATION},MediaStore.MediaColumns._ID + "" = "" + photoId, null, null);imageCursor.moveToFirst();return imageCursor;}@Overridepublic Object instantiateItem(ViewGroup container, final int position) {if (!mReadOnly) mImageCursor.moveToPosition(position);ImageView imageView = new ImageView(ObservationViewerActivity.this);imageView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);int imageId = 0;String photoFilename = null;String imageUrl = null;if (!mReadOnly) {imageId = mImageCursor.getInt(mImageCursor.getColumnIndexOrThrow(ObservationPhoto._ID));imageUrl = mImageCursor.getString(mImageCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_URL));photoFilename = mImageCursor.getString(mImageCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_FILENAME));} else {imageUrl = mObservation.photos.get(position).photo_url;}if (imageUrl != null) {// Online photoimageView.setLayoutParams(new TwoWayView.LayoutParams(TwoWayView.LayoutParams.MATCH_PARENT, TwoWayView.LayoutParams.WRAP_CONTENT));UrlImageViewHelper.setUrlDrawable(imageView, imageUrl);} else {// Offline photoint newHeight = mPhotosViewPager.getMeasuredHeight();int newWidth = mPhotosViewPager.getMeasuredWidth();Bitmap bitmapImage = null;try {BitmapFactory.Options options = new BitmapFactory.Options();options.inSampleSize = ImageUtils.calculateInSampleSize(options, newWidth, newHeight);// Decode bitmap with inSampleSize setoptions.inJustDecodeBounds = false;// This decreases in-memory byte-storage per pixeloptions.inPreferredConfig = Bitmap.Config.ALPHA_8;bitmapImage = BitmapFactory.decodeFile(photoFilename, options);imageView.setImageBitmap(bitmapImage);} catch (Exception e) {e.printStackTrace();}}imageView.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(ObservationViewerActivity.this, ObservationPhotosViewer.class);intent.putExtra(ObservationPhotosViewer.CURRENT_PHOTO_INDEX, position);if (!mReadOnly) {intent.putExtra(ObservationPhotosViewer.OBSERVATION_ID, mObservation.id);intent.putExtra(ObservationPhotosViewer.OBSERVATION_ID_INTERNAL, mObservation._id);intent.putExtra(ObservationPhotosViewer.IS_NEW_OBSERVATION, true);intent.putExtra(ObservationPhotosViewer.READ_ONLY, true);} else {intent.putExtra(ObservationPhotosViewer.OBSERVATION, mObsJson);}startActivity(intent);}});((ViewPager)container).addView(imageView, 0);return imageView;}@Overridepublic void destroyItem(ViewGroup container, int position, Object object) {((ViewPager) container).removeView((ImageView) object);}}@Overrideprotected void onResume() {super.onResume();loadObservationIntoUI();refreshDataQuality();refreshProjectList();setupMap();resizeActivityList();resizeFavList();}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);ActionBar actionBar = getSupportActionBar();actionBar.setLogo(R.drawable.ic_arrow_back);actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setTitle(R.string.observation);mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.observation_viewer);mHelper = new ActivityHelper(this);reloadObservation(savedInstanceState, false);mUserName = (TextView) findViewById(R.id.user_name);mObservedOn = (TextView) findViewById(R.id.observed_on);mUserPic = (ImageView) findViewById(R.id.user_pic);mPhotosViewPager = (ViewPager) findViewById(R.id.photos);mIndicator = (CirclePageIndicator)findViewById(R.id.photos_indicator);mSharePhoto = (ImageView)findViewById(R.id.share_photo);mIdPic = (ImageView)findViewById(R.id.id_icon);mIdName = (TextView) findViewById(R.id.id_name);mTaxonicName = (TextView) findViewById(R.id.id_sub_name);mIdRow = (ViewGroup) findViewById(R.id.id_row);mTabHost = (TabHost) findViewById(android.R.id.tabhost);mMap = ((SupportMapFragment)getSupportFragmentManager().findFragmentById(R.id.location_map)).getMap();mLocationMapContainer = (ViewGroup) findViewById(R.id.location_map_container);mUnknownLocationContainer = (ViewGroup) findViewById(R.id.unknown_location_container);mUnknownLocationIcon = (ImageView) findViewById(R.id.unknown_location);mLocationText = (TextView) findViewById(R.id.location_text);mLocationPrivate = (ImageView) findViewById(R.id.location_private);mCasualGradeText = (TextView) findViewById(R.id.casual_grade_text);mCasualGradeIcon = (ImageView) findViewById(R.id.casual_grade_icon);mNeedsIdLine = (View) findViewById(R.id.needs_id_line);mResearchGradeLine = (View) findViewById(R.id.research_grade_line);mNeedsIdText = (TextView) findViewById(R.id.needs_id_text);mNeedsIdIcon = (ImageView) findViewById(R.id.needs_id_icon);mResearchGradeText = (TextView) findViewById(R.id.research_grade_text);mResearchGradeIcon = (ImageView) findViewById(R.id.research_grade_icon);mTipText = (TextView) findViewById(R.id.tip_text);mDataQualityReason = (ViewGroup) findViewById(R.id.data_quality_reason);mIncludedInProjects = (TextView) findViewById(R.id.included_in_projects);mIncludedInProjectsContainer = (ViewGroup) findViewById(R.id.included_in_projects_container);mActivityTabContainer = (ViewGroup) findViewById(R.id.activity_tab_content);mInfoTabContainer = (ViewGroup) findViewById(R.id.info_tab_content);mLoadingActivity = (ProgressBar) findViewById(R.id.loading_activity);mCommentsIdsList = (ListView) findViewById(R.id.comment_id_list);mActivityButtons = (ViewGroup) findViewById(R.id.activity_buttons);mAddComment = (ViewGroup) findViewById(R.id.add_comment);mAddId = (ViewGroup) findViewById(R.id.add_id);mFavoritesTabContainer = (ViewGroup) findViewById(R.id.favorites_tab_content);mLoadingFavs = (ProgressBar) findViewById(R.id.loading_favorites);mFavoritesList = (ListView) findViewById(R.id.favorites_list);mAddFavorite = (ViewGroup) findViewById(R.id.add_favorite);mRemoveFavorite = (ViewGroup) findViewById(R.id.remove_favorite);mNoFavsMessage = (TextView) findViewById(R.id.no_favs);mNoActivityMessage = (TextView) findViewById(R.id.no_activity);mNotesContainer = (ViewGroup) findViewById(R.id.notes_container);mNotes = (TextView) findViewById(R.id.notes);mLoginToAddCommentId = (TextView) findViewById(R.id.login_to_add_comment_id);mActivitySignUp = (Button) findViewById(R.id.activity_sign_up);mActivityLogin = (Button) findViewById(R.id.activity_login);mActivityLoginSignUpButtons = (ViewGroup) findViewById(R.id.activity_login_signup);mLoginToAddFave = (TextView) findViewById(R.id.login_to_add_fave);mFavesSignUp = (Button) findViewById(R.id.faves_sign_up);mFavesLogin = (Button) findViewById(R.id.faves_login);mFavesLoginSignUpButtons = (ViewGroup) findViewById(R.id.faves_login_signup);mSyncToAddCommentsIds = (TextView) findViewById(R.id.sync_to_add_comments_ids);mSyncToAddFave = (TextView) findViewById(R.id.sync_to_add_fave);mNoPhotosContainer = (ViewGroup) findViewById(R.id.no_photos);mIdPicBig = (ImageView) findViewById(R.id.id_icon_big);mIdArrow = (ImageView) findViewById(R.id.id_arrow);View.OnClickListener onLogin = new View.OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(ObservationViewerActivity.this, OnboardingActivity.class);intent.putExtra(OnboardingActivity.LOGIN, true);startActivityForResult(intent, REQUEST_CODE_LOGIN);}};View.OnClickListener onSignUp = new View.OnClickListener() {@Overridepublic void onClick(View v) {startActivityForResult(new Intent(ObservationViewerActivity.this, OnboardingActivity.class), REQUEST_CODE_LOGIN);}};mActivityLogin.setOnClickListener(onLogin);mActivitySignUp.setOnClickListener(onSignUp);mFavesLogin.setOnClickListener(onLogin);mFavesSignUp.setOnClickListener(onSignUp);mLocationPrivate.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {mHelper.alert(R.string.geoprivacy, R.string.geoprivacy_explanation);}});setupTabs();setupMap();refreshActivity();refreshFavorites();reloadPhotos();loadObservationIntoUI();refreshDataQuality();}private void reloadObservation(Bundle savedInstanceState, boolean forceReload) {Intent intent = getIntent();if (savedInstanceState == null) {// Do some setup based on the action being performed.Uri uri = intent.getData();mShowComments = intent.getBooleanExtra(SHOW_COMMENTS, false);if (uri == null) {String obsJson = intent.getStringExtra(""observation"");mReadOnly = intent.getBooleanExtra(""read_only"", false);mReloadObs = intent.getBooleanExtra(""reload"", false);mObsJson = obsJson;if (obsJson == null) {Log.e(TAG, ""Null URI from intent.getData"");finish();return;}mObservation = new Observation(new BetterJSONObject(obsJson));}mUri = uri;} else {String obsUri = savedInstanceState.getString(""mUri"");if (obsUri != null) {mUri = Uri.parse(obsUri);} else {mUri = intent.getData();}mObservation = (Observation) savedInstanceState.getSerializable(""mObservation"");mIdCount = savedInstanceState.getInt(""mIdCount"");mCommentCount = savedInstanceState.getInt(""mCommentCount"");mReadOnly = savedInstanceState.getBoolean(""mReadOnly"");mObsJson = savedInstanceState.getString(""mObsJson"");mFlagAsCaptive = savedInstanceState.getBoolean(""mFlagAsCaptive"");mTaxonName = savedInstanceState.getString(""mTaxonName"");mTaxonIdName = savedInstanceState.getString(""mTaxonIdName"");mTaxonImage = savedInstanceState.getString(""mTaxonImage"");try {String taxonJson = savedInstanceState.getString(""mTaxon"");if (taxonJson != null) mTaxon = new JSONObject(savedInstanceState.getString(""mTaxon""));} catch (JSONException e) {e.printStackTrace();}mActiveTab = savedInstanceState.getString(""mActiveTab"");mCommentsIds = loadListFromBundle(savedInstanceState, ""mCommentsIds"");mFavorites = loadListFromBundle(savedInstanceState, ""mFavorites"");mProjects = loadListFromBundle(savedInstanceState, ""mProjects"");}if (mCursor == null) {if (!mReadOnly) mCursor = managedQuery(mUri, Observation.PROJECTION, null, null, null);} else {mCursor.requery();}if ((mObservation == null) || (forceReload)) {if (!mReadOnly) mObservation = new Observation(mCursor);}}private int getFavoritedByUsername(String username) {for (int i = 0; i < mFavorites.size(); i++) {BetterJSONObject currentFav = mFavorites.get(i);BetterJSONObject user = new BetterJSONObject(currentFav.getJSONObject(""user""));if (user.getString(""login"").equals(username)) {// Current user has favorited this observationreturn i;}}return -1;}private void refreshFavorites() {SharedPreferences pref = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);final String username = pref.getString(""username"", null);TabWidget tabWidget = mTabHost.getTabWidget();if ((mFavorites == null) || (mFavorites.size() == 0)) {((TextView) tabWidget.getChildAt(2).findViewById(R.id.count)).setVisibility(View.GONE);} else {((TextView) tabWidget.getChildAt(2).findViewById(R.id.count)).setVisibility(View.VISIBLE);((TextView) tabWidget.getChildAt(2).findViewById(R.id.count)).setText(String.valueOf(mFavorites.size()));}if (username == null) {// Not logged inmAddFavorite.setVisibility(View.GONE);mLoginToAddFave.setVisibility(View.VISIBLE);mFavesLoginSignUpButtons.setVisibility(View.VISIBLE);mLoadingFavs.setVisibility(View.GONE);mFavoritesList.setVisibility(View.GONE);mNoFavsMessage.setVisibility(View.GONE);mSyncToAddFave.setVisibility(View.GONE);return;}if (mObservation.id == null) {// Observation not syncedmSyncToAddFave.setVisibility(View.VISIBLE);mLoginToAddFave.setVisibility(View.GONE);mFavesLoginSignUpButtons.setVisibility(View.GONE);mLoadingFavs.setVisibility(View.GONE);mFavoritesList.setVisibility(View.GONE);mAddFavorite.setVisibility(View.GONE);mRemoveFavorite.setVisibility(View.GONE);mNoFavsMessage.setVisibility(View.GONE);return;}mSyncToAddFave.setVisibility(View.GONE);mLoginToAddFave.setVisibility(View.GONE);mFavesLoginSignUpButtons.setVisibility(View.GONE);if (mFavorites == null) {// Still loadingmLoadingFavs.setVisibility(View.VISIBLE);mFavoritesList.setVisibility(View.GONE);mAddFavorite.setVisibility(View.GONE);mRemoveFavorite.setVisibility(View.GONE);mNoFavsMessage.setVisibility(View.GONE);return;}mLoadingFavs.setVisibility(View.GONE);mFavoritesList.setVisibility(View.VISIBLE);if (mFavorites.size() == 0) {mNoFavsMessage.setVisibility(View.VISIBLE);} else {mNoFavsMessage.setVisibility(View.GONE);}mFavIndex = getFavoritedByUsername(username);if (mFavIndex > -1) {// User has favorited the observationmAddFavorite.setVisibility(View.GONE);mRemoveFavorite.setVisibility(View.VISIBLE);} else {mAddFavorite.setVisibility(View.VISIBLE);mRemoveFavorite.setVisibility(View.GONE);}mFavoritesAdapter = new FavoritesAdapter(this, mFavorites);mFavoritesList.setAdapter(mFavoritesAdapter);mRemoveFavorite.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent serviceIntent = new Intent(INaturalistService.ACTION_REMOVE_FAVORITE, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent);mFavIndex = getFavoritedByUsername(username);if (mFavIndex > -1) mFavorites.remove(mFavIndex);mFavoritesAdapter.notifyDataSetChanged();mAddFavorite.setVisibility(View.VISIBLE);mRemoveFavorite.setVisibility(View.GONE);if (mFavorites.size() == 0) {mNoFavsMessage.setVisibility(View.VISIBLE);} else {mNoFavsMessage.setVisibility(View.GONE);}}});mAddFavorite.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent serviceIntent = new Intent(INaturalistService.ACTION_ADD_FAVORITE, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent);SharedPreferences pref = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = pref.getString(""username"", null);String userIconUrl = pref.getString(""user_icon_url"", null);SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"", Locale.US);String dateStr = dateFormat.format(new Date());BetterJSONObject newFav = new BetterJSONObject(String.format(""{ \""user\"": { \""login\"": \""%s\"", \""user_icon_url\"": \""%s\"" }, \""created_at\"": \""%s\"" }"",username, userIconUrl, dateStr));mFavorites.add(newFav);mFavoritesAdapter.notifyDataSetChanged();mRemoveFavorite.setVisibility(View.VISIBLE);mAddFavorite.setVisibility(View.GONE);if (mFavorites.size() == 0) {mNoFavsMessage.setVisibility(View.VISIBLE);} else {mNoFavsMessage.setVisibility(View.GONE);}}});}private void refreshActivity() {SharedPreferences pref = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = pref.getString(""username"", null);if (username == null) {// Not logged inmActivityButtons.setVisibility(View.GONE);mLoginToAddCommentId.setVisibility(View.VISIBLE);mActivityLoginSignUpButtons.setVisibility(View.VISIBLE);mLoadingActivity.setVisibility(View.GONE);mCommentsIdsList.setVisibility(View.GONE);mNoActivityMessage.setVisibility(View.GONE);mSyncToAddCommentsIds.setVisibility(View.GONE);return;}if (mObservation.id == null) {// Observation not syncedmSyncToAddCommentsIds.setVisibility(View.VISIBLE);mLoginToAddCommentId.setVisibility(View.GONE);mActivityLoginSignUpButtons.setVisibility(View.GONE);return;}// Update observation comment/id count for signed in users observationsmObservation.comments_count = mObservation.last_comments_count = mCommentCount;mObservation.identifications_count = mObservation.last_identifications_count = mIdCount;if (mObservation.getUri() != null) {ContentValues cv = mObservation.getContentValues();if (!((mObservation._synced_at == null) || ((mObservation._updated_at != null) && (mObservation._updated_at.after(mObservation._synced_at))))) {cv.put(Observation._SYNCED_AT, System.currentTimeMillis()); // No need to sync}getContentResolver().update(mObservation.getUri(), cv, null, null);}mLoginToAddCommentId.setVisibility(View.GONE);mActivityLoginSignUpButtons.setVisibility(View.GONE);mSyncToAddCommentsIds.setVisibility(View.GONE);if (mCommentsIds == null) {// Still loadingmLoadingActivity.setVisibility(View.VISIBLE);mCommentsIdsList.setVisibility(View.GONE);mActivityButtons.setVisibility(View.GONE);mNoActivityMessage.setVisibility(View.GONE);return;}mLoadingActivity.setVisibility(View.GONE);mCommentsIdsList.setVisibility(View.VISIBLE);mActivityButtons.setVisibility(View.VISIBLE);if (mCommentsIds.size() == 0) {mNoActivityMessage.setVisibility(View.VISIBLE);} else {mNoActivityMessage.setVisibility(View.GONE);}mAdapter = new CommentsIdsAdapter(this, mCommentsIds, mObservation.taxon_id == null ? 0 : mObservation.taxon_id , new CommentsIdsAdapter.OnIDAdded() {@Overridepublic void onIdentificationAdded(BetterJSONObject taxon) {try {// After calling the added ID API - we'll refresh the comment/ID listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_AGREE_ID, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);serviceIntent.putExtra(INaturalistService.TAXON_ID, taxon.getJSONObject(""taxon"").getInt(""id""));startService(serviceIntent);} catch (JSONException e) {e.printStackTrace();}}@Overridepublic void onIdentificationRemoved(BetterJSONObject taxon) {// After calling the remove API - we'll refresh the comment/ID listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_REMOVE_ID, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);serviceIntent.putExtra(INaturalistService.IDENTIFICATION_ID, taxon.getInt(""id""));startService(serviceIntent);}@Overridepublic void onCommentRemoved(BetterJSONObject comment) {// After calling the remove API - we'll refresh the comment/ID listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_DELETE_COMMENT, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.COMMENT_ID, comment.getInt(""id""));serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent);}@Overridepublic void onCommentUpdated(final BetterJSONObject comment) {// Set up the inputfinal EditText input = new EditText(ObservationViewerActivity.this);// Specify the type of input expected; this, for example, sets the input as a password, and will mask the textinput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);input.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));input.setText(comment.getString(""body""));mHelper.confirm(R.string.update_comment, input,new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {String commentBody = input.getText().toString();// After calling the update API - we'll refresh the comment/ID listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_UPDATE_COMMENT, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.COMMENT_ID, comment.getInt(""id""));serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);serviceIntent.putExtra(INaturalistService.COMMENT_BODY, commentBody);startService(serviceIntent);}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {dialog.cancel();}});}}, true, mReadOnly);mCommentsIdsList.setAdapter(mAdapter);mAddId.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(ObservationViewerActivity.this, IdentificationActivity.class);startActivityForResult(intent, NEW_ID_REQUEST_CODE);}});mAddComment.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {// Set up the inputfinal EditText input = new EditText(ObservationViewerActivity.this);// Specify the type of input expected; this, for example, sets the input as a password, and will mask the textinput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);input.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));mHelper.confirm(R.string.add_comment, input,new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {String comment = input.getText().toString();// Add the commentIntent serviceIntent = new Intent(INaturalistService.ACTION_ADD_COMMENT, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);serviceIntent.putExtra(INaturalistService.COMMENT_BODY, comment);startService(serviceIntent);mCommentsIds = null;refreshActivity();try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}// Refresh the comment/id listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent2 = new Intent(INaturalistService.ACTION_GET_OBSERVATION, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent2.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent2);}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {dialog.cancel();}});}});}private void setupMap() {if (mMap == null) return;mMap.setMyLocationEnabled(false);mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);mMap.getUiSettings().setAllGesturesEnabled(false);mMap.getUiSettings().setZoomControlsEnabled(false);Double lat, lon;Integer acc;lat = mObservation.private_latitude == null ? mObservation.latitude : mObservation.private_latitude;lon = mObservation.private_longitude == null ? mObservation.longitude : mObservation.private_longitude;acc = mObservation.positional_accuracy;if (lat != null && lon != null) {mMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {@Overridepublic void onMapClick(LatLng latLng) {Intent intent = new Intent(ObservationViewerActivity.this, LocationDetailsActivity.class);intent.putExtra(LocationDetailsActivity.OBSERVATION, mObservation);intent.putExtra(LocationDetailsActivity.READ_ONLY, true);startActivity(intent);}});LatLng latLng = new LatLng(lat, lon);mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 15));// Add the markermMap.clear();MarkerOptions opts = new MarkerOptions().position(latLng).icon(INaturalistMapActivity.observationIcon(mObservation.iconic_taxon_name));Marker m = mMap.addMarker(opts);mLocationMapContainer.setVisibility(View.VISIBLE);mUnknownLocationIcon.setVisibility(View.GONE);if ((mObservation.place_guess == null) || (mObservation.place_guess.length() == 0)) {// No place guess - show coordinates insteadif (acc == null) {mLocationText.setText(String.format(getString(R.string.location_coords_no_acc),String.format(""%.3f..."", lat),String.format(""%.3f..."", lon)));} else {mLocationText.setText(String.format(getString(R.string.location_coords),String.format(""%.3f..."", lat),String.format(""%.3f..."", lon),acc > 999 ? "">1 km"" : String.format(""%dm"", (int) acc)));}} else{mLocationText.setText(mObservation.place_guess);}mLocationText.setGravity(View.TEXT_ALIGNMENT_TEXT_END);if ((mObservation.geoprivacy == null) || (mObservation.geoprivacy.equals(""open""))) {mLocationPrivate.setVisibility(View.GONE);} else if (mObservation.geoprivacy.equals(""private"")) {mLocationPrivate.setVisibility(View.VISIBLE);mLocationPrivate.setImageResource(R.drawable.ic_visibility_off_black_24dp);} else if (mObservation.geoprivacy.equals(""obscured"")) {mLocationPrivate.setVisibility(View.VISIBLE);mLocationPrivate.setImageResource(R.drawable.ic_filter_tilt_shift_black_24dp);}mUnknownLocationContainer.setVisibility(View.GONE);} else {// Unknown locationmLocationMapContainer.setVisibility(View.GONE);mUnknownLocationIcon.setVisibility(View.VISIBLE);mLocationText.setText(R.string.unable_to_acquire_location);mLocationText.setGravity(View.TEXT_ALIGNMENT_CENTER);mLocationPrivate.setVisibility(View.GONE);mUnknownLocationContainer.setVisibility(View.VISIBLE);}}private View createTabContent(int tabIconResource) {View view = LayoutInflater.from(this).inflate(R.layout.observation_viewer_tab, null);TextView countText = (TextView) view.findViewById(R.id.count);ImageView tabIcon = (ImageView) view.findViewById(R.id.tab_icon);tabIcon.setImageResource(tabIconResource);return view;}private void setupTabs() {mTabHost.setup();addTab(mTabHost, mTabHost.newTabSpec(VIEW_TYPE_INFO).setIndicator(createTabContent(R.drawable.ic_info_black_48dp)));addTab(mTabHost, mTabHost.newTabSpec(VIEW_TYPE_COMMENTS_IDS).setIndicator(createTabContent(R.drawable.ic_forum_black_48dp)));addTab(mTabHost, mTabHost.newTabSpec(VIEW_TYPE_FAVS).setIndicator(createTabContent(R.drawable.ic_star_black_48dp)));mTabHost.getTabWidget().setDividerDrawable(null);if ((mActiveTab == null) && (mShowComments)) {mTabHost.setCurrentTab(1);refreshTabs(VIEW_TYPE_COMMENTS_IDS);} else {if (mActiveTab == null) {mTabHost.setCurrentTab(0);refreshTabs(VIEW_TYPE_INFO);} else {int i = 0;if (mActiveTab.equals(VIEW_TYPE_INFO)) i = 0;if (mActiveTab.equals(VIEW_TYPE_COMMENTS_IDS)) i = 1;if (mActiveTab.equals(VIEW_TYPE_FAVS)) i = 2;mTabHost.setCurrentTab(i);refreshTabs(mActiveTab);}}mTabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener() {@Overridepublic void onTabChanged(String tag) {refreshTabs(tag);}});}private void refreshTabs(String tag) {mActiveTab = tag;mInfoTabContainer.setVisibility(View.GONE);mActivityTabContainer.setVisibility(View.GONE);mFavoritesTabContainer.setVisibility(View.GONE);TabWidget tabWidget = mTabHost.getTabWidget();tabWidget.getChildAt(0).findViewById(R.id.bottom_line).setVisibility(View.GONE);tabWidget.getChildAt(1).findViewById(R.id.bottom_line).setVisibility(View.GONE);tabWidget.getChildAt(2).findViewById(R.id.bottom_line).setVisibility(View.GONE);((ImageView)tabWidget.getChildAt(0).findViewById(R.id.tab_icon)).setColorFilter(Color.parseColor(""#757575""));((ImageView)tabWidget.getChildAt(1).findViewById(R.id.tab_icon)).setColorFilter(Color.parseColor(""#757575""));((ImageView)tabWidget.getChildAt(2).findViewById(R.id.tab_icon)).setColorFilter(Color.parseColor(""#757575""));((TextView)tabWidget.getChildAt(2).findViewById(R.id.count)).setTextColor(Color.parseColor(""#757575""));int i = 0;if (tag.equals(VIEW_TYPE_INFO)) {mInfoTabContainer.setVisibility(View.VISIBLE);i = 0;} else if (tag.equals(VIEW_TYPE_COMMENTS_IDS)) {mActivityTabContainer.setVisibility(View.VISIBLE);i = 1;} else if (tag.equals(VIEW_TYPE_FAVS)) {mFavoritesTabContainer.setVisibility(View.VISIBLE);((TextView)tabWidget.getChildAt(2).findViewById(R.id.count)).setTextColor(getResources().getColor(R.color.inatapptheme_color));i = 2;}tabWidget.getChildAt(i).findViewById(R.id.bottom_line).setVisibility(View.VISIBLE);((ImageView)tabWidget.getChildAt(i).findViewById(R.id.tab_icon)).setColorFilter(getResources().getColor(R.color.inatapptheme_color));}private void addTab(TabHost tabHost, TabHost.TabSpec tabSpec) {tabSpec.setContent(new MyTabFactory(this));tabHost.addTab(tabSpec);}private void getCommentIdList() {if ((mObservation.id != null) && (mCommentsIds == null)) {mObservationReceiver = new ObservationReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);Log.i(TAG, ""Registering ACTION_OBSERVATION_RESULT"");registerReceiver(mObservationReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_GET_OBSERVATION, null, this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent);}}private void refreshDataQuality() {int dataQuality = DATA_QUALITY_CASUAL_GRADE;int reasonText = 0;if (((mObservation.latitude == null) && (mObservation.longitude == null)) && ((mObservation.private_latitude == null) && (mObservation.private_longitude == null))) {// No locationdataQuality = DATA_QUALITY_CASUAL_GRADE;reasonText = R.string.casual_grade_add_location;} else if (mObservation.observed_on == null) {// No observed on datedataQuality = DATA_QUALITY_CASUAL_GRADE;reasonText = R.string.casual_grade_add_date;} else if (((PhotosViewPagerAdapter)mPhotosViewPager.getAdapter()).getCount() == 0) {// No photosdataQuality = DATA_QUALITY_CASUAL_GRADE;reasonText = R.string.casual_grade_add_photo;} else if (mObservation.captive || mFlagAsCaptive) {// CaptivedataQuality = DATA_QUALITY_CASUAL_GRADE;reasonText = R.string.casual_grade_captive;} else if (mIdCount <= 1) {dataQuality = DATA_QUALITY_NEEDS_ID;reasonText = R.string.needs_id_more_ids;} else {dataQuality = DATA_QUALITY_RESEARCH_GRADE;}if (mObservation.quality_grade != null) {int observedDataQuality = -1;if (mObservation.quality_grade.equals(QUALITY_GRADE_CASUAL_GRADE)) {observedDataQuality = DATA_QUALITY_CASUAL_GRADE;} else if (mObservation.quality_grade.equals(QUALITY_GRADE_NEEDS_ID)) {observedDataQuality = DATA_QUALITY_NEEDS_ID;} else if (mObservation.quality_grade.equals(QUALITY_GRADE_RESEARCH)) {observedDataQuality = DATA_QUALITY_RESEARCH_GRADE;}if ((observedDataQuality != dataQuality) && (observedDataQuality != -1)) {// This observation was synced and got a different data quality score - prefer// to use what the server deducted through analysis / more advanced algorithmdataQuality = observedDataQuality;// Remove the reasoningreasonText = 0;}}// TODO - ""Observation is casual grade because the community voted that they cannot identify it from the photo.""// TODO - ""Observation needs finer identifications from the community to become ""Research Grade"" status.int gray = Color.parseColor(""#CBCBCB"");int green = Color.parseColor(""#8DBA30"");if (dataQuality == DATA_QUALITY_CASUAL_GRADE) {mNeedsIdLine.setBackgroundColor(gray);mResearchGradeLine.setBackgroundColor(gray);mNeedsIdText.setTextColor(gray);mResearchGradeText.setTextColor(gray);mNeedsIdIcon.setBackgroundResource(R.drawable.circular_border_thick_gray);mResearchGradeIcon.setBackgroundResource(R.drawable.circular_border_thick_gray);mNeedsIdIcon.setImageResource(R.drawable.transparent);mResearchGradeIcon.setImageResource(R.drawable.transparent);} else if (dataQuality == DATA_QUALITY_NEEDS_ID) {mNeedsIdLine.setBackgroundColor(green);mResearchGradeLine.setBackgroundColor(green);mNeedsIdText.setTextColor(green);mNeedsIdIcon.setBackgroundResource(R.drawable.circular_border_thick_green);mNeedsIdIcon.setImageResource(R.drawable.ic_done_black_24dp);mResearchGradeLine.setBackgroundColor(gray);mResearchGradeText.setTextColor(gray);mResearchGradeIcon.setBackgroundResource(R.drawable.circular_border_thick_gray);mResearchGradeIcon.setImageResource(R.drawable.transparent);} else {mNeedsIdLine.setBackgroundColor(green);mResearchGradeLine.setBackgroundColor(green);mNeedsIdText.setTextColor(green);mNeedsIdIcon.setBackgroundResource(R.drawable.circular_border_thick_green);mNeedsIdIcon.setImageResource(R.drawable.ic_done_black_24dp);mResearchGradeLine.setBackgroundColor(green);mResearchGradeText.setTextColor(green);mResearchGradeIcon.setBackgroundResource(R.drawable.circular_border_thick_green);mResearchGradeIcon.setImageResource(R.drawable.ic_done_black_24dp);}if ((reasonText != 0) && (!mReadOnly)) {mTipText.setText(Html.fromHtml(getString(reasonText)));mDataQualityReason.setVisibility(View.VISIBLE);} else {mDataQualityReason.setVisibility(View.GONE);}}private void loadObservationIntoUI() {String userIconUrl = null;if (mReadOnly) {if (mObsJson == null) {finish();return;}BetterJSONObject obs = new BetterJSONObject(mObsJson);JSONObject userObj = obs.getJSONObject(""user"");if (userObj != null) {userIconUrl = userObj.has(""user_icon_url"") && !userObj.isNull(""user_icon_url"") ? userObj.optString(""user_icon_url"", null) : null;if (userIconUrl == null) {userIconUrl = userObj.has(""icon_url"") && !userObj.isNull(""icon_url"") ? userObj.optString(""icon_url"", null) : null;}mUserName.setText(userObj.optString(""login""));mUserPic.setVisibility(View.VISIBLE);mUserName.setVisibility(View.VISIBLE);} else {mUserPic.setVisibility(View.INVISIBLE);mUserName.setVisibility(View.INVISIBLE);}} else {SharedPreferences pref = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = pref.getString(""username"", null);userIconUrl = pref.getString(""user_icon_url"", null);mUserName.setText(username);}if (userIconUrl != null) {UrlImageViewHelper.setUrlDrawable(mUserPic, userIconUrl, R.drawable.ic_account_circle_black_24dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) { }@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Return a circular version of the profile pictureBitmap centerCrop = ImageUtils.centerCropBitmap(loadedBitmap);return ImageUtils.getCircleBitmap(centerCrop);}});} else {mUserPic.setImageResource(R.drawable.ic_account_circle_black_24dp);}if (mReadOnly) {if (mObsJson == null) return;BetterJSONObject obs = new BetterJSONObject(mObsJson);final JSONObject userObj = obs.getJSONObject(""user"");OnClickListener showUser = new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(ObservationViewerActivity.this, UserProfile.class);intent.putExtra(""user"", new BetterJSONObject(userObj));startActivity(intent);}};mUserName.setOnClickListener(showUser);mUserPic.setOnClickListener(showUser);}mObservedOn.setText(formatObservedOn(mObservation.observed_on, mObservation.time_observed_at));if (mPhotosAdapter.getCount() <= 1) {mIndicator.setVisibility(View.GONE);mNoPhotosContainer.setVisibility(View.GONE);if (mPhotosAdapter.getCount() == 0) {// No photos at allmNoPhotosContainer.setVisibility(View.VISIBLE);mIdPicBig.setImageResource(ObservationPhotosViewer.observationIcon(mObservation.toJSONObject()));}} else {mIndicator.setVisibility(View.VISIBLE);mNoPhotosContainer.setVisibility(View.GONE);}mSharePhoto.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {final DialogInterface.OnClickListener onClick = new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);String obsUrl = ""http://"" + inatHost + ""/observations/"" + mObservation.id;switch (which) {case R.id.share:Intent shareIntent = new Intent();shareIntent.setAction(Intent.ACTION_SEND);shareIntent.setType(""text/plain"");shareIntent.putExtra(Intent.EXTRA_TEXT, obsUrl);startActivity(shareIntent);break;case R.id.view_on_inat:Intent i = new Intent(Intent.ACTION_VIEW);i.setData(Uri.parse(obsUrl));startActivity(i);break;}}};if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {PopupMenu popup = new PopupMenu(ObservationViewerActivity.this, mSharePhoto);popup.getMenuInflater().inflate(R.menu.share_photo_menu, popup.getMenu());popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {@Overridepublic boolean onMenuItemClick(android.view.MenuItem menuItem) {onClick.onClick(null, menuItem.getItemId());return true;}});popup.show();} else {new BottomSheet.Builder(ObservationViewerActivity.this).sheet(R.menu.share_photo_menu).listener(onClick).show();}}});mIdRow.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {if (mTaxon == null) {// No taxon - don't show the taxon details pagereturn;}Intent intent = new Intent(ObservationViewerActivity.this, GuideTaxonActivity.class);intent.putExtra(""taxon"", new BetterJSONObject(mTaxon));intent.putExtra(""guide_taxon"", false);intent.putExtra(""show_add"", false);startActivity(intent);}});mIdPic.setImageResource(ObservationPhotosViewer.observationIcon(mObservation.toJSONObject()));mIdName.setText((mObservation.preferred_common_name != null) && (mObservation.preferred_common_name.length() > 0) ? mObservation.preferred_common_name : mObservation.species_guess);mTaxonicName.setVisibility(View.GONE);if (mObservation.id == null) {mSharePhoto.setVisibility(View.GONE);}if ((mObservation.taxon_id == null) && (mObservation.species_guess == null)) {mIdName.setText(R.string.unknown_species);mIdArrow.setVisibility(View.GONE);} else if (mObservation.taxon_id != null) {mIdArrow.setVisibility(View.VISIBLE);if ((mTaxonName == null) || (mTaxonIdName == null) || (mTaxonImage == null)) {downloadTaxon();} else {UrlImageViewHelper.setUrlDrawable(mIdPic, mTaxonImage);mIdName.setText(mTaxonIdName);mTaxonicName.setText(mTaxonName);mTaxonicName.setVisibility(View.VISIBLE);}}getCommentIdList();if (!mReadOnly) {// Get IDs of project-observationsint obsId = (mObservation.id == null ? mObservation._id : mObservation.id);Cursor c = getContentResolver().query(ProjectObservation.CONTENT_URI, ProjectObservation.PROJECTION,""(observation_id = "" + obsId + "") AND ((is_deleted = 0) OR (is_deleted is NULL))"",null, ProjectObservation.DEFAULT_SORT_ORDER);mProjectIds = new ArrayList<Integer>();while (c.isAfterLast() == false) {ProjectObservation projectObservation = new ProjectObservation(c);mProjectIds.add(projectObservation.project_id);c.moveToNext();}c.close();mProjects = new ArrayList<BetterJSONObject>();for (int projectId : mProjectIds) {c = getContentResolver().query(Project.CONTENT_URI, Project.PROJECTION,""(id = "" + projectId + "")"", null, Project.DEFAULT_SORT_ORDER);if (c.getCount() > 0) {Project project = new Project(c);BetterJSONObject projectJson = new BetterJSONObject();projectJson.put(""project"", project.toJSONObject());mProjects.add(projectJson);}c.close();}}refreshProjectList();mIncludedInProjectsContainer.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(ObservationViewerActivity.this, ObservationProjectsViewer.class);intent.putExtra(ObservationProjectsViewer.PROJECTS, mProjects);startActivity(intent);}});if ((mObservation.description != null) && (mObservation.description.trim().length() > 0)) {mNotesContainer.setVisibility(View.VISIBLE);mNotes.setText(mObservation.description);} else {mNotesContainer.setVisibility(View.GONE);}}private void downloadTaxon() {String inatNetwork = mApp.getInaturalistNetworkMember();String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();final String idUrl = ""http://"" + inatHost + ""/taxa/"" + mObservation.taxon_id + "".json?locale="" + deviceLanguage;// Download the taxon image URLnew Thread(new Runnable() {@Overridepublic void run() {final JSONObject taxon = downloadJson(idUrl);mTaxon = taxon;if (taxon != null) {try {final String imageUrl = taxon.getString(""image_url"");runOnUiThread(new Runnable() {@Overridepublic void run() {try {mTaxonImage = imageUrl;UrlImageViewHelper.setUrlDrawable(mIdPic, mTaxonImage);if (taxon.has(""default_name"")) {mTaxonIdName = taxon.getJSONObject(""default_name"").getString(""name"");} else if (taxon.has(""common_name"")) {mTaxonIdName = taxon.getJSONObject(""common_name"").getString(""name"");} else {String commonName = taxon.optString(""preferred_common_name"", null);if ((commonName == null) || (commonName.length() == 0)) {commonName = taxon.optString(""english_common_name"");}mTaxonIdName = commonName;}mTaxonName = taxon.getString(""name"");mIdName.setText(mTaxonIdName);mTaxonicName.setText(mTaxonName);mTaxonicName.setVisibility(View.VISIBLE);} catch (JSONException e) {e.printStackTrace();}}});} catch (JSONException e) {e.printStackTrace();}}}}).start();}private JSONObject downloadJson(String uri) {HttpURLConnection conn = null;StringBuilder jsonResults = new StringBuilder();try {URL url = new URL(uri);conn = (HttpURLConnection) url.openConnection();InputStreamReader in = new InputStreamReader(conn.getInputStream());// Load the results into a StringBuilderint read;char[] buff = new char[1024];while ((read = in.read(buff)) != -1) {jsonResults.append(buff, 0, read);}} catch (MalformedURLException e) {return null;} catch (IOException e) {return null;} finally {if (conn != null) {conn.disconnect();}}try {return new JSONObject(jsonResults.toString());} catch (JSONException e) {return null;}}private String formatObservedOn(Timestamp date, Timestamp time) {StringBuilder format = new StringBuilder();if (date != null) {// Format the date partCalendar today = Calendar.getInstance();today.setTime(new Date());Calendar calDate = Calendar.getInstance();calDate.setTimeInMillis(date.getTime());String dateFormatString;if (today.get(Calendar.YEAR) > calDate.get(Calendar.YEAR)) {// Previous year(s)dateFormatString = ""MM/dd/yy"";} else {// Current yeardateFormatString = ""MMM d"";}SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatString);format.append(dateFormat.format(date));}if (time != null) {// Format the time partif (date != null) {format.append("" • "");}SimpleDateFormat timeFormat = new SimpleDateFormat(""hh:mma"");format.append(timeFormat.format(time));}return format.toString();}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:prepareToExit();return true;case R.id.edit_observation:startActivityForResult(new Intent(Intent.ACTION_EDIT, mUri, this, ObservationEditor.class), REQUEST_CODE_EDIT_OBSERVATION);return true;case R.id.flag_captive:mFlagAsCaptive = !mFlagAsCaptive;refreshDataQuality();return true;default:return super.onOptionsItemSelected(item);}}@Overridepublic void onBackPressed() {prepareToExit();}private void prepareToExit() {if (!mReadOnly || !mFlagAsCaptive) {finish();return;}// Ask the user if he really wants to mark observation as captivemHelper.confirm(getString(R.string.flag_as_captive), getString(R.string.are_you_sure_you_want_to_flag_as_captive),new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {// Flag as captiveIntent serviceIntent = new Intent(INaturalistService.ACTION_FLAG_OBSERVATION_AS_CAPTIVE, null, ObservationViewerActivity.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent);Toast.makeText(getApplicationContext(), R.string.observation_flagged_as_captive, Toast.LENGTH_LONG).show();setResult(RESULT_FLAGGED_AS_CAPTIVE);finish();}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {dialog.cancel();}}, R.string.yes, R.string.no);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {// Inflate the menu; this adds items to the action bar if it is present.getMenuInflater().inflate(mReadOnly ? R.menu.observation_viewer_read_only_menu : R.menu.observation_viewer_menu, menu);return true;}@Overridepublic boolean onPrepareOptionsMenu(Menu menu) {super.onPrepareOptionsMenu(menu);if (mReadOnly) {menu.findItem(R.id.flag_captive).setChecked(mFlagAsCaptive);}return true;}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(""mObservation"", mObservation);outState.putInt(""mIdCount"", mIdCount);outState.putInt(""mCommentCount"", mCommentCount);outState.putBoolean(""mReadOnly"", mReadOnly);outState.putString(""mObsJson"", mObsJson);outState.putBoolean(""mFlagAsCaptive"", mFlagAsCaptive);outState.putString(""mTaxonIdName"", mTaxonIdName);outState.putString(""mTaxonName"", mTaxonName);outState.putString(""mTaxonImage"", mTaxonImage);outState.putString(""mTaxon"", mTaxon != null ? mTaxon.toString() : null);outState.putString(""mActiveTab"", mActiveTab);saveListToBundle(outState, mCommentsIds, ""mCommentsIds"");saveListToBundle(outState, mFavorites, ""mFavorites"");saveListToBundle(outState, mProjects, ""mProjects"");super.onSaveInstanceState(outState);}private void saveListToBundle(Bundle outState, ArrayList<BetterJSONObject> list, String key) {if (list != null) {JSONArray arr = new JSONArray();for (int i = 0; i < list.size(); i++) {arr.put(list.get(i).getJSONObject().toString());}outState.putString(key, arr.toString());}}private ArrayList<BetterJSONObject> loadListFromBundle(Bundle savedInstanceState, String key) {ArrayList<BetterJSONObject> results = new ArrayList<BetterJSONObject>();String obsString = savedInstanceState.getString(key);if (obsString != null) {try {JSONArray arr = new JSONArray(obsString);for (int i = 0; i < arr.length(); i++) {results.add(new BetterJSONObject(arr.getString(i)));}return results;} catch (JSONException exc) {exc.printStackTrace();return null;}} else {return null;}}private class ObservationReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Log.e(TAG, ""ObservationReceiver - OBSERVATION_RESULT"");try {unregisterReceiver(mObservationReceiver);} catch (Exception exc) {// Continue}Observation observation = (Observation) intent.getSerializableExtra(INaturalistService.OBSERVATION_RESULT);if (mObservation == null) {reloadObservation(null, false);mObsJson = null;}if (observation == null) {// Couldn't retrieve observation details (probably deleted)mCommentsIds = new ArrayList<BetterJSONObject>();mFavorites = new ArrayList<BetterJSONObject>();refreshActivity();refreshFavorites();return;}JSONArray projects = observation.projects.getJSONArray();JSONArray comments = observation.comments.getJSONArray();JSONArray ids = observation.identifications.getJSONArray();JSONArray favs = observation.favorites.getJSONArray();ArrayList<BetterJSONObject> results = new ArrayList<BetterJSONObject>();ArrayList<BetterJSONObject> favResults = new ArrayList<BetterJSONObject>();ArrayList<BetterJSONObject> projectResults = new ArrayList<BetterJSONObject>();mIdCount = 0;mCommentCount = 0;try {for (int i = 0; i < projects.length(); i++) {BetterJSONObject project = new BetterJSONObject(projects.getJSONObject(i));projectResults.add(project);}for (int i = 0; i < comments.length(); i++) {BetterJSONObject comment = new BetterJSONObject(comments.getJSONObject(i));comment.put(""type"", ""comment"");results.add(comment);mCommentCount++;}for (int i = 0; i < ids.length(); i++) {BetterJSONObject id = new BetterJSONObject(ids.getJSONObject(i));id.put(""type"", ""identification"");results.add(id);mIdCount++;}for (int i = 0; i < favs.length(); i++) {BetterJSONObject fav = new BetterJSONObject(favs.getJSONObject(i));favResults.add(fav);}} catch (JSONException e) {e.printStackTrace();}Comparator<BetterJSONObject> comp = new Comparator<BetterJSONObject>() {@Overridepublic int compare(BetterJSONObject lhs, BetterJSONObject rhs) {Timestamp date1 = lhs.getTimestamp(""created_at"");Timestamp date2 = rhs.getTimestamp(""created_at"");return date1.compareTo(date2);}};Collections.sort(results, comp);Collections.sort(favResults, comp);mCommentsIds = results;mFavorites = favResults;mProjects = projectResults;if (mReloadObs) {// Reload entire observation details (not just the comments/favs)mObservation = observation;mObsJson = intent.getStringExtra(INaturalistService.OBSERVATION_JSON_RESULT);}reloadPhotos();loadObservationIntoUI();setupMap();refreshActivity();refreshFavorites();resizeActivityList();resizeFavList();refreshProjectList();refreshDataQuality();}}private void reloadPhotos() {mPhotosAdapter = new PhotosViewPagerAdapter();mPhotosViewPager.setAdapter(mPhotosAdapter);mIndicator.setViewPager(mPhotosViewPager);}private void resizeFavList() {final Handler handler = new Handler();if ((mFavoritesTabContainer.getVisibility() == View.VISIBLE) && (mFavoritesList.getVisibility() == View.VISIBLE) && (mFavoritesList.getWidth() == 0)) {// UI not initialized yet - try laterhandler.postDelayed(new Runnable() {@Overridepublic void run() {resizeFavList();}}, 100);return;}handler.postDelayed(new Runnable() {@Overridepublic void run() {setListViewHeightBasedOnItems(mFavoritesList);}}, 100);}private void resizeActivityList() {final Handler handler = new Handler();if ((mCommentsIdsList.getVisibility() == View.VISIBLE) && (mActivityTabContainer.getVisibility() == View.VISIBLE) && (mCommentsIdsList.getWidth() == 0)) {// UI not initialized yet - try laterhandler.postDelayed(new Runnable() {@Overridepublic void run() {resizeActivityList();}}, 100);return;}handler.postDelayed(new Runnable() {@Overridepublic void run() {int height = setListViewHeightBasedOnItems(mCommentsIdsList);View background = findViewById(R.id.comment_id_list_background);ViewGroup.LayoutParams params2 = background.getLayoutParams();params2.height = height;background.requestLayout();handler.postDelayed(new Runnable() {@Overridepublic void run() {int height = setListViewHeightBasedOnItems(mCommentsIdsList);View background = findViewById(R.id.comment_id_list_background);ViewGroup.LayoutParams params2 = background.getLayoutParams();params2.height = height;background.requestLayout();}}, 100);}}, 100);}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if (requestCode == REQUEST_CODE_EDIT_OBSERVATION) {if ((resultCode == ObservationEditor.RESULT_DELETED) || (resultCode == ObservationEditor.RESULT_RETURN_TO_OBSERVATION_LIST)) {// User deleted the observation (or did a batch-edit)finish();return;} else if (resultCode == ObservationEditor.RESULT_REFRESH_OBS) {// User made changes to observation - refresh the viewreloadObservation(null, true);reloadPhotos();loadObservationIntoUI();setupMap();refreshActivity();refreshFavorites();resizeActivityList();resizeFavList();refreshProjectList();refreshDataQuality();}} if (requestCode == NEW_ID_REQUEST_CODE) {if (resultCode == RESULT_OK) {// Add the IDInteger taxonId = data.getIntExtra(IdentificationActivity.TAXON_ID, 0);String idRemarks = data.getStringExtra(IdentificationActivity.ID_REMARKS);Intent serviceIntent = new Intent(INaturalistService.ACTION_ADD_IDENTIFICATION, null, this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);serviceIntent.putExtra(INaturalistService.TAXON_ID, taxonId);serviceIntent.putExtra(INaturalistService.IDENTIFICATION_BODY, idRemarks);startService(serviceIntent);// Show a loading progress until the new comments/IDs are loadedmCommentsIds = null;refreshActivity();try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}// Refresh the comment/id listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent2 = new Intent(INaturalistService.ACTION_GET_OBSERVATION, null, this, INaturalistService.class);serviceIntent2.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent2);}} else if ((requestCode == REQUEST_CODE_LOGIN) && (resultCode == Activity.RESULT_OK)) {// Show a loading progress until the new comments/IDs are loadedmCommentsIds = null;mFavorites = null;refreshActivity();refreshFavorites();// Refresh the comment/id listIntentFilter filter = new IntentFilter(INaturalistService.ACTION_OBSERVATION_RESULT);registerReceiver(mObservationReceiver, filter);Intent serviceIntent2 = new Intent(INaturalistService.ACTION_GET_OBSERVATION, null, this, INaturalistService.class);serviceIntent2.putExtra(INaturalistService.OBSERVATION_ID, mObservation.id);startService(serviceIntent2);}}private void refreshProjectList() {if ((mProjects != null) && (mProjects.size() > 0)) {mIncludedInProjectsContainer.setVisibility(View.VISIBLE);int count = mProjects.size();mIncludedInProjects.setText(String.format(getString(count > 1 ? R.string.included_in_projects : R.string.included_in_projects_singular), count));} else {mIncludedInProjectsContainer.setVisibility(View.GONE);}}/*** Sets ListView height dynamically based on the height of the items.** @param listView to be resized*/public int setListViewHeightBasedOnItems(final ListView listView) {ListAdapter listAdapter = listView.getAdapter();if (listAdapter != null) {int numberOfItems = listAdapter.getCount();// Get total height of all items.int totalItemsHeight = 0;for (int itemPos = 0; itemPos < numberOfItems; itemPos++) {View item = listAdapter.getView(itemPos, null, listView);item.measure(MeasureSpec.makeMeasureSpec(listView.getWidth(), MeasureSpec.AT_MOST), MeasureSpec.UNSPECIFIED);totalItemsHeight += item.getMeasuredHeight();}// Get total height of all item dividers.int totalDividersHeight = listView.getDividerHeight() *(numberOfItems - 1);// Set list height.ViewGroup.LayoutParams params = listView.getLayoutParams();int paddingHeight = (int)getResources().getDimension(R.dimen.actionbar_height);params.height = totalItemsHeight + totalDividersHeight;listView.setLayoutParams(params);listView.requestLayout();return params.height;} else {return 0;}}}",ObservationViewerActivity.java,0
200,"package org.inaturalist.android;import java.io.Serializable;import java.util.HashMap;import org.json.JSONException;import org.json.JSONObject;import android.content.ContentUris;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.provider.BaseColumns;import android.util.Log;public class ProjectField implements BaseColumns, Serializable {public static final String TAG = ""ProjectField"";public Integer _id;public Integer field_id;public Integer project_id;public String name;public String description;public String data_type;public String allowed_values;public Boolean is_required = false;public Integer position;public static final String TABLE_NAME = ""project_fields"";public static final int PROJECT_FIELDS_URI_CODE = 3979;public static final int PROJECT_FIELD_ID_URI_CODE = 3964;public static HashMap<String, String> PROJECTION_MAP;public static final String AUTHORITY = ""org.inaturalist.android.project_field"";public static final Uri    CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/project_fields"");public static final String CONTENT_TYPE = ""vnd.android.cursor.dir/vnd.google.project_field"";public static final String CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/vnd.google.project_field"";public static final String DEFAULT_SORT_ORDER = ""_id DESC"";public static final String FIELD_ID = ""field_id"";public static final String PROJECT_ID = ""project_id"";public static final String NAME = ""name"";public static final String DESCRIPTION = ""description"";public static final String DATA_TYPE = ""data_type"";public static final String ALLOWED_VALUES = ""allowed_values"";public static final String IS_REQUIRED = ""is_required"";public static final String POSITION = ""position"";public static final String[] PROJECTION = new String[] {ProjectField._ID,ProjectField.FIELD_ID,ProjectField.PROJECT_ID,ProjectField.NAME,ProjectField.DESCRIPTION,ProjectField.DATA_TYPE,ProjectField.ALLOWED_VALUES,ProjectField.IS_REQUIRED,ProjectField.POSITION};static {PROJECTION_MAP = new HashMap<String, String>();PROJECTION_MAP.put(ProjectField._ID, ProjectField._ID);PROJECTION_MAP.put(ProjectField.FIELD_ID, ProjectField.FIELD_ID);PROJECTION_MAP.put(ProjectField.PROJECT_ID, ProjectField.PROJECT_ID);PROJECTION_MAP.put(ProjectField.NAME, ProjectField.NAME);PROJECTION_MAP.put(ProjectField.DESCRIPTION, ProjectField.DESCRIPTION);PROJECTION_MAP.put(ProjectField.DATA_TYPE, ProjectField.DATA_TYPE);PROJECTION_MAP.put(ProjectField.ALLOWED_VALUES, ProjectField.ALLOWED_VALUES);PROJECTION_MAP.put(ProjectField.IS_REQUIRED, ProjectField.IS_REQUIRED);PROJECTION_MAP.put(ProjectField.POSITION, ProjectField.POSITION);}public ProjectField() {}public ProjectField(Cursor c) {if (c.getPosition() == -1) c.moveToFirst();BetterCursor bc = new BetterCursor(c);this._id = bc.getInt(_ID);this.field_id = bc.getInt(FIELD_ID);this.project_id = bc.getInt(PROJECT_ID);this.name = bc.getString(NAME);this.description = bc.getString(DESCRIPTION);this.data_type = bc.getString(DATA_TYPE);this.allowed_values = bc.getString(ALLOWED_VALUES);this.is_required = bc.getBoolean(IS_REQUIRED);this.position = bc.getInt(POSITION);}public ProjectField(BetterJSONObject o) {try {this.field_id = o.getInt(""observation_field_id"");if (this.field_id == null) this.field_id = o.getInt(""id"");this.project_id = o.getInt(""project_id"");if (o.has(""observation_field"")) {this.name = o.getJSONObject(""observation_field"").getString(""name"");this.description = o.getJSONObject(""observation_field"").getString(""description"");this.data_type = o.getJSONObject(""observation_field"").getString(""datatype"");this.allowed_values = o.getJSONObject(""observation_field"").getString(""allowed_values"");} else {this.name = o.getString(""name"");this.description = o.getString(""description"");this.data_type = o.getString(""datatype"");this.allowed_values = o.getString(""allowed_values"");}this.is_required = o.getBoolean(""required"");if (this.is_required == null) this.is_required = false;this.position = o.getInt(""position"");} catch (JSONException e) {e.printStackTrace();}}@Overridepublic String toString() {return ""ProjectField(project id: "" + (project_id == null ? ""null"" : project_id) + "", field_id: "" + field_id + "", _id: "" + _id + "")"";}public Uri getUri() {if (_id == null) {return null;} else {return ContentUris.withAppendedId(CONTENT_URI, _id);}}public ContentValues getContentValues() {ContentValues cv = new ContentValues();cv.put(FIELD_ID, field_id);if (project_id != null) cv.put(PROJECT_ID, project_id);cv.put(NAME, name);cv.put(DESCRIPTION, description);cv.put(DATA_TYPE, data_type);cv.put(ALLOWED_VALUES, allowed_values);cv.put(IS_REQUIRED, is_required);cv.put(POSITION, position);return cv;}public static String sqlCreate() {return ""CREATE TABLE "" + TABLE_NAME + "" (""+ ProjectField._ID + "" INTEGER PRIMARY KEY,""+ ""field_id INTEGER,""+ ""project_id INTEGER,""+ ""name TEXT, ""+ ""description TEXT, ""+ ""data_type TEXT, ""+ ""allowed_values TEXT, ""+ ""is_required INTEGER, ""+ ""position INTEGER, ""+ ""UNIQUE(field_id, project_id) ON CONFLICT REPLACE""+ "");"";}}",ProjectField.java,0
200,"package org.inaturalist.android;import java.io.IOException;import java.io.InputStreamReader;import java.io.Serializable;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.app.Activity;import android.app.Application;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.res.Resources;import android.graphics.Color;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.provider.Settings;import android.support.v4.app.Fragment;import android.text.Editable;import android.text.Html;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.Filter;import android.widget.Filterable;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;public abstract class BaseTab extends Fragment implements ProjectsAdapter.OnLoading, INaturalistApp.OnLocationStatus {private ProjectsAdapter mAdapter;private ArrayList<JSONObject> mProjects = null;private Button mLogin;private Button mSettings;private static final int REQUEST_CODE_LOGIN = 0x1000;private ActivityHelper mHelper;private class ProjectsReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Log.i(TAG, ""GOT "" + getFilterResultName());try {getActivity().unregisterReceiver(mProjectsReceiver);} catch (Exception exc) {exc.printStackTrace();}Boolean isSharedOnApp = intent.getBooleanExtra(INaturalistService.IS_SHARED_ON_APP, false);SerializableJSONArray serializableArray;if (!isSharedOnApp) {Serializable sarr = intent.getSerializableExtra(getFilterResultParamName());if (sarr instanceof SerializableJSONArray) {serializableArray = (SerializableJSONArray) sarr;} else {Log.e(TAG, ""Got invalid non array convertible response from server: "" + sarr);serializableArray = null;}} else {// Get results from app contextserializableArray = (SerializableJSONArray) mApp.getServiceResult(getFilterResultName());mApp.setServiceResult(getFilterResultName(), null); // Clear data afterwards}if (serializableArray == null) {mProjects = new ArrayList<JSONObject>();loadProjectsIntoUI();return;}JSONArray projects = serializableArray.getJSONArray();mProjects = new ArrayList<JSONObject>();if (projects == null) {loadProjectsIntoUI();return;}for (int i = 0; i < projects.length(); i++) {try {mProjects.add(projects.getJSONObject(i));} catch (JSONException e) {e.printStackTrace();}}loadProjectsIntoUI();}}private void loadProjectsIntoUI() {mAdapter = new ProjectsAdapter(getActivity(), null, this, mProjects, getDefaultIcon());mProjectList.setAdapter(mAdapter);mProjectList.setVisibility(View.VISIBLE);mProgressBar.setVisibility(View.GONE);if (mProjects.size() > 0) {mEmptyListLabel.setVisibility(View.GONE);mSearchText.setEnabled(true);} else {mEmptyListLabel.setVisibility(View.VISIBLE);mProjectList.setVisibility(View.GONE);if (!isNetworkAvailable()) {// No projects due to no Internet connectionmEmptyListLabel.setText(getNoInternetText());} else if (requiresLocation() && !mApp.isLocationEnabled(this)) {// No projects due to no location services enabledmEmptyListLabel.setText(getLocationRequiredText());mSettings.setVisibility(View.VISIBLE);} else if (requiresLogin() && !mApp.loggedIn()) {// Required user loginmEmptyListLabel.setText(getUserLoginRequiredText());mLogin.setVisibility(View.VISIBLE);} else {// No projects foundmEmptyListLabel.setText(getNoItemsFoundText());}mSearchText.setEnabled(false);}}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}private static final String TAG = ""INAT"";private ListView mProjectList;private ProjectsReceiver mProjectsReceiver;private TextView mEmptyListLabel;private EditText mSearchText;private ProgressBar mProgressBar;protected INaturalistApp mApp;/** Methods that should be overriden by subclasses*//** What action name should be used when communicating with the iNat service (e.g. ACTION_GET_JOINED_PROJECTS) */abstract protected String getActionName();/** What filter result name should be used when communicating with the iNat service (e.g. ACTION_PROJECTS_RESULT) */abstract protected String getFilterResultName();/** What result param name should be used when communicating with the iNat service (e.g. PROJECTS_RESULT) */abstract protected String getFilterResultParamName();/** When an item (project/guide) is clicked */abstract protected void onItemSelected(BetterJSONObject item, int index);/** Returns the text to display when no projects/guides are found */abstract protected String getNoItemsFoundText();/** Returns the text to display when no Internet connection is available */abstract protected String getNoInternetText();/** Returns the text to display when no location services are available */protected String getLocationRequiredText() { return getResources().getString(R.string.please_enable_location_services); }/** Whether or not the tab requires user login (e.g. for ""Joined projects"") */protected boolean requiresLogin() { return false; }/** Whether or not the tab requires location services (e.g. ""Nearby Projects"") */protected boolean requiresLocation() { return false; }/** Returns the text to display when a user login is required */protected String getUserLoginRequiredText() { return getResources().getString(R.string.please_sign_in); }/** If true - in case the search filter returns no text, should re-call the original intent/action from* the iNat service class */abstract protected boolean recallServiceActionIfNoResults();/** The default icon used for project items */protected int getDefaultIcon() { return R.drawable.ic_work_black_24dp; }@Overridepublic void onSaveInstanceState(Bundle outState) {saveListToBundle(outState, mProjects, ""mProjects"");super.onSaveInstanceState(outState);}private void saveListToBundle(Bundle outState, ArrayList<JSONObject> list, String key) {if (list != null) {JSONArray arr = new JSONArray(list);outState.putString(key, arr.toString());}}private ArrayList<JSONObject> loadListFromBundle(Bundle savedInstanceState, String key) {ArrayList<JSONObject> results = new ArrayList<JSONObject>();String obsString = savedInstanceState.getString(key);if (obsString != null) {try {JSONArray arr = new JSONArray(obsString);for (int i = 0; i < arr.length(); i++) {results.add(arr.getJSONObject(i));}return results;} catch (JSONException exc) {exc.printStackTrace();return null;}} else {return null;}}@Overridepublic void onPause() {super.onPause();try {if (mProjectsReceiver != null) {Log.i(TAG, ""unregisterReceiver "" + getFilterResultName());getActivity().unregisterReceiver(mProjectsReceiver);}} catch (Exception exc) {exc.printStackTrace();}}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);Log.i(TAG, ""onCreate - "" + getActionName() + "":"" + getClass().getName());if (savedInstanceState == null) {mProjects = null;} else {mProjects = loadListFromBundle(savedInstanceState, ""mProjects"");}}@Overridepublic void onResume() {if (mProjectsReceiver != null) {try {getActivity().unregisterReceiver(mProjectsReceiver);} catch (Exception exc) {exc.printStackTrace();}}mProjectsReceiver = new ProjectsReceiver();IntentFilter filter = new IntentFilter(getFilterResultName());Log.i(TAG, ""Registering "" + getFilterResultName());getActivity().registerReceiver(mProjectsReceiver, filter);super.onResume();}/*** Updates an existing project (in memory)* @param index* @param project*/protected void updateProject(int index, BetterJSONObject project) {if (mAdapter != null) mAdapter.updateItem(index, project.getJSONObject());}@Overridepublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {Log.i(TAG, ""onCreateView: "" + getActionName() + "":"" + getClass().getName() + (mProjects != null ? mProjects.toString() : ""null""));mApp = (INaturalistApp) getActivity().getApplication();mHelper = new ActivityHelper(getActivity());View v = inflater.inflate(R.layout.project_list, container, false);mSettings = (Button) v.findViewById(R.id.settings);mSettings.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {Intent myIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);startActivity(myIntent);}});mLogin = (Button) v.findViewById(R.id.login);mLogin.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startActivityForResult(new Intent(getActivity(), OnboardingActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP), REQUEST_CODE_LOGIN);}});mLogin.setVisibility(View.GONE);mProjectList = (ListView) v.findViewById(android.R.id.list);mProjectList.setOnItemClickListener(new OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View arg1, int index, long arg3) {BetterJSONObject project = new BetterJSONObject(mAdapter.getItem(index));onItemSelected(project, index);}});mProgressBar = (ProgressBar) v.findViewById(R.id.progress);mEmptyListLabel = (TextView) v.findViewById(android.R.id.empty);mEmptyListLabel.setVisibility(View.GONE);mSearchText = (EditText) v.findViewById(R.id.search_filter);mSearchText.setVisibility(View.GONE);if (mProjects == null) {// Get the user's projectsLog.i(TAG, ""Calling "" + getActionName());Intent serviceIntent = new Intent(getActionName(), null, getActivity(), INaturalistService.class);getActivity().startService(serviceIntent);} else {// Load previously downloaded projectsLog.i(TAG, ""Previously loaded projects: "" + mProjects.toString());loadProjectsIntoUI();}return v;}private void toggleLoading(final boolean isLoading) {getActivity().runOnUiThread(new Runnable() {@Overridepublic void run() {if (isLoading) {mProjectList.setVisibility(View.GONE);mProgressBar.setVisibility(View.VISIBLE);} else {mProgressBar.setVisibility(View.GONE);mProjectList.setVisibility(View.VISIBLE);}}});}@Overridepublic void onStop() {Log.i(TAG, ""onStop"");super.onStop();}@Overridepublic void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if ((requestCode == REQUEST_CODE_LOGIN) && (resultCode == Activity.RESULT_OK)) {// User logged-in - Refresh listrefresh();}}public void refresh() {mEmptyListLabel.setVisibility(View.GONE);mLogin.setVisibility(View.GONE);toggleLoading(true);getProjects();}private void getProjects() {if (mProjectsReceiver != null) {try {getActivity().unregisterReceiver(mProjectsReceiver);} catch (Exception exc) {exc.printStackTrace();}}mProjectsReceiver = new ProjectsReceiver();IntentFilter filter = new IntentFilter(getFilterResultName());Log.i(TAG, ""Registering "" + getFilterResultName());getActivity().registerReceiver(mProjectsReceiver, filter);Log.i(TAG, ""Re-Calling "" + getActionName());Intent serviceIntent = new Intent(getActionName(), null, getActivity(), INaturalistService.class);getActivity().startService(serviceIntent);}@Overridepublic void onLoading(Boolean loading) {toggleLoading(loading);}@Overridepublic void onLocationStatus(boolean isEnabled) {if (!isEnabled) {// No projects due to no location services enabledmEmptyListLabel.setText(getLocationRequiredText());mSettings.setVisibility(View.VISIBLE);}}}",BaseTab.java,0
200,"package org.inaturalist.android;import java.lang.ref.WeakReference;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Set;import org.apache.commons.lang3.StringUtils;import org.inaturalist.android.INaturalistApp.INotificationCallback;import com.cocosw.bottomsheet.BottomSheet;import com.flurry.android.FlurryAgent;import com.handmark.pulltorefresh.library.PullToRefreshBase;import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;import com.handmark.pulltorefresh.library.PullToRefreshListView;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.annotation.SuppressLint;import android.annotation.TargetApi;import android.content.DialogInterface;import android.os.AsyncTask;import android.os.Handler;import android.content.BroadcastReceiver;import android.content.ContentUris;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.util.Log;import android.view.View;import android.view.ViewGroup;import android.view.ViewTreeObserver;import android.view.View.OnClickListener;import android.view.ViewTreeObserver.OnGlobalLayoutListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.SimpleCursorAdapter;import android.widget.TextView;import android.widget.Toast;public class ObservationListActivity extends BaseFragmentActivity implements OnItemClickListener, INotificationCallback, DialogInterface.OnClickListener {public static String TAG = ""INAT:ObservationListActivity"";private PullToRefreshListView mPullRefreshListView;private SyncCompleteReceiver mSyncCompleteReceiver;private int mLastIndex;private int mLastTop;private ActionBar mTopActionBar;private TextView mSyncObservations;private ObservationCursorAdapter mAdapter;private TextView mTitleBar;private ActivityHelper mHelper;private String mLastMessage;private static final int COMMENTS_IDS_REQUEST_CODE = 100;private static final int OBSERVATION_LIST_LOADER = 0x01;private INaturalistApp mApp;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}@Overridepublic void onClick(DialogInterface dialogInterface, int i) {// User chose to cancel syncmApp.setCancelSync(true);refreshSyncBar();}private class SyncCompleteReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Log.i(TAG, ""Got ACTION_SYNC_COMPLETE"");mPullRefreshListView.onRefreshComplete();mPullRefreshListView.refreshDrawableState();mHelper.stopLoading();ObservationCursorAdapter adapter = mAdapter;adapter.refreshCursor();refreshSyncBar();if (mApp.loggedIn() && !mApp.getIsSyncing() && (mAdapter.getCount() == 0)) {// Show a ""no observations"" message((TextView)findViewById(android.R.id.empty)).setText(R.string.no_observations_yet);}if ((mLastMessage != null) && (mLastMessage.length() > 0)) {Toast.makeText(getApplicationContext(), mLastMessage, Toast.LENGTH_LONG).show();mLastMessage = null;}}}public static Intent createIntent(Context context) {Intent i = new Intent(context, ObservationListActivity.class);i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);return i;}@Overrideprotected void onDestroy() {super.onDestroy();if (mSyncCompleteReceiver != null) {Log.i(TAG, ""Unregistering ACTION_SYNC_COMPLETE"");try {unregisterReceiver(mSyncCompleteReceiver);unregisterReceiver(mConnectivityListener);} catch (Exception exc) {exc.printStackTrace();}mSyncCompleteReceiver = null;mConnectivityListener = null;}}/** Shows the sync required bottom bar, if needed */private void refreshSyncBar() {int syncCount = 0;int photoSyncCount = 0;if (mApp.getAutoSync()) {// Auto sync is on - no need for manual syncmSyncObservations.setVisibility(View.GONE);return;}Cursor c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""((_updated_at > _synced_at AND _synced_at IS NOT NULL) OR (_synced_at IS NULL)) AND (_updated_at > _created_at)"",null,Observation.SYNC_ORDER);syncCount = c.getCount();c.close();Cursor opc = getContentResolver().query(ObservationPhoto.CONTENT_URI,new String[]{ObservationPhoto._ID,ObservationPhoto._OBSERVATION_ID,ObservationPhoto._PHOTO_ID,ObservationPhoto.PHOTO_URL,ObservationPhoto._UPDATED_AT,ObservationPhoto._SYNCED_AT},""((photo_url IS NULL) AND (_updated_at IS NOT NULL) AND (_synced_at IS NULL)) OR "" +""((photo_url IS NULL) AND (_updated_at IS NOT NULL) AND (_synced_at IS NOT NULL) AND (_updated_at > _synced_at))"",null,ObservationPhoto._ID);photoSyncCount = opc.getCount();opc.close();if ((syncCount > 0) || (photoSyncCount > 0)) {mSyncObservations.setText(String.format(getResources().getString(R.string.sync_x_observations), (syncCount > 0 ? syncCount : photoSyncCount)));mSyncObservations.setVisibility(View.VISIBLE);} else {mSyncObservations.setVisibility(View.GONE);}}/** Called when the activity is first created. */@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.observation_list);setTitle(R.string.observations);mHelper = new ActivityHelper(this);mApp = (INaturalistApp)getApplication();mSyncObservations = (TextView) findViewById(R.id.sync_observations);mSyncObservations.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {if (!isNetworkAvailable()) {Toast.makeText(getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();return;} else if (!isLoggedIn()) {// User not logged-in - redirect to onboarding screenstartActivity(new Intent(ObservationListActivity.this, OnboardingActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));return;}Intent serviceIntent = new Intent(INaturalistService.ACTION_SYNC, null, ObservationListActivity.this, INaturalistService.class);startService(serviceIntent);mSyncObservations.setVisibility(View.GONE);mHelper.loading(getResources().getString(R.string.syncing_observations), ObservationListActivity.this);}});if (savedInstanceState != null) {mLastMessage = savedInstanceState.getString(""mLastMessage"");}SharedPreferences pref = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = pref.getString(""username"", null);if (username == null) {if (!mApp.shownOnboarding()) {// Show login/onboarding screenmApp.setShownOnboarding(true);Intent intent = new Intent(this, OnboardingActivity.class);intent.putExtra(OnboardingActivity.SHOW_SKIP, true);startActivity(intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));}}refreshSyncBar();mTopActionBar = getSupportActionBar();View addButton = (View) findViewById(R.id.add_observation);addButton.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {new BottomSheet.Builder(ObservationListActivity.this).sheet(R.menu.observation_list_menu).listener(new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {Intent intent;switch (which) {case R.id.camera:intent = new Intent(Intent.ACTION_INSERT, getIntent().getData(), ObservationListActivity.this, ObservationEditor.class);intent.putExtra(ObservationEditor.TAKE_PHOTO, true);startActivity(intent);break;case R.id.upload_photo:intent = new Intent(Intent.ACTION_INSERT, getIntent().getData(), ObservationListActivity.this, ObservationEditor.class);intent.putExtra(ObservationEditor.CHOOSE_PHOTO, true);startActivity(intent);break;case R.id.text:startActivity(new Intent(Intent.ACTION_INSERT, getIntent().getData(), ObservationListActivity.this, ObservationEditor.class));break;}}}).show();}});INaturalistApp app = (INaturalistApp)(getApplication());app.setNotificationCallback(this);Intent intent = getIntent();if (intent.getData() == null) {intent.setData(Observation.CONTENT_URI);}mSyncCompleteReceiver = new SyncCompleteReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_SYNC_COMPLETE);Log.i(TAG, ""Registering ACTION_SYNC_COMPLETE"");registerReceiver(mSyncCompleteReceiver, filter);mConnectivityListener = new ConnectivityBroadcastReceiver();IntentFilter filter2 = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);Log.i(TAG, ""Registering CONNECTIVITY_ACTION"");registerReceiver(mConnectivityListener, filter2);mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.observations_list);mPullRefreshListView.getLoadingLayoutProxy().setPullLabel(getResources().getString(R.string.pull_to_refresh));mPullRefreshListView.getLoadingLayoutProxy().setReleaseLabel(getResources().getString(R.string.release_to_refresh));mPullRefreshListView.getLoadingLayoutProxy().setRefreshingLabel(getResources().getString(R.string.refreshing));mPullRefreshListView.setReleaseRatio(2.5f);// Set a listener to be invoked when the list should be refreshed.mPullRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() {@Overridepublic void onRefresh(PullToRefreshBase<ListView> refreshView) {if (!isNetworkAvailable() || !isLoggedIn()) {Thread t = (new Thread(new Runnable() {@Overridepublic void run() {try {Thread.sleep(100);} catch (InterruptedException e) {e.printStackTrace();}runOnUiThread(new Runnable() {@Overridepublic void run() {mPullRefreshListView.onRefreshComplete();}});}}));t.start();if (!isNetworkAvailable()) {Toast.makeText(getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();} else if (!isLoggedIn()) {Toast.makeText(getApplicationContext(), R.string.please_sign_in, Toast.LENGTH_LONG).show();}return;}// Start syncIntent serviceIntent = new Intent(INaturalistService.ACTION_PULL_OBSERVATIONS, null, ObservationListActivity.this, INaturalistService.class);startService(serviceIntent);}});onDrawerCreate(savedInstanceState);ListView actualListView = mPullRefreshListView.getRefreshableView();// Need to use the Actual ListView when registering for Context MenuregisterForContextMenu(actualListView);// Inform the list we provide context menus for items//getListView().setOnCreateContextMenuListener(this);SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String login = prefs.getString(""username"", null);// Perform a managed query. The Activity will handle closing and requerying the cursor// when needed.String conditions = ""(_synced_at IS NULL"";if (login != null) {conditions += "" OR user_login = '"" + login + ""'"";}conditions += "") AND (is_deleted = 0 OR is_deleted is NULL)""; // Don't show deleted observationsCursor cursor = getContentResolver().query(getIntent().getData(), Observation.PROJECTION,conditions, null, Observation.DEFAULT_SORT_ORDER);// Used to map notes entries from the database to viewsObservationCursorAdapter adapter = new ObservationCursorAdapter(this, R.layout.list_item, cursor,new String[] { Observation.DESCRIPTION },new int[] { R.id.subContent });mAdapter = adapter;mPullRefreshListView.setEmptyView(findViewById(android.R.id.empty));mPullRefreshListView.setAdapter(mAdapter);mPullRefreshListView.setOnItemClickListener(this);triggerSyncIfNeeded();}private void triggerSyncIfNeeded() {boolean hasOldObs = hasOldObservations();if ((mApp.getAutoSync() && !mApp.getIsSyncing()) || (hasOldObs)) {int syncCount = 0;if (!hasOldObs) {Cursor c = getContentResolver().query(Observation.CONTENT_URI,Observation.PROJECTION,""((_updated_at > _synced_at AND _synced_at IS NOT NULL) OR (_synced_at IS NULL) OR (is_deleted = 1))"",null,Observation.SYNC_ORDER);syncCount = c.getCount();c.close();}// Trigger a sync (in case of auto-sync and unsynced obs OR when having old-style observations)if (hasOldObs || (syncCount > 0)) {Intent serviceIntent = new Intent(INaturalistService.ACTION_SYNC, null, ObservationListActivity.this, INaturalistService.class);startService(serviceIntent);}}}// Checks to see if there are any observations that have the ""old"" way of saving photosprivate boolean hasOldObservations() {Cursor c = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""(photo_filename IS NULL) AND (photo_url IS NULL)"",null,ObservationPhoto.DEFAULT_SORT_ORDER);int count = c.getCount();c.close();return count > 0;}@SuppressLint(""NewApi"")@Overridepublic void onPause() {super.onPause();// save last position of list so we can resume there later// http://stackoverflow.com/questions/3014089/maintain-save-restore-scroll-position-when-returning-to-a-listviewListView lv = mPullRefreshListView.getRefreshableView();mLastIndex = lv.getFirstVisiblePosition();View v = lv.getChildAt(0);mLastTop = (v == null) ? 0 : v.getTop();/*ObservationCursorAdapter adapter = mAdapter;adapter.notifyDataSetInvalidated();if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB){Cursor oldCursor = adapter.swapCursor(null);if ((oldCursor != null) && (!oldCursor.isClosed())) oldCursor.close();} else {adapter.changeCursor(null);}*/super.onPause();}@Overridepublic void onResume() {super.onResume();ListView lv = mPullRefreshListView.getRefreshableView();lv.setSelectionFromTop(mLastIndex, mLastTop);refreshSyncBar();ObservationCursorAdapter adapter = mAdapter;adapter.refreshCursor();INaturalistApp app = (INaturalistApp)(getApplication());if (app.getIsSyncing()) {// We're still syncingmHelper.stopLoading();if ((mLastMessage != null) && (!mApp.getAutoSync())) mHelper.loading(mLastMessage, ObservationListActivity.this);app.setNotificationCallback(this);}(new Handler()).postDelayed(new Runnable() {@Overridepublic void run() {if (mApp.loggedIn() && mApp.getIsSyncing() && (mAdapter.getCount() == 0)) {Toast.makeText(getApplicationContext(), getResources().getString(R.string.downloading_observations), Toast.LENGTH_LONG).show();}}}, 100);if (mApp.loggedIn() && mApp.getIsSyncing() && (mAdapter.getCount() == 0)) {// Show a ""downloading ..."" message instead of ""no observations yet""((TextView)findViewById(android.R.id.empty)).setText(R.string.downloading_observations);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {if (mLastMessage != null) outState.putString(""mLastMessage"", mLastMessage);super.onSaveInstanceState(outState);}private boolean isLoggedIn() {SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);return prefs.getString(""username"", null) != null;}@Overridepublic void onItemClick(AdapterView<?> l, View v, int position, long id) {Uri uri = ContentUris.withAppendedId(getIntent().getData(), id);String action = getIntent().getAction();if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_GET_CONTENT.equals(action)) {// The caller is waiting for us to return a note selected by// the user.  The have clicked on one, so return it now.setResult(RESULT_OK, new Intent().setData(uri));} else {if ((!mAdapter.isLocked(uri)) || (mAdapter.isLocked(uri) && !mApp.getIsSyncing())) {// Launch activity to view/edit the currently selected itemstartActivity(new Intent(Intent.ACTION_VIEW, uri, this, ObservationViewerActivity.class));}}}private class ObservationCursorAdapter extends SimpleCursorAdapter {private HashMap<Long, String[]> mPhotoInfo = new HashMap<Long, String[]>();public ObservationCursorAdapter(Context context, int layout, Cursor c, String[] from, int[] to) {super(context, layout, c, from, to);getPhotoInfo();}@TargetApi(Build.VERSION_CODES.HONEYCOMB)public void refreshCursor() {SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String login = prefs.getString(""username"", null);String conditions = ""(_synced_at IS NULL"";if (login != null) {conditions += "" OR user_login = '"" + login + ""'"";}conditions += "") AND (is_deleted = 0 OR is_deleted is NULL)""; // Don't show deleted observationsCursor newCursor = getContentResolver().query(getIntent().getData(), Observation.PROJECTION,conditions, null, Observation.DEFAULT_SORT_ORDER);if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB){Cursor oldCursor = swapCursor(newCursor);if ((oldCursor != null) && (!oldCursor.isClosed())) oldCursor.close();} else {changeCursor(newCursor);}}/*** Retrieves photo ids and orientations for photos associated with the listed observations.*/public void getPhotoInfo() {Cursor c = getCursor();int originalPosition = c.getPosition();if (c.getCount() == 0) return;c.moveToFirst();ArrayList<Long> obsIds = new ArrayList<Long>();ArrayList<Long> obsExternalIds = new ArrayList<Long>();ArrayList<Long> photoIds = new ArrayList<Long>();while (!c.isAfterLast()) {obsIds.add(c.getLong(c.getColumnIndexOrThrow(Observation._ID)));try {obsExternalIds.add(c.getLong(c.getColumnIndexOrThrow(Observation.ID)));} catch (Exception exc) { }c.moveToNext();}c.moveToPosition(originalPosition);// Add any online-only photosCursor onlinePc = getContentResolver().query(ObservationPhoto.CONTENT_URI,new String[]{ObservationPhoto._ID, ObservationPhoto._OBSERVATION_ID, ObservationPhoto._PHOTO_ID, ObservationPhoto.PHOTO_URL, ObservationPhoto.PHOTO_FILENAME},""(_observation_id IN ("" + StringUtils.join(obsIds, ',') + "") OR observation_id IN ("" + StringUtils.join(obsExternalIds, ',') + "")  )"",null,ObservationPhoto.DEFAULT_SORT_ORDER);onlinePc.moveToFirst();while (!onlinePc.isAfterLast()) {Long obsId = onlinePc.getLong(onlinePc.getColumnIndexOrThrow(ObservationPhoto._OBSERVATION_ID));String photoUrl = onlinePc.getString(onlinePc.getColumnIndexOrThrow(ObservationPhoto.PHOTO_URL));String photoFilename = onlinePc.getString(onlinePc.getColumnIndexOrThrow(ObservationPhoto.PHOTO_FILENAME));if (!mPhotoInfo.containsKey(obsId)) {mPhotoInfo.put(obsId,new String[] {photoFilename,null,photoUrl,null,null});}onlinePc.moveToNext();}onlinePc.close();/*Cursor opc = getContentResolver().query(ObservationPhoto.CONTENT_URI,new String[]{ObservationPhoto._ID,ObservationPhoto._OBSERVATION_ID,ObservationPhoto._PHOTO_ID,ObservationPhoto.PHOTO_URL,ObservationPhoto.PHOTO_FILENAME,ObservationPhoto._UPDATED_AT,ObservationPhoto._SYNCED_AT},""_observation_id IN (""+StringUtils.join(obsIds, ',')+"") AND photo_url IS NULL"",null,ObservationPhoto._ID);if (opc.getCount() == 0) return;opc.moveToFirst();while (!opc.isAfterLast()) {Long obsId = opc.getLong(opc.getColumnIndexOrThrow(ObservationPhoto._OBSERVATION_ID));String photoFilename = opc.getString(opc.getColumnIndexOrThrow(ObservationPhoto.PHOTO_FILENAME));Long syncedAt = opc.getLong(opc.getColumnIndexOrThrow(ObservationPhoto._SYNCED_AT));Long updatedAt = opc.getLong(opc.getColumnIndexOrThrow(ObservationPhoto._UPDATED_AT));if (!mPhotoInfo.containsKey(obsId)) {mPhotoInfo.put(obsId,new String[] {photoFilename,null,null,updatedAt.toString(),syncedAt.toString()});}opc.moveToNext();}opc.close();*/}public void refreshPhotoInfo() {mPhotoInfo = new HashMap<Long, String[]>();getPhotoInfo();}public void refreshPhotoInfo(long obsId) {if (mPhotoInfo.containsKey(obsId)) mPhotoInfo.remove(obsId);}public View getView(int position, View convertView, ViewGroup parent) {View view = super.getView(position, convertView, parent);Cursor c = this.getCursor();if (c.getCount() == 0) {return view;}ImageView image = (ImageView) view.findViewById(R.id.image);c.moveToPosition(position);final Long obsId = c.getLong(c.getColumnIndexOrThrow(Observation._ID));final Long externalObsId = c.getLong(c.getColumnIndexOrThrow(Observation.ID));refreshPhotoInfo(obsId);getPhotoInfo();String[] photoInfo = mPhotoInfo.get(obsId);if (photoInfo == null) {// Try getting the external observation photo infophotoInfo = mPhotoInfo.get(externalObsId);}String iconicTaxonName = c.getString(c.getColumnIndexOrThrow(Observation.ICONIC_TAXON_NAME));int iconResource = 0;if (iconicTaxonName == null) {iconResource = R.drawable.iconic_taxon_unknown;} else if (iconicTaxonName.equals(""Animalia"")) {iconResource = R.drawable.iconic_taxon_animalia;} else if (iconicTaxonName.equals(""Plantae"")) {iconResource = R.drawable.iconic_taxon_plantae;} else if (iconicTaxonName.equals(""Chromista"")) {iconResource = R.drawable.iconic_taxon_chromista;} else if (iconicTaxonName.equals(""Fungi"")) {iconResource = R.drawable.iconic_taxon_fungi;} else if (iconicTaxonName.equals(""Protozoa"")) {iconResource = R.drawable.iconic_taxon_protozoa;} else if (iconicTaxonName.equals(""Actinopterygii"")) {iconResource = R.drawable.iconic_taxon_actinopterygii;} else if (iconicTaxonName.equals(""Amphibia"")) {iconResource = R.drawable.iconic_taxon_amphibia;} else if (iconicTaxonName.equals(""Reptilia"")) {iconResource = R.drawable.iconic_taxon_reptilia;} else if (iconicTaxonName.equals(""Aves"")) {iconResource = R.drawable.iconic_taxon_aves;} else if (iconicTaxonName.equals(""Mammalia"")) {iconResource = R.drawable.iconic_taxon_mammalia;} else if (iconicTaxonName.equals(""Mollusca"")) {iconResource = R.drawable.iconic_taxon_mollusca;} else if (iconicTaxonName.equals(""Insecta"")) {iconResource = R.drawable.iconic_taxon_insecta;} else if (iconicTaxonName.equals(""Arachnida"")) {iconResource = R.drawable.iconic_taxon_arachnida;} else {iconResource = R.drawable.iconic_taxon_unknown;}if (photoInfo != null) {String photoFilename = photoInfo[0];if (photoInfo[2] != null) {// Online-only photoUrlImageViewHelper.setUrlDrawable(image, photoInfo[2], iconResource);} else {// Offline photoBitmapWorkerTask task = new BitmapWorkerTask(image);task.execute(photoFilename, String.valueOf(iconResource));}}TextView observedOn = (TextView) view.findViewById(R.id.dateObserved);Long observationTimestamp = c.getLong(c.getColumnIndexOrThrow(Observation.OBSERVED_ON));if (observationTimestamp == 0) {// No observation date set - don't show itobservedOn.setVisibility(View.INVISIBLE);} else {observedOn.setVisibility(View.VISIBLE);Timestamp observationDate = new Timestamp(observationTimestamp);observedOn.setText(new SimpleDateFormat(""M/d/yyyy"").format(observationDate));}TextView commentIdCountText = (TextView) view.findViewById(R.id.commentIdCount);Long commentsCount = c.getLong(c.getColumnIndexOrThrow(Observation.COMMENTS_COUNT));Long idCount = c.getLong(c.getColumnIndexOrThrow(Observation.IDENTIFICATIONS_COUNT));Long lastCommentsCount = c.getLong(c.getColumnIndexOrThrow(Observation.LAST_COMMENTS_COUNT));Long lastIdCount = c.getLong(c.getColumnIndexOrThrow(Observation.LAST_IDENTIFICATIONS_COUNT));final Long taxonId = c.getLong(c.getColumnIndexOrThrow(Observation.TAXON_ID));if (taxonId != 0 && idCount > 0) {idCount--;}Long totalCount = commentsCount + idCount;ViewGroup clickCatcher = (ViewGroup) view.findViewById(R.id.rightObsPart);if (totalCount == 0) {// No comments/IDs - don't display the indicatorcommentIdCountText.setVisibility(View.INVISIBLE);clickCatcher.setClickable(false);} else {clickCatcher.setClickable(true);commentIdCountText.setVisibility(View.VISIBLE);if ((lastCommentsCount == null) || (lastCommentsCount < commentsCount) ||(lastIdCount == null) || (lastIdCount < idCount)) {// There are unread comments/IDscommentIdCountText.setBackgroundResource(R.drawable.comments_ids_background_highlighted);} else {commentIdCountText.setBackgroundResource(R.drawable.comments_ids_background);}refreshCommentsIdSize(commentIdCountText, totalCount);clickCatcher.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {if (!isNetworkAvailable()) {Toast.makeText(getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();return;}// Show the comments/IDs for the observationUri uri = ContentUris.withAppendedId(getIntent().getData(), obsId);Intent intent = new Intent(Intent.ACTION_VIEW, uri, ObservationListActivity.this, ObservationViewerActivity.class);intent.putExtra(ObservationViewerActivity.SHOW_COMMENTS, true);startActivityForResult(intent, COMMENTS_IDS_REQUEST_CODE);}});}Long syncedAt = c.getLong(c.getColumnIndexOrThrow(Observation._SYNCED_AT));Long updatedAt = c.getLong(c.getColumnIndexOrThrow(Observation._UPDATED_AT));Boolean syncNeeded = (syncedAt == null) || (updatedAt > syncedAt);// if there's a photo and it is localif (syncNeeded == false &&photoInfo != null &&photoInfo[2] == null &&photoInfo[3] != null) {if (photoInfo[4] == null) {syncNeeded = true;} else {Long photoSyncedAt = Long.parseLong(photoInfo[4]);Long photoUpdatedAt = Long.parseLong(photoInfo[3]);if (photoUpdatedAt > photoSyncedAt) {syncNeeded = true;}}}if (!syncNeeded) {// See if it's an existing observation with a new photo:wCursor opc = getContentResolver().query(ObservationPhoto.CONTENT_URI,new String[]{ObservationPhoto._ID,ObservationPhoto._OBSERVATION_ID,ObservationPhoto._PHOTO_ID,ObservationPhoto.PHOTO_URL,ObservationPhoto._UPDATED_AT,ObservationPhoto._SYNCED_AT},""_observation_id = ? AND photo_url IS NULL AND _synced_at IS NULL"",new String[] { String.valueOf(obsId) },ObservationPhoto._ID);if (opc.getCount() > 0) {syncNeeded = true;}opc.close();}ImageView needToSync = (ImageView) view.findViewById(R.id.syncRequired);TextView subTitle = (TextView) view.findViewById(R.id.subContent);TextView title = (TextView) view.findViewById(R.id.speciesGuess);ProgressBar progress = (ProgressBar) view.findViewById(R.id.progress);ViewGroup commentCatcher = (ViewGroup) view.findViewById(R.id.commentsIdClickCatcher);String speciesGuess = c.getString(c.getColumnIndexOrThrow(Observation.SPECIES_GUESS));String preferredCommonName = c.getString(c.getColumnIndexOrThrow(Observation.PREFERRED_COMMON_NAME));title.setTextColor(Color.parseColor(""#000000""));subTitle.setTextColor(Color.parseColor(""#666666""));progress.setVisibility(View.GONE);observedOn.setVisibility(View.VISIBLE);commentCatcher.setVisibility(View.VISIBLE);if (preferredCommonName != null) {title.setText(preferredCommonName);} else if ((speciesGuess != null) && (speciesGuess.trim().length() > 0)) {title.setText(""\"""" + speciesGuess + ""\"""");} else {title.setText(R.string.unknown_species);}ImageView errorIcon = (ImageView) view.findViewById(R.id.error);boolean hasErrors = (mApp.getErrorsForObservation(externalObsId.intValue()).length() > 0);if (hasErrors)  {errorIcon.setVisibility(View.VISIBLE);needToSync.setVisibility(View.GONE);commentIdCountText.setVisibility(View.GONE);view.setBackgroundColor(Color.parseColor(""#F3D3DA""));subTitle.setText(R.string.needs_your_attention);} else {errorIcon.setVisibility(View.GONE);view.setBackgroundColor(Color.parseColor(""#FFFFFF""));}if (syncNeeded) {// This observations needs to be syncedneedToSync.setVisibility(View.VISIBLE);if (mApp.getObservationIdBeingSynced() == obsId) {// Observation is currently being uploadedsubTitle.setText(R.string.uploading);view.setBackgroundColor(Color.parseColor(""#76AA1B""));title.setTextColor(Color.parseColor(""#ffffff""));subTitle.setTextColor(Color.parseColor(""#ffffff""));progress.setVisibility(View.VISIBLE);observedOn.setVisibility(View.GONE);commentCatcher.setVisibility(View.GONE);} else {// Observation is waiting to be uploadedif (!hasErrors) {subTitle.setText(R.string.waiting_to_upload);view.setBackgroundColor(Color.parseColor(""#E3EDCD""));}}} else {needToSync.setVisibility(View.INVISIBLE);if (!hasErrors)view.setBackgroundColor(Color.parseColor(""#FFFFFF""));}return view;}// Should the specified observation be locked for editing (e.g. it's currently being uploaded)public boolean isLocked(Uri uri) {Cursor c = managedQuery(uri, Observation.PROJECTION, null, null, null);Observation obs = new Observation(c);Integer obsId = obs._id;String[] photoInfo = mPhotoInfo.get(obsId);Timestamp syncedAt = obs._synced_at;Timestamp updatedAt = obs._updated_at;Boolean syncNeeded = (syncedAt == null) || (updatedAt.after(syncedAt));// if there's a photo and it is localif (syncNeeded == false &&photoInfo != null &&photoInfo[2] == null &&photoInfo[3] != null) {if (photoInfo[4] == null) {syncNeeded = true;} else {Long photoSyncedAt = Long.parseLong(photoInfo[4]);Long photoUpdatedAt = Long.parseLong(photoInfo[3]);if (photoUpdatedAt > photoSyncedAt) {syncNeeded = true;}}}if (!syncNeeded) {// See if it's an existing observation with a new photo:wCursor opc = getContentResolver().query(ObservationPhoto.CONTENT_URI,new String[]{ObservationPhoto._ID,ObservationPhoto._OBSERVATION_ID,ObservationPhoto._PHOTO_ID,ObservationPhoto.PHOTO_URL,ObservationPhoto._UPDATED_AT,ObservationPhoto._SYNCED_AT},""_observation_id = ? AND photo_url IS NULL AND _synced_at IS NULL"",new String[] { String.valueOf(obsId) },ObservationPhoto._ID);if (opc.getCount() > 0) {syncNeeded = true;}opc.close();}if (mApp.getObservationIdBeingSynced() == obsId) {// Observation is currently being uploaded - is locked!return true;} else {if (!syncNeeded) {// Item hasn't changed (shouldn't be locked)return false;}if (!mApp.getAutoSync() || !isNetworkAvailable()) {// Allow editing if not in auto sync mode or when network is not availablereturn false;} else {return true;}}}private void refreshCommentsIdSize(final TextView view, Long value) {ViewTreeObserver observer = view.getViewTreeObserver();// Make sure the height and width of the rectangle are the same (i.e. a square)observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {@TargetApi(Build.VERSION_CODES.JELLY_BEAN)@Overridepublic void onGlobalLayout() {int dimension = view.getHeight();ViewGroup.LayoutParams params = view.getLayoutParams();if (dimension > view.getWidth()) {// Only resize if there's enough roomparams.width = dimension;view.setLayoutParams(params);}ViewTreeObserver observer = view.getViewTreeObserver();if(Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {observer.removeGlobalOnLayoutListener(this);} else {observer.removeOnGlobalLayoutListener(this);}}});view.setText(value.toString());}}@Overridepublic void onNotification(String title, final String content) {mLastMessage = content;runOnUiThread(new Runnable() {@Overridepublic void run() {if (!mApp.getAutoSync()) {mHelper.loading(content, ObservationListActivity.this);}mAdapter.refreshCursor();}});}// For caching observation thumbnailsprivate HashMap<String, Bitmap> mObservationThumbnails = new HashMap<>();// Used for loading and processing the observation photo in the background (as to not block the UI)class BitmapWorkerTask extends AsyncTask<String, Void, Bitmap> {private final WeakReference<ImageView> mImageViewReference;private String mFilename = null;private int mIconResource;public BitmapWorkerTask(ImageView imageView) {// Use a WeakReference to ensure the ImageView can be garbage collectedmImageViewReference = new WeakReference<ImageView>(imageView);}// Decode image in background.@Overrideprotected Bitmap doInBackground(String... params) {mFilename = params[0];mIconResource = Integer.valueOf(params[1]);Bitmap bitmapImage;if (mObservationThumbnails.containsKey(mFilename)) {// Load from cachebitmapImage = mObservationThumbnails.get(mFilename);} else {if (mImageViewReference != null) {runOnUiThread(new Runnable() {@Overridepublic void run() {mImageViewReference.get().setImageResource(mIconResource);}});}// Decode into a thumbnailBitmapFactory.Options options = new BitmapFactory.Options();options.inSampleSize = ImageUtils.calculateInSampleSize(options, 100, 100);// Decode bitmap with inSampleSize setoptions.inJustDecodeBounds = false;// This decreases in-memory byte-storage per pixeloptions.inPreferredConfig = Bitmap.Config.ALPHA_8;bitmapImage = BitmapFactory.decodeFile(mFilename, options);mObservationThumbnails.put(mFilename, bitmapImage);}return bitmapImage;}// Once complete, see if ImageView is still around and set bitmap.@Overrideprotected void onPostExecute(Bitmap bitmap) {if (mImageViewReference != null && bitmap != null) {final ImageView imageView = mImageViewReference.get();if (imageView != null) {imageView.setImageBitmap(bitmap);}}}}private ConnectivityBroadcastReceiver mConnectivityListener = null;private class ConnectivityBroadcastReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {String action = intent.getAction();if (!action.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {return;}boolean noConnectivity = intent.getBooleanExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY, false);if (!noConnectivity) {// We're connected to the Internet - try syncing againtriggerSyncIfNeeded();}}}}",ObservationListActivity.java,1
200,"package org.inaturalist.android;import android.app.Activity;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.Typeface;import android.os.Build;import android.os.Handler;import android.text.Html;import android.text.method.LinkMovementMethod;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ImageView;import android.widget.PopupMenu;import android.widget.RelativeLayout;import android.widget.TextView;import com.cocosw.bottomsheet.BottomSheet;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.joda.time.Duration;import org.json.JSONException;import org.json.JSONObject;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;public class FavoritesAdapter extends ArrayAdapter<BetterJSONObject> {private final Handler mMainHandler;private final ActivityHelper mHelper;private List<BetterJSONObject> mItems;private Context mContext;private String mLogin;public boolean isEnabled(int position) {return false;}public FavoritesAdapter(Context context, List<BetterJSONObject> objects) {super(context, R.layout.favorite_item, objects);mItems = objects;mContext = context;mHelper = new ActivityHelper(mContext);SharedPreferences prefs = mContext.getSharedPreferences(""iNaturalistPreferences"", Activity.MODE_PRIVATE);mLogin = prefs.getString(""username"", null);mMainHandler = new Handler(context.getMainLooper());}public void addItemAtBeginning(BetterJSONObject newItem) {mItems.add(0, newItem);}@Overridepublic View getView(final int position, View convertView, ViewGroup parent) {Resources res = mContext.getResources();LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);final View view = inflater.inflate(R.layout.favorite_item, parent, false);final BetterJSONObject item = mItems.get(position);try {TextView favDate = (TextView) view.findViewById(R.id.faved_on);TextView userNameText = (TextView) view.findViewById(R.id.user_name);final String username = item.getJSONObject(""user"").getString(""login"");userNameText.setText(username);Timestamp postDate = item.getTimestamp(""created_at"");favDate.setText(formatIdDate(postDate));final ImageView userPic = (ImageView) view.findViewById(R.id.user_pic);boolean hasUserIcon = item.getJSONObject(""user"").getString(""user_icon_url"") != null;if (hasUserIcon) {UrlImageViewHelper.setUrlDrawable(userPic, item.getJSONObject(""user"").getString(""user_icon_url""), R.drawable.ic_account_circle_black_24dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Nothing to do here}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Return a circular version of the profile picturereturn ImageUtils.getCircleBitmap(loadedBitmap);}});} else {userPic.setAlpha(100);}} catch (JSONException e) {e.printStackTrace();}view.setTag(item);return view;}private String formatIdDate(Timestamp postDate) {Duration difference = new Duration(postDate.getTime(), (new Date()).getTime());long days = difference.getStandardDays();long hours = difference.getStandardHours();long minutes = difference.getStandardMinutes();if (days <= 30) {// Less than 30 days ago - display as 3m (mins), 3h (hours), 3d (days) or 3w (weeks)if (days < 1) {if (hours < 1) {return String.format(""%dm"", minutes);} else {return String.format(""%dh"", hours);}} else if (days < 7) {return String.format(""%dd"", days);} else {return String.format(""%dw"", days / 7);}} else {Calendar today = Calendar.getInstance();today.setTime(new Date());Calendar calDate = Calendar.getInstance();calDate.setTimeInMillis(postDate.getTime());String dateFormatString;if (today.get(Calendar.YEAR) > calDate.get(Calendar.YEAR)) {// Previous year(s)dateFormatString = ""MM/dd/yy"";} else {// Current yeardateFormatString = ""MMM d"";}SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatString);return dateFormat.format(new Date(postDate.getTime()));}}}",FavoritesAdapter.java,0
200,"package org.inaturalist.android;import android.content.Context;import android.content.Intent;public abstract class BaseGuidesTab extends BaseTab {protected void onItemSelected(BetterJSONObject item, int index) {// Show guide detailsIntent intent = new Intent(getActivity(), GuideDetails.class);intent.putExtra(""guide"", item);startActivity(intent);}public static String getSearchFilterTextHint(Context context) {return context.getResources().getString(R.string.search_guides);}protected String getNoItemsFoundText() {return getResources().getString(R.string.no_guides);}protected String getNoInternetText() {return getResources().getString(R.string.no_internet_guides);}protected int getDefaultIcon() {return R.drawable.ic_book_black_24dp;}public static String getSearchUrl(INaturalistApp app) {String inatNetwork = app.getInaturalistNetworkMember();String inatHost = app.getStringResourceByName(""inat_host_"" + inatNetwork);return ""http://"" + inatHost + ""/guides/search.json"";}protected boolean recallServiceActionIfNoResults() {return false;}}",BaseGuidesTab.java,0
200,"package org.inaturalist.android;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.Typeface;import android.os.Build;import android.os.Bundle;import android.support.design.widget.AppBarLayout;import android.support.design.widget.CollapsingToolbarLayout;import android.support.v4.view.ViewCompat;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.Html;import android.text.Layout;import android.text.Spanned;import android.util.Log;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.ViewTreeObserver;import android.view.animation.AlphaAnimation;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TabHost;import android.widget.TabWidget;import android.widget.TextView;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.sql.Timestamp;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;public class UserProfile extends AppCompatActivity implements TabHost.OnTabChangeListener, AppBarLayout.OnOffsetChangedListener {private final static String VIEW_TYPE_OBSERVATIONS = ""observations"";private final static String VIEW_TYPE_SPECIES = ""species"";private final static String VIEW_TYPE_IDENTIFICATIONS = ""identifications"";private String mViewType;private INaturalistApp mApp;private BetterJSONObject mUser;private TabHost mTabHost;private ActivityHelper mHelper;private ListView mObservationsList;private UserObservationAdapter mObservationsListAdapter;private ProgressBar mLoadingObservationsList;private ViewGroup mObservationsContainer;private TextView mObservationsListEmpty;private ListView mSpeciesList;private UserSpeciesAdapter mSpeciesListAdapter;private ProgressBar mLoadingSpeciesList;private ViewGroup mSpeciesContainer;private TextView mSpeciesListEmpty;private ListView mIdentificationsList;private UserIdentificationsAdapter mIdentificationsListAdapter;private ProgressBar mLoadingIdentificationsList;private ViewGroup mIdentificationsContainer;private TextView mIdentificationsListEmpty;private ArrayList<JSONObject> mObservations;private ArrayList<JSONObject> mSpecies;private ArrayList<JSONObject> mIdentifications;private UserDetailsReceiver mUserDetailsReceiver;private int mTotalObservations;private int mTotalSpecies;private int mTotalIdentifications;private AppBarLayout mAppBarLayout;private boolean mUserPicHidden;private ViewGroup mUserPicContainer;private TextView mUserName;private TextView mUserBio;private int mObservationListIndex;private int mObservationListOffset;private int mSpeciesListIndex;private int mSpeciesListOffset;private int mIdentificationsListIndex;private int mIdentificationsListOffset;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:this.onBackPressed();return true;}return super.onOptionsItemSelected(item);}@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mHelper = new ActivityHelper(this);final Intent intent = getIntent();setContentView(R.layout.user_profile);Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true);CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);mAppBarLayout = (AppBarLayout) findViewById(R.id.user_top_bar);mAppBarLayout.addOnOffsetChangedListener(this);mLoadingObservationsList = (ProgressBar) findViewById(R.id.loading_observations_list);mObservationsListEmpty = (TextView) findViewById(R.id.observations_list_empty);mObservationsList = (ListView) findViewById(R.id.observations_list);mObservationsContainer = (ViewGroup) findViewById(R.id.observations_container);mLoadingSpeciesList = (ProgressBar) findViewById(R.id.loading_species_list);mSpeciesListEmpty = (TextView) findViewById(R.id.species_list_empty);mSpeciesList = (ListView) findViewById(R.id.species_list);mSpeciesContainer = (ViewGroup) findViewById(R.id.species_container);mSpeciesList.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(UserProfile.this, GuideTaxonActivity.class);intent.putExtra(""taxon"", new BetterJSONObject(item));intent.putExtra(""guide_taxon"", false);intent.putExtra(""show_add"", false);intent.putExtra(""download_taxon"", true);startActivity(intent);}});mLoadingIdentificationsList = (ProgressBar) findViewById(R.id.loading_identifications_list);mIdentificationsListEmpty = (TextView) findViewById(R.id.identifications_list_empty);mIdentificationsList = (ListView) findViewById(R.id.identifications_list);mIdentificationsContainer = (ViewGroup) findViewById(R.id.identifications_container);mObservationsList.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View view, int position, long arg3) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(UserProfile.this, ObservationViewerActivity.class);intent.putExtra(""observation"", item.toString());intent.putExtra(""read_only"", true);intent.putExtra(""reload"", true);startActivity(intent);}});ViewCompat.setNestedScrollingEnabled(mObservationsList, true);ViewCompat.setNestedScrollingEnabled(mIdentificationsList, true);ViewCompat.setNestedScrollingEnabled(mSpeciesList, true);if (mApp == null) {mApp = (INaturalistApp)getApplicationContext();}if (savedInstanceState == null) {mUser = (BetterJSONObject) intent.getSerializableExtra(""user"");mViewType = VIEW_TYPE_OBSERVATIONS;getUserDetails(INaturalistService.ACTION_GET_SPECIFIC_USER_DETAILS);getUserDetails(INaturalistService.ACTION_GET_USER_OBSERVATIONS);getUserDetails(INaturalistService.ACTION_GET_USER_IDENTIFICATIONS);mObservationsContainer.setVisibility(View.VISIBLE);mSpeciesContainer.setVisibility(View.GONE);mIdentificationsContainer.setVisibility(View.GONE);} else {mUser = (BetterJSONObject) savedInstanceState.getSerializable(""user"");mViewType = savedInstanceState.getString(""mViewType"");mObservationListIndex = savedInstanceState.getInt(""mObservationListIndex"");mObservationListOffset = savedInstanceState.getInt(""mObservationListOffset"");mSpeciesListIndex = savedInstanceState.getInt(""mSpeciesListIndex"");mSpeciesListOffset = savedInstanceState.getInt(""mSpeciesListOffset"");mIdentificationsListIndex = savedInstanceState.getInt(""mIdentificationsListIndex"");mIdentificationsListOffset = savedInstanceState.getInt(""IdentificationsmListOffset"");mObservations = loadListFromBundle(savedInstanceState, ""mObservations"");mSpecies = loadListFromBundle(savedInstanceState, ""mSpecies"");mIdentifications = loadListFromBundle(savedInstanceState, ""mIdentifications"");mTotalIdentifications = savedInstanceState.getInt(""mTotalIdentifications"");mTotalObservations = savedInstanceState.getInt(""mTotalObservations"");mTotalSpecies = savedInstanceState.getInt(""mTotalSpecies"");}// Tab InitializationinitialiseTabHost();refreshViewState();refreshViewType();if (mUser == null) {finish();return;}mUserName = (TextView) findViewById(R.id.user_name);mUserBio = (TextView) findViewById(R.id.user_bio);mUserPicContainer = (ViewGroup) findViewById(R.id.user_pic_container);refreshUserDetails();}private void saveListToBundle(Bundle outState, ArrayList<JSONObject> list, String key) {if (list != null) {JSONArray arr = new JSONArray(list);outState.putString(key, arr.toString());}}private ArrayList<JSONObject> loadListFromBundle(Bundle savedInstanceState, String key) {ArrayList<JSONObject> results = new ArrayList<JSONObject>();String obsString = savedInstanceState.getString(key);if (obsString != null) {try {JSONArray arr = new JSONArray(obsString);for (int i = 0; i < arr.length(); i++) {results.add(arr.getJSONObject(i));}return results;} catch (JSONException exc) {exc.printStackTrace();return null;}} else {return null;}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(""user"", mUser);outState.putString(""mViewType"", mViewType);saveListToBundle(outState, mObservations, ""mObservations"");saveListToBundle(outState, mSpecies, ""mSpecies"");saveListToBundle(outState, mIdentifications, ""mIdentifications"");outState.putInt(""mTotalIdentifications"", mTotalIdentifications);outState.putInt(""mTotalObservations"", mTotalObservations);outState.putInt(""mTotalSpecies"", mTotalSpecies);if (mViewType.equals(VIEW_TYPE_OBSERVATIONS)) {View firstVisibleRow = mObservationsList.getChildAt(0);if (firstVisibleRow != null && mObservationsList != null) {mObservationListOffset = firstVisibleRow.getTop() - mObservationsList.getPaddingTop();mObservationListIndex = mObservationsList.getFirstVisiblePosition();outState.putInt(""mObservationListIndex"", mObservationListIndex);outState.putInt(""mObservationListOffset"", mObservationListOffset);}} else if (mViewType.equals(VIEW_TYPE_SPECIES)) {View firstVisibleRow = mSpeciesList.getChildAt(0);if (firstVisibleRow != null && mSpeciesList != null) {mSpeciesListOffset = firstVisibleRow.getTop() - mSpeciesList.getPaddingTop();mSpeciesListIndex = mSpeciesList.getFirstVisiblePosition();outState.putInt(""mSpeciesListIndex"", mSpeciesListIndex);outState.putInt(""mSpeciesListOffset"", mSpeciesListOffset);}} else if (mViewType.equals(VIEW_TYPE_IDENTIFICATIONS)) {View firstVisibleRow = mIdentificationsList.getChildAt(0);if (firstVisibleRow != null && mIdentificationsList != null) {mIdentificationsListOffset = firstVisibleRow.getTop() - mIdentificationsList.getPaddingTop();mIdentificationsListIndex = mIdentificationsList.getFirstVisiblePosition();outState.putInt(""mIdentificationsListIndex"", mIdentificationsListIndex);outState.putInt(""mIdentificationsListOffset"", mIdentificationsListOffset);}}super.onSaveInstanceState(outState);}@Overrideprotected void onPause() {super.onPause();}@Overrideprotected void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}mUserDetailsReceiver = new UserDetailsReceiver();IntentFilter filter = new IntentFilter();filter.addAction(INaturalistService.USER_DETAILS_RESULT);filter.addAction(INaturalistService.LIFE_LIST_RESULT);filter.addAction(INaturalistService.USER_OBSERVATIONS_RESULT);filter.addAction(INaturalistService.IDENTIFICATIONS_RESULT);registerReceiver(mUserDetailsReceiver, filter);refreshViewState();if (mViewType.equals(VIEW_TYPE_OBSERVATIONS)) {mObservationsList.setSelectionFromTop(mObservationListIndex, mObservationListOffset);} else if (mViewType.equals(VIEW_TYPE_SPECIES)) {mObservationsList.setSelectionFromTop(mSpeciesListIndex, mSpeciesListOffset);} else if (mViewType.equals(VIEW_TYPE_IDENTIFICATIONS)) {mObservationsList.setSelectionFromTop(mIdentificationsListIndex, mIdentificationsListOffset);}}// Method to add a TabHostprivate static void AddTab(UserProfile activity, TabHost tabHost, TabHost.TabSpec tabSpec) {tabSpec.setContent(new MyTabFactory(activity));tabHost.addTab(tabSpec);}// Manages the Tab changes, synchronizing it with Pagespublic void onTabChanged(String tag) {mViewType = tag;refreshViewType();}private void refreshViewType() {mObservationsContainer.setVisibility(View.GONE);mSpeciesContainer.setVisibility(View.GONE);mIdentificationsContainer.setVisibility(View.GONE);TabWidget tabWidget = mTabHost.getTabWidget();for (int i = 0; i < tabWidget.getChildCount(); i++) {View tab = tabWidget.getChildAt(i);TextView tabNameText = (TextView) tab.findViewById(R.id.tab_name);View bottomLine = tab.findViewById(R.id.bottom_line);tabNameText.setTypeface(null, Typeface.NORMAL);tabNameText.setTextColor(Color.parseColor(""#ACACAC""));bottomLine.setVisibility(View.GONE);}int selectedTab = 0;if (mViewType.equals(VIEW_TYPE_OBSERVATIONS)) {selectedTab = 0;mObservationsContainer.setVisibility(View.VISIBLE);} else if (mViewType.equals(VIEW_TYPE_SPECIES)) {selectedTab = 1;mSpeciesContainer.setVisibility(View.VISIBLE);} else if (mViewType.equals(VIEW_TYPE_IDENTIFICATIONS)) {selectedTab = 2;mIdentificationsContainer.setVisibility(View.VISIBLE);}mTabHost.setCurrentTab(selectedTab);View tab = tabWidget.getChildAt(selectedTab);TextView tabNameText = (TextView) tab.findViewById(R.id.tab_name);View bottomLine = tab.findViewById(R.id.bottom_line);tabNameText.setTypeface(null, Typeface.BOLD);tabNameText.setTextColor(Color.parseColor(""#000000""));bottomLine.setVisibility(View.VISIBLE);}// Tabs Creationprivate void initialiseTabHost() {mTabHost = (TabHost) findViewById(android.R.id.tabhost);mTabHost.setup();UserProfile.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(VIEW_TYPE_OBSERVATIONS).setIndicator(createTabContent(getString(R.string.project_observations), 1000)));UserProfile.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(VIEW_TYPE_SPECIES).setIndicator(createTabContent(getString(R.string.project_species), 2000)));UserProfile.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(VIEW_TYPE_IDENTIFICATIONS).setIndicator(createTabContent(getString(R.string.identifications), 3000)));mTabHost.getTabWidget().setDividerDrawable(null);mTabHost.setOnTabChangedListener(this);}private View createTabContent(String tabName, int count) {View view = LayoutInflater.from(this).inflate(R.layout.user_profile_tab, null);TextView countText = (TextView) view.findViewById(R.id.count);TextView tabNameText = (TextView) view.findViewById(R.id.tab_name);DecimalFormat formatter = new DecimalFormat(""#,###,###"");countText.setText(formatter.format(count));tabNameText.setText(tabName);return view;}private boolean isLoggedIn() {SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);return prefs.getString(""username"", null) != null;}private void getUserDetails(String action) {Intent serviceIntent = new Intent(action, null, this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.USERNAME, mUser.getString(""login""));startService(serviceIntent);}private class UserDetailsReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Bundle extras = intent.getExtras();String error = extras.getString(""error"");if (error != null) {mHelper.alert(String.format(getString(R.string.couldnt_load_user_details), error));return;}boolean isSharedOnApp = intent.getBooleanExtra(INaturalistService.IS_SHARED_ON_APP, false);Object object = null;BetterJSONObject resultsObject;JSONArray results = null;if (isSharedOnApp) {object = mApp.getServiceResult(intent.getAction());} else {object = intent.getSerializableExtra(actionToResultsParam(intent.getAction()));}int totalResults = 0;if (object == null) {refreshViewState();return;}if (intent.getAction().equals(INaturalistService.USER_DETAILS_RESULT)) {// Extended user detailsmUser = (BetterJSONObject) object;refreshUserDetails();mTotalObservations = mUser.getInt(""observations_count"");mTotalIdentifications = mUser.getInt(""identifications_count"");// Retrieve the user's life listIntent serviceIntent = new Intent(INaturalistService.ACTION_GET_LIFE_LIST, null, UserProfile.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.LIFE_LIST_ID, mUser.getInt(""life_list_id""));startService(serviceIntent);return;} else if (intent.getAction().equals(INaturalistService.LIFE_LIST_RESULT)) {// Life list result (species)resultsObject = (BetterJSONObject) object;totalResults = resultsObject.getInt(""total_entries"");results = resultsObject.getJSONArray(""listed_taxa"").getJSONArray();} else {// Observations / Identifications resultresults = ((SerializableJSONArray) object).getJSONArray();totalResults = results.length();}ArrayList<JSONObject> resultsArray = new ArrayList<JSONObject>();if (results == null) {refreshViewState();return;}for (int i = 0; i < results.length(); i++) {try {JSONObject item = results.getJSONObject(i);resultsArray.add(item);} catch (JSONException e) {e.printStackTrace();}}if (intent.getAction().equals(INaturalistService.USER_OBSERVATIONS_RESULT)) {mObservations = resultsArray;} else if (intent.getAction().equals(INaturalistService.LIFE_LIST_RESULT)) {mSpecies = resultsArray;mTotalSpecies = totalResults;} else if (intent.getAction().equals(INaturalistService.IDENTIFICATIONS_RESULT)) {mIdentifications = resultsArray;}refreshViewState();}private String actionToResultsParam(String action) {if (action.equals(INaturalistService.USER_DETAILS_RESULT)) {return INaturalistService.USER;} else if (action.equals(INaturalistService.LIFE_LIST_RESULT)) {return INaturalistService.LIFE_LIST;} else if (action.equals(INaturalistService.USER_OBSERVATIONS_RESULT)) {return INaturalistService.OBSERVATIONS;} else if (action.equals(INaturalistService.IDENTIFICATIONS_RESULT)) {return INaturalistService.IDENTIFICATIONS;} else {return null;}}}private void refreshViewState() {TabWidget tabWidget = mTabHost.getTabWidget();DecimalFormat formatter = new DecimalFormat(""#,###,###"");if (mObservations == null) {((TextView)tabWidget.getChildAt(0).findViewById(R.id.count)).setVisibility(View.GONE);((ProgressBar)tabWidget.getChildAt(0).findViewById(R.id.loading)).setVisibility(View.VISIBLE);mLoadingObservationsList.setVisibility(View.VISIBLE);mObservationsList.setVisibility(View.GONE);mObservationsListEmpty.setVisibility(View.GONE);} else {((TextView)tabWidget.getChildAt(0).findViewById(R.id.count)).setVisibility(View.VISIBLE);((ProgressBar)tabWidget.getChildAt(0).findViewById(R.id.loading)).setVisibility(View.GONE);((TextView)tabWidget.getChildAt(0).findViewById(R.id.count)).setText(formatter.format(mTotalObservations));mLoadingObservationsList.setVisibility(View.GONE);if (mObservations.size() == 0) {mObservationsListEmpty.setVisibility(View.VISIBLE);} else {mObservationsListEmpty.setVisibility(View.GONE);}if (mObservationsList.getAdapter() == null) {mObservationsListAdapter = new UserObservationAdapter(UserProfile.this, mObservations);mObservationsList.setAdapter(mObservationsListAdapter);}mObservationsList.setVisibility(View.VISIBLE);}if (mSpecies == null) {((TextView)tabWidget.getChildAt(1).findViewById(R.id.count)).setVisibility(View.GONE);((ProgressBar)tabWidget.getChildAt(1).findViewById(R.id.loading)).setVisibility(View.VISIBLE);mLoadingSpeciesList.setVisibility(View.VISIBLE);mSpeciesListEmpty.setVisibility(View.GONE);mSpeciesList.setVisibility(View.GONE);} else {((TextView)tabWidget.getChildAt(1).findViewById(R.id.count)).setVisibility(View.VISIBLE);((ProgressBar)tabWidget.getChildAt(1).findViewById(R.id.loading)).setVisibility(View.GONE);((TextView)tabWidget.getChildAt(1).findViewById(R.id.count)).setText(formatter.format(mTotalSpecies));mLoadingSpeciesList.setVisibility(View.GONE);if (mSpecies.size() == 0) {mSpeciesListEmpty.setVisibility(View.VISIBLE);} else {mSpeciesListEmpty.setVisibility(View.GONE);}if (mSpeciesList.getAdapter() == null) {mSpeciesListAdapter = new UserSpeciesAdapter(UserProfile.this, mSpecies);mSpeciesList.setAdapter(mSpeciesListAdapter);mSpeciesList.setVisibility(View.VISIBLE);}}if (mIdentifications == null) {((TextView)tabWidget.getChildAt(2).findViewById(R.id.count)).setVisibility(View.GONE);((ProgressBar)tabWidget.getChildAt(2).findViewById(R.id.loading)).setVisibility(View.VISIBLE);mLoadingIdentificationsList.setVisibility(View.VISIBLE);mIdentificationsListEmpty.setVisibility(View.GONE);mIdentificationsList.setVisibility(View.GONE);} else {((TextView)tabWidget.getChildAt(2).findViewById(R.id.count)).setVisibility(View.VISIBLE);((ProgressBar)tabWidget.getChildAt(2).findViewById(R.id.loading)).setVisibility(View.GONE);((TextView)tabWidget.getChildAt(2).findViewById(R.id.count)).setText(formatter.format(mTotalIdentifications));mLoadingIdentificationsList.setVisibility(View.GONE);if (mIdentifications.size() == 0) {mIdentificationsListEmpty.setVisibility(View.VISIBLE);} else {mIdentificationsListEmpty.setVisibility(View.GONE);}if (mIdentificationsList.getAdapter() == null) {mIdentificationsListAdapter = new UserIdentificationsAdapter(UserProfile.this, mIdentifications, mUser.getString(""login""));mIdentificationsList.setAdapter(mIdentificationsListAdapter);mIdentificationsList.setVisibility(View.VISIBLE);mIdentificationsList.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(UserProfile.this, ObservationViewerActivity.class);intent.putExtra(""observation"", item.optJSONObject(""observation"").toString());intent.putExtra(""read_only"", true);intent.putExtra(""reload"", true);startActivity(intent);}});}}}public void onOffsetChanged(AppBarLayout appBarLayout, int offset) {int maxScroll = appBarLayout.getTotalScrollRange();float percentage = (float) Math.abs(offset) / (float) maxScroll;if (percentage >= 0.9f) {if (!mUserPicHidden) {startAlphaAnimation(mUserPicContainer, 100, View.INVISIBLE);mUserPicHidden = true;}} else {if (mUserPicHidden) {startAlphaAnimation(mUserPicContainer, 100, View.VISIBLE);mUserPicHidden = false;}}}public static void startAlphaAnimation (View v, long duration, int visibility) {AlphaAnimation alphaAnimation = (visibility == View.VISIBLE)? new AlphaAnimation(0f, 1f): new AlphaAnimation(1f, 0f);alphaAnimation.setDuration(duration);alphaAnimation.setFillAfter(true);v.startAnimation(alphaAnimation);}private void refreshUserDetails() {mUserName.setText(mUser.getString(""login""));CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);String fullName = mUser.getString(""name"");if ((fullName == null) || (fullName.length() == 0)) {// No full name - use username insteadcollapsingToolbar.setTitle(mUser.getString(""login""));mUserName.setVisibility(View.INVISIBLE);} else {collapsingToolbar.setTitle(fullName);mUserName.setVisibility(View.VISIBLE);}final String bio = mUser.getString(""description"");mUserBio.setOnClickListener(null);final View.OnClickListener onBio = new View.OnClickListener() {@Overridepublic void onClick(View view) {String bio = mUser.getString(""description"");if ((bio == null) || (bio.length() == 0)) {// No bioreturn;}String title;String fullName = mUser.getString(""name"");if ((fullName == null) || (fullName.length() == 0)) {title = mUser.getString(""login"");} else {title = fullName;}mHelper.alert(title, mUser.getString(""description""));}};if ((bio == null) || (bio.length() == 0)) {mUserBio.setVisibility(View.GONE);} else {mUserBio.setVisibility(View.VISIBLE);mUserBio.setText(bio);ViewTreeObserver vto = mUserBio.getViewTreeObserver();vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {@Overridepublic void onGlobalLayout() {if (Build.VERSION.SDK_INT < 16) {mUserBio.getViewTreeObserver().removeGlobalOnLayoutListener(this);} else {mUserBio.getViewTreeObserver().removeOnGlobalLayoutListener(this);}Layout l = mUserBio.getLayout();if (l != null) {int lines = l.getLineCount();if (lines > 0) {if (l.getEllipsisCount(lines - 1) > 0) {// Bio is ellipsized - Trim the bio text to show the more linkString newBio = bio.substring(0, l.getLineStart(lines - 1) + l.getEllipsisStart(lines - 1) - 8) + ""... "" + getString(R.string.more_bio);mUserBio.setText(Html.fromHtml(newBio));// Show the full bio when the shortened bio is clickedmUserBio.setOnClickListener(onBio);}}}}});}final ImageView userPic = (ImageView) findViewById(R.id.user_pic);String iconUrl = mUser.getString(""medium_user_icon_url"");if (iconUrl == null) iconUrl = mUser.getString(""user_icon_url"");if ((iconUrl != null) && (iconUrl.length() > 0)) {UrlImageViewHelper.setUrlDrawable(userPic, iconUrl, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {findViewById(R.id.no_user_pic).setVisibility(View.GONE);userPic.setVisibility(View.VISIBLE);}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {Bitmap centerCrop = ImageUtils.centerCropBitmap(loadedBitmap);return ImageUtils.getCircleBitmap(centerCrop);}});UrlImageViewHelper.setUrlDrawable((ImageView) findViewById(R.id.user_bg), iconUrl + ""?bg=1"", new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {imageView.setImageBitmap(ImageUtils.blur(UserProfile.this, ImageUtils.centerCropBitmap(loadedBitmap.copy(loadedBitmap.getConfig(), true))));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});userPic.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {// Only show the photo viewer if a large enough image existsif ((mUser.getString(""original_user_icon_url"") != null) || (mUser.getString(""medium_user_icon_url"") != null)) {Intent intent = new Intent(UserProfile.this, ProfilePhotoViewer.class);intent.putExtra(ProfilePhotoViewer.USER, mUser.getJSONObject().toString());startActivity(intent);}}});} else {userPic.setVisibility(View.GONE);findViewById(R.id.no_user_pic).setVisibility(View.VISIBLE);}}}",UserProfile.java,0
200,"package org.inaturalist.android;import java.io.File;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.util.HashMap;import java.util.List;import java.util.Locale;import org.inaturalist.android.INaturalistService.LoginType;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.app.Activity;import android.app.NotificationManager;import android.content.ActivityNotFoundException;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.Typeface;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Html;import android.text.Layout;import android.text.Spannable;import android.text.TextPaint;import android.text.method.LinkMovementMethod;import android.text.style.URLSpan;import android.util.Log;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.webkit.*;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.Gallery;import android.widget.ImageView;import android.widget.TextView;public class GuideTaxonActivity extends AppCompatActivity {private static String TAG = ""GuideTaxonActivity"";private INaturalistApp mApp;private ActivityHelper mHelper;private BetterJSONObject mTaxon;private boolean mGuideTaxon;private String mTaxonId;private String mGuideXmlFilename;private GuideXML mGuideXml;private GuideTaxonXML mGuideTaxonXml;private String mGuideId;private boolean mShowAdd;private boolean mDownloadTaxon;private TaxonReceiver mTaxonReceiver;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}private class TaxonReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {unregisterReceiver(mTaxonReceiver);findViewById(R.id.loading_taxon).setVisibility(View.GONE);findViewById(R.id.taxon_details).setVisibility(View.VISIBLE);BetterJSONObject taxon = (BetterJSONObject) intent.getSerializableExtra(INaturalistService.TAXON_RESULT);if (taxon == null) {return;}mTaxon = taxon;loadTaxon();}}@Overridepublic void onCreate(Bundle savedInstanceState) {requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);requestWindowFeature(Window.FEATURE_PROGRESS);super.onCreate(savedInstanceState);ActionBar actionBar = getSupportActionBar();mApp = (INaturalistApp) getApplicationContext();mHelper = new ActivityHelper(this);Intent intent = getIntent();if (savedInstanceState == null) {mTaxon = (BetterJSONObject) intent.getSerializableExtra(""taxon"");mGuideTaxon = intent.getBooleanExtra(""guide_taxon"", true);mTaxonId = intent.getStringExtra(""taxon_id"");mGuideId = intent.getStringExtra(""guide_id"");mGuideXmlFilename = intent.getStringExtra(""guide_xml_filename"");mShowAdd = intent.getBooleanExtra(""show_add"", true);mDownloadTaxon = intent.getBooleanExtra(""download_taxon"", false);if (mDownloadTaxon) {// Get the taxon detailsmTaxonReceiver = new TaxonReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_GET_TAXON_RESULT);Log.i(TAG, ""Registering ACTION_GET_TAXON_RESULT"");registerReceiver(mTaxonReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_GET_TAXON, null, this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.TAXON_ID, mTaxonId != null ? mTaxonId : mTaxon.getInt(""id""));startService(serviceIntent);}} else {mTaxon = (BetterJSONObject) savedInstanceState.getSerializable(""taxon"");mGuideTaxon = savedInstanceState.getBoolean(""guide_taxon"", true);mGuideId = savedInstanceState.getString(""guide_id"");mTaxonId = savedInstanceState.getString(""taxon_id"");mGuideXmlFilename = savedInstanceState.getString(""guide_xml_filename"");mShowAdd = savedInstanceState.getBoolean(""show_add"");mDownloadTaxon = savedInstanceState.getBoolean(""download_taxon"");}if ((mGuideTaxon) && (mGuideXmlFilename != null)) {// Load guide taxon from XMLmGuideXml = new GuideXML(this, mGuideId, mGuideXmlFilename);mGuideTaxonXml = mGuideXml.getTaxonById(mTaxonId);setContentView(R.layout.guide_taxon);TextView displayName = (TextView)findViewById(R.id.displayName);TextView name = (TextView)findViewById(R.id.name);displayName.setText(mGuideTaxonXml.getDisplayName());name.setText(mGuideTaxonXml.getName());// Prepare the sectionsList<GuideTaxonSectionXML> sections = mGuideTaxonXml.getSections();StringBuilder photosAttributions = new StringBuilder();StringBuilder textAttributions = new StringBuilder();ViewGroup sectionsRoot = (ViewGroup)findViewById(R.id.sections);for (GuideTaxonSectionXML section : sections) {ViewGroup layout = (ViewGroup) getLayoutInflater().inflate(R.layout.guide_taxon_section, null, false);TextView title = (TextView) layout.findViewById(R.id.title);TextView body = (TextView) layout.findViewById(R.id.body);title.setText(section.getTitle());body.setText(Html.fromHtml(section.getBody()));body.setMovementMethod(LinkMovementMethod.getInstance());sectionsRoot.addView(layout);if (textAttributions.length() > 0) textAttributions.append("", "");textAttributions.append('""' + section.getTitle() + '""' + "" "");textAttributions.append(section.getAttribution());}// Prepare attributionsTextView textAttr = (TextView) findViewById(R.id.attributions_text);if (sections.size() == 0) {textAttr.setVisibility(View.GONE);}textAttr.setText(Html.fromHtml(String.format(getResources().getString(R.string.text), textAttributions)));textAttr.setMovementMethod(LinkMovementMethod.getInstance());List<GuideTaxonPhotoXML> photos = mGuideTaxonXml.getPhotos();for (GuideTaxonPhotoXML photo : photos) {if (photosAttributions.length() > 0) photosAttributions.append("", "");photosAttributions.append(photo.getAttribution());}TextView photosAttr = (TextView) findViewById(R.id.attributions_photos);photosAttr.setText(Html.fromHtml(String.format(getResources().getString(R.string.photos), photosAttributions)));photosAttr.setMovementMethod(LinkMovementMethod.getInstance());if ((photos.size() == 0) && (sections.size() == 0)) {// Don't show the sources and attribution section at allView sourcesSection = findViewById(R.id.sources_and_attrs_section);sourcesSection.setVisibility(View.GONE);}// Prepare photos galleryGallery gallery = (Gallery) findViewById(R.id.gallery);gallery.setAdapter(new GalleryPhotoAdapter(this, photos));if (photos.size() == 0) {photosAttr.setVisibility(View.GONE);gallery.setVisibility(View.GONE);}gallery.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView parent, View view, int position, long id) {Gallery g = (Gallery) parent;Uri uri = ((GalleryPhotoAdapter) g.getAdapter()).getItemUri(position);Intent intent;if (mGuideXml.isGuideDownloaded()) {// Offline photointent = new Intent(Intent.ACTION_VIEW);intent.setDataAndType(uri, ""image/*"");} else {// Online photointent = new Intent(Intent.ACTION_VIEW, uri);}try {startActivity(intent);} catch (ActivityNotFoundException e) {Log.e(TAG, ""Failed to view photo: "" + e);}}});} else {setContentView(R.layout.taxon);if (mDownloadTaxon) {findViewById(R.id.loading_taxon).setVisibility(View.VISIBLE);findViewById(R.id.taxon_details).setVisibility(View.GONE);}}actionBar.setHomeButtonEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);actionBar.setDisplayHomeAsUpEnabled(true);String title = """";if ((mGuideTaxon) && (mGuideXmlFilename != null) && (mGuideTaxonXml != null)) {title = mGuideTaxonXml.getDisplayName();if ((title == null) || (title.length() == 0)) title = mGuideTaxonXml.getName();} else {if (!mDownloadTaxon) {loadTaxon();}title = getString(R.string.about_this_species);}actionBar.setTitle(title);}private void loadTaxon() {if (mTaxon == null) {finish();return;}findViewById(R.id.loading_image).setVisibility(View.VISIBLE);TextView displayNameText = (TextView)findViewById(R.id.displayName);TextView name = (TextView)findViewById(R.id.name);String displayName = null;// Get the taxon display name according to configuration of the current iNat networkif (displayName == null) {// Couldn't extract the display name from the taxon names list - use the default onetry {displayName = mTaxon.getJSONObject().getString(""unique_name"");} catch (JSONException e2) {}try {JSONObject defaultName = mTaxon.getJSONObject().getJSONObject(""default_name"");displayName = defaultName.getString(""name"");} catch (JSONException e1) {// alas}if (displayName == null) {displayName = mTaxon.getJSONObject().optString(""preferred_common_name"");}if ((displayName == null) || (displayName.length() == 0)) {displayName = mTaxon.getJSONObject().optString(""english_common_name"");}}if ((displayName == null) || (displayName.length() == 0)) {displayNameText.setText(mTaxon.getJSONObject().optString(""name""));name.setVisibility(View.GONE);} else {displayNameText.setText(displayName);try {name.setText(mTaxon.getJSONObject().getString(""name""));} catch (JSONException e) {e.printStackTrace();}}JSONObject itemJson = mTaxon.getJSONObject();ImageView taxonImage = (ImageView) findViewById(R.id.taxon_image);String photoUrl = null;JSONObject defaultPhoto = itemJson.isNull(""default_photo"") ? null : itemJson.optJSONObject(""default_photo"");TextView photosAttr = (TextView) findViewById(R.id.attributions_photos);if (defaultPhoto != null) {photoUrl = defaultPhoto.optString(""medium_url"");photosAttr.setText(Html.fromHtml(String.format(getString(R.string.photo), photoUrl, defaultPhoto.optString(""attribution""))));photosAttr.setMovementMethod(LinkMovementMethod.getInstance());stripUnderlines(photosAttr);} else {photosAttr.setVisibility(View.GONE);}if ((photoUrl == null) || (photoUrl.length() == 0)) {photoUrl = itemJson.isNull(""photo_url"") ? null : itemJson.optString(""photo_url"");}if (photoUrl != null) {findViewById(R.id.loading_image).setVisibility(View.VISIBLE);UrlImageViewHelper.setUrlDrawable(taxonImage, photoUrl, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {findViewById(R.id.loading_image).setVisibility(View.GONE);}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});} else {findViewById(R.id.loading_image).setVisibility(View.GONE);taxonImage.setScaleType(ImageView.ScaleType.FIT_CENTER);taxonImage.setImageResource(ObservationPhotosViewer.observationIcon(itemJson));}TextView description = (TextView) findViewById(R.id.description);String descriptionText = itemJson.isNull(""wikipedia_summary"") ? """" : itemJson.optString(""wikipedia_summary"", """");description.setText(Html.fromHtml(descriptionText));ViewGroup viewOnWiki = (ViewGroup) findViewById(R.id.view_on_wikipedia);viewOnWiki.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {JSONObject taxonObj = mTaxon.getJSONObject();String obsUrl = null;try {String wikiTitle;if ((taxonObj.has(""wikipedia_title"")) && (!taxonObj.isNull(""wikipedia_title"")) && (taxonObj.optString(""wikipedia_title"").length() > 0)) {wikiTitle = taxonObj.optString(""wikipedia_title"");} else {wikiTitle = taxonObj.optString(""name"");}wikiTitle = wikiTitle.replace("" "", ""_"");Locale deviceLocale = getResources().getConfiguration().locale;String deviceLanguage =   deviceLocale.getLanguage();obsUrl = ""https://"" + deviceLanguage + "".wikipedia.org/wiki/"" + URLEncoder.encode(wikiTitle, ""utf-8"");} catch (UnsupportedEncodingException e) {e.printStackTrace();}Intent i = new Intent(Intent.ACTION_VIEW);i.setData(Uri.parse(obsUrl));startActivity(i);}});}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {MenuInflater inflater = getMenuInflater();if (mShowAdd) {inflater.inflate(R.menu.guide_taxon_menu, menu);}return super.onCreateOptionsMenu(menu);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:finish();return true;case R.id.add_taxon:// Add a new observation with the specified taxonIntent intent = new Intent(Intent.ACTION_INSERT, Observation.CONTENT_URI, this, ObservationEditor.class);if (mGuideTaxon) {intent.putExtra(ObservationEditor.SPECIES_GUESS, String.format(""%s (%s)"", mGuideTaxonXml.getDisplayName(), mGuideTaxonXml.getName()));} else {intent.putExtra(ObservationEditor.SPECIES_GUESS, String.format(""%s (%s)"", mTaxon.has(""display_name"") ? mTaxon.getString(""display_name"") : mTaxon.getJSONObject(""common_name"").optString(""name""), mTaxon.getString(""name"")));}startActivity(intent);return true;default:return super.onOptionsItemSelected(item);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(""taxon"", mTaxon);outState.putBoolean(""guide_taxon"", mGuideTaxon);outState.putString(""taxon_id"", mTaxonId);outState.putString(""guide_id"", mGuideId);outState.putString(""guide_xml_filename"", mGuideXmlFilename);outState.putBoolean(""show_add"", mShowAdd);outState.putBoolean(""download_taxon"", mDownloadTaxon);super.onSaveInstanceState(outState);}public class GalleryPhotoAdapter extends BaseAdapter {private Context mContext;private HashMap<Integer, ImageView> mViews;private List<GuideTaxonPhotoXML> mPhotos;public GalleryPhotoAdapter(Context c, List<GuideTaxonPhotoXML> photos) {mContext = c;mPhotos = photos;mViews = new HashMap<Integer, ImageView>();}public int getCount() {return mPhotos.size();}public Object getItem(int position) {return mPhotos.get(position);}public Uri getItemUri(int position) {GuideTaxonPhotoXML photo = mPhotos.get(position);boolean isOffline = photo.getGuide().isGuideDownloaded();GuideTaxonPhotoXML.PhotoType photoType;if (isOffline) {// Offline version of the photo is availablephotoType = GuideTaxonPhotoXML.PhotoType.LOCAL;} else {// Use online version of the photophotoType = GuideTaxonPhotoXML.PhotoType.REMOTE;}String photoPath = this.getPhotoLocation(photo, photoType);if (isOffline) {return Uri.fromFile(new File(photoPath));} else {return Uri.parse(photoPath);}}public long getItemId(int position) {return position;}// Gets the photo location (local/remote) - tries a specific size, and if not found,// tries the next best size until something is foundprivate String getPhotoLocation(GuideTaxonPhotoXML photo, GuideTaxonPhotoXML.PhotoType photoType) {final GuideTaxonPhotoXML.PhotoSize[] DEFAULT_SIZES = {GuideTaxonPhotoXML.PhotoSize.MEDIUM,GuideTaxonPhotoXML.PhotoSize.LARGE,GuideTaxonPhotoXML.PhotoSize.SMALL,GuideTaxonPhotoXML.PhotoSize.THUMBNAIL};String photoLocation = null;for (GuideTaxonPhotoXML.PhotoSize size : DEFAULT_SIZES) {photoLocation = photo.getPhotoLocation(photoType, size);// See if we found a photo for current size - if not, try the next best sizeif ((photoLocation != null) && (photoLocation.length() > 0)) break;}return photoLocation;}public View getView(int position, View convertView, ViewGroup parent) {if (mViews.containsKey(position)) {return (ImageView) mViews.get(position);}ImageView imageView = new ImageView(mContext);imageView.setLayoutParams(new Gallery.LayoutParams(Gallery.LayoutParams.FILL_PARENT, Gallery.LayoutParams.FILL_PARENT));imageView.setScaleType(ImageView.ScaleType.FIT_START);GuideTaxonPhotoXML photo = mPhotos.get(position);GuideTaxonPhotoXML.PhotoType photoType;boolean isOffline = photo.getGuide().isGuideDownloaded();if (isOffline) {// Offline version of the photo is availablephotoType = GuideTaxonPhotoXML.PhotoType.LOCAL;} else {// Use online version of the photophotoType = GuideTaxonPhotoXML.PhotoType.REMOTE;}String photoPath = this.getPhotoLocation(photo, photoType);if (isOffline) {Bitmap bitmap = BitmapFactory.decodeFile(photoPath);imageView.setImageBitmap(bitmap);} else {UrlImageViewHelper.setUrlDrawable(imageView, photoPath);}mViews.put(position, imageView);return imageView;}}private class URLSpanNoUnderline extends URLSpan {public URLSpanNoUnderline(String url) {super(url);}@Overridepublic void updateDrawState(TextPaint ds) {super.updateDrawState(ds);ds.setUnderlineText(false);}}private void stripUnderlines(TextView textView) {Spannable s = (Spannable)textView.getText();URLSpan[] spans = s.getSpans(0, s.length(), URLSpan.class);for (URLSpan span: spans) {int start = s.getSpanStart(span);int end = s.getSpanEnd(span);s.removeSpan(span);span = new URLSpanNoUnderline(span.getURL());s.setSpan(span, start, end, 0);}textView.setText(s);}}",GuideTaxonActivity.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import android.content.Context;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.app.FragmentTransaction;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.support.v4.widget.SimpleCursorAdapter.ViewBinder;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;/*** This is a helper class that implements the management of tabs and all* details of connecting a ViewPager with associated TabHost.  It relies on a* trick.  Normally a tab host has a simple API for supplying a View or* Intent that each tab will show.  This is not sufficient for switching* between pages.  So instead we make the content part of the tab host* 0dp high (it is not shown) and the TabsAdapter supplies its own dummy* view to show as the tab content.  It listens to changes in tabs, and takes* care of switch to the correct paged in the ViewPager whenever the selected* tab changes.*/public class TabsAdapter extends FragmentPagerAdapter implements OnPageChangeListener, ActionBar.TabListener {private final Context mContext;private final ActionBar mBar;private final ViewPager mViewPager;private final ArrayList<TabInfo> mTabs = new ArrayList<TabInfo>();final class TabInfo {private final Class<?> clss;private final Bundle args;TabInfo(Class<?> _class, Bundle _args) {clss = _class;args = _args;}}public TabsAdapter(AppCompatActivity activity, ActionBar bar, ViewPager pager) {super(activity.getSupportFragmentManager());mContext = activity;mBar = bar;mViewPager = pager;mViewPager.setAdapter(this);mViewPager.setOnPageChangeListener(this);}public void addTab(ActionBar.Tab tab, Class<? extends Fragment> clss, Bundle args) {TabInfo info = new TabInfo(clss, args);tab.setTag(info);tab.setTabListener(this);mTabs.add(info);mBar.addTab(tab);notifyDataSetChanged();}@Overridepublic int getCount() {return mTabs.size();}@Overridepublic Fragment getItem(int position) {TabInfo info = mTabs.get(position);return Fragment.instantiate(mContext, info.clss.getName(), info.args);}@Overridepublic void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {}@Overridepublic void onPageSelected(int position) {mBar.setSelectedNavigationItem(position);}@Overridepublic void onPageScrollStateChanged(int state) {}@Overridepublic void onTabSelected(ActionBar.Tab tab, FragmentTransaction ft) {Object tag = tab.getTag();for (int i=0; i<mTabs.size(); i++) {if (mTabs.get(i) == tag) {mViewPager.setCurrentItem(i);}}}@Overridepublic void onTabUnselected(ActionBar.Tab tab, FragmentTransaction ft) {}@Overridepublic void onTabReselected(ActionBar.Tab tab, FragmentTransaction ft) {}}",TabsAdapter.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import java.util.List;/*** Represents a guide taxon filter - text string, tags, etc.*/public class GuideTaxonFilter {private String mSearchText;private ArrayList<String> mTags;public GuideTaxonFilter() {mTags = new ArrayList<String>();}public void setSearchText(String searchText) {mSearchText = searchText;}public String getSearchText() {return mSearchText;}public void addTag(String tag) {mTags.add(tag);}public void removeTag(String tag) {mTags.remove(tag);}public void clearTags() {mTags.clear();}public boolean hasTag(String tag) {return mTags.contains(tag);}public void setTags(List<String> tags) {mTags.clear();mTags.addAll(tags);}public List<String> getAllTags() {return mTags;}}",GuideTaxonFilter.java,0
200,"package org.inaturalist.android;import org.w3c.dom.Node;import java.util.ArrayList;import java.util.List;/*** Represents a GuideTaxon XML node*/public class GuideTaxonXML extends BaseGuideXMLParser {private GuideXML mGuide;/*** Initialize the GuideTaxonXML class with the parent guide and root XML node for it* @param guide* @param root*/public GuideTaxonXML(GuideXML guide, Node root) {mGuide = guide;setRootNode(root);}/*** Returns the taxon's name* @return the taxon's name*/public String getName() {return getValueByXPath(""descendant::name"");}/*** Returns the taxon's display name* @return the taxon's display name*/public String getDisplayName() {return getValueByXPath(""descendant::displayName"");}/*** Returns the taxon's id* @return the taxon's id*/public String getTaxonId() {return getValueByXPath(""descendant::taxonID"");}/*** Returns the list of sections (e.g. summary section)* @return list of GuideTaxonSectionXML instances*/public List<GuideTaxonSectionXML> getSections() {List<Node> nodes = getNodesByXPath(""descendant::GuideSection"");ArrayList<GuideTaxonSectionXML> sections = new ArrayList<GuideTaxonSectionXML>();for (Node node: nodes) {sections.add(new GuideTaxonSectionXML(node));}return sections;}/*** Returns the list of taxon photos* @return list of GuideTaxonPhotoXML instances*/public List<GuideTaxonPhotoXML> getPhotos() {List<Node> nodes = getNodesByXPath(""descendant::GuidePhoto"");ArrayList<GuideTaxonPhotoXML> photos = new ArrayList<GuideTaxonPhotoXML>();for (Node node: nodes) {photos.add(new GuideTaxonPhotoXML(mGuide, node));}return photos;}}",GuideTaxonXML.java,0
200,"package org.inaturalist.android;import java.io.File;import java.io.IOException;import java.sql.Timestamp;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.inaturalist.android.INaturalistService.LoginType;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import uk.co.senab.photoview.HackyViewPager;import uk.co.senab.photoview.PhotoView;import uk.co.senab.photoview.PhotoViewAttacher;import com.flurry.android.FlurryAgent;import com.google.android.gms.maps.model.BitmapDescriptor;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.app.Activity;import android.app.AlertDialog;import android.content.ContentUris;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Bundle;import android.provider.MediaStore;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager.LayoutParams;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.Window;import android.webkit.*;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;public class ObservationPhotosViewer extends AppCompatActivity {private static String TAG = ""ObservationPhotosViewer"";private INaturalistApp mApp;private ActivityHelper mHelper;private JSONObject mObservation;private HackyViewPager mViewPager;public static final String IS_NEW_OBSERVATION = ""is_new_observation"";public static final String OBSERVATION = ""observation"";public static final String OBSERVATION_ID = ""observation_id"";public static final String OBSERVATION_ID_INTERNAL = ""observation_id_internal"";public static final String CURRENT_PHOTO_INDEX = ""current_photo_index"";public static final String READ_ONLY = ""read_only"";public static final String SET_DEFAULT_PHOTO_INDEX = ""set_default_photo_index"";public static final String DELETE_PHOTO_INDEX = ""delete_photo_index"";private boolean mIsNewObservation;private int mObservationId;private int mCurrentPhotoIndex;private View mDeletePhoto;private boolean mReadOnly;private int mObservationIdInternal;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);actionBar.setTitle(R.string.observation_photos);mApp = (INaturalistApp) getApplicationContext();setContentView(R.layout.observation_photos);mDeletePhoto = findViewById(R.id.delete_photo);Intent intent = getIntent();try {if (savedInstanceState == null) {mIsNewObservation = intent.getBooleanExtra(IS_NEW_OBSERVATION, false);mCurrentPhotoIndex = intent.getIntExtra(CURRENT_PHOTO_INDEX, 0);if (!mIsNewObservation) {String observationString = intent.getStringExtra(OBSERVATION);if (observationString != null) mObservation = new JSONObject(observationString);} else {mObservationId = intent.getIntExtra(OBSERVATION_ID, 0);mObservationIdInternal = intent.getIntExtra(OBSERVATION_ID_INTERNAL, 0);}mReadOnly = intent.getBooleanExtra(READ_ONLY, false);} else {mIsNewObservation = savedInstanceState.getBoolean(""mIsNewObservation"");if (!mIsNewObservation) {mObservation = new JSONObject(savedInstanceState.getString(""observation""));} else {mObservationId = savedInstanceState.getInt(""mObservationId"");mObservationIdInternal = savedInstanceState.getInt(""mObservationIdInternal"");}mReadOnly = savedInstanceState.getBoolean(""mReadOnly"");}} catch (JSONException e) {e.printStackTrace();}mViewPager = (HackyViewPager) findViewById(R.id.id_pic_view_pager);if ((mObservation != null) && (!mIsNewObservation)) {mViewPager.setAdapter(new IdPicsPagerAdapter(mObservation));} else if (mIsNewObservation) {mViewPager.setAdapter(new IdPicsPagerAdapter(mObservationId, mObservationIdInternal));if (!mReadOnly) mDeletePhoto.setVisibility(View.VISIBLE);mDeletePhoto.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent data = new Intent();data.putExtra(DELETE_PHOTO_INDEX, mViewPager.getCurrentItem());setResult(RESULT_OK, data);finish();}});}mViewPager.setCurrentItem(mCurrentPhotoIndex);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:setResult(RESULT_CANCELED);finish();return true;case R.id.set_as_first:Intent data = new Intent();data.putExtra(SET_DEFAULT_PHOTO_INDEX, mViewPager.getCurrentItem());setResult(RESULT_OK, data);finish();return true;default:return super.onOptionsItemSelected(item);}}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {if (mIsNewObservation && !mReadOnly) {MenuInflater inflater = getMenuInflater();inflater.inflate(R.menu.observation_photos_viewer_menu, menu);return true;} else {return super.onCreateOptionsMenu(menu);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {if (!mIsNewObservation && mObservation != null) {outState.putString(""observation"", mObservation.toString());}outState.putBoolean(""mIsNewObservation"", mIsNewObservation);if (mIsNewObservation) {outState.putInt(""mObservationId"", mObservationId);outState.putInt(""mObservationIdInternal"", mObservationIdInternal);}mCurrentPhotoIndex = mViewPager.getCurrentItem();outState.putInt(""mCurrentPhotoIndex"", mCurrentPhotoIndex);outState.putBoolean(""mReadOnly"", mReadOnly);super.onSaveInstanceState(outState);}class IdPicsPagerAdapter extends PagerAdapter {int mDefaultTaxonIcon;List<String> mImages;// Load offline photos for a new observationpublic IdPicsPagerAdapter(int observationId, int _observationId) {mImages = new ArrayList<String>();Cursor imageCursor = getContentResolver().query(ObservationPhoto.CONTENT_URI,ObservationPhoto.PROJECTION,""_observation_id=? or observation_id=?"",new String[]{String.valueOf(_observationId), String.valueOf(observationId)},ObservationPhoto.DEFAULT_SORT_ORDER);imageCursor.moveToFirst();if (imageCursor.getCount() == 0) return;do {String photoFileName = imageCursor.getString(imageCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_FILENAME));String imageUrl = imageCursor.getString(imageCursor.getColumnIndexOrThrow(ObservationPhoto.PHOTO_URL));mImages.add(imageUrl != null ? imageUrl : photoFileName);} while (imageCursor.moveToNext());}// Load online photos for an existing observationpublic IdPicsPagerAdapter(JSONObject observation) {mImages = new ArrayList<String>();mDefaultTaxonIcon = observationIcon(observation);JSONArray photos = observation.optJSONArray(""observation_photos"");if ((photos != null) && (photos.length() > 0)) {// Show the photosfor (int i = 0; i < photos.length(); i++) {JSONObject photo = photos.optJSONObject(i);if (photo != null) {JSONObject innerPhoto = photo.optJSONObject(""photo"");if (innerPhoto != null) {String photoUrl = innerPhoto.has(""original_url"") ? innerPhoto.optString(""original_url"") : innerPhoto.optString(""large_url"");if (photoUrl != null) {mImages.add(photoUrl);}}}}} else {// Show taxon iconmImages.add(null);}}@Overridepublic int getCount() {return mImages.size();}@Overridepublic View instantiateItem(ViewGroup container, int position) {View layout = (View) getLayoutInflater().inflate(R.layout.observation_photo, null, false);container.addView(layout, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);ImageView imageView = (ImageView) layout.findViewById(R.id.id_pic);final ProgressBar loading = (ProgressBar) layout.findViewById(R.id.id_pic_loading);String imagePath = mImages.get(position);if (!imagePath.startsWith(""http://"")) {// Offline photoBitmap bitmapImage = null;try {int newHeight = mViewPager.getMeasuredHeight();int newWidth = mViewPager.getMeasuredHeight();bitmapImage = ImageUtils.decodeSampledBitmapFromUri(getContentResolver(),Uri.fromFile(new File(imagePath)), newWidth, newHeight);// Scale down the image if it's too big for the GL rendererbitmapImage = ImageUtils.scaleDownBitmapIfNeeded(ObservationPhotosViewer.this, bitmapImage);imageView.setImageBitmap(bitmapImage);final PhotoViewAttacher attacher = new PhotoViewAttacher(imageView);attacher.update();} catch (Exception e) {e.printStackTrace();}} else {// Online photoString imageUrl = mImages.get(position);if (imageUrl == null) {// Show a default taxon imageimageView.setImageResource(mDefaultTaxonIcon);} else {loading.setVisibility(View.VISIBLE);imageView.setVisibility(View.INVISIBLE);final PhotoViewAttacher attacher = new PhotoViewAttacher(imageView);// Show a photoUrlImageViewHelper.setUrlDrawable(imageView, imageUrl, mDefaultTaxonIcon, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {loading.setVisibility(View.GONE);imageView.setVisibility(View.VISIBLE);attacher.update();}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Scale down the image if it's too big for the GL rendererloadedBitmap = ImageUtils.scaleDownBitmapIfNeeded(ObservationPhotosViewer.this, loadedBitmap);return loadedBitmap;}});}}return layout;}@Overridepublic void destroyItem(ViewGroup container, int position, Object object) {container.removeView((View) object);}@Overridepublic boolean isViewFromObject(View view, Object object) {return view == object;}}public static int observationIcon(JSONObject o) {if (o == null) return R.drawable.unknown_large;String iconicTaxonName = null;if (o.has(""iconic_taxon_name"") && !o.isNull(""iconic_taxon_name"")) {try {iconicTaxonName = o.getString(""iconic_taxon_name"");} catch (JSONException e) {e.printStackTrace();return R.drawable.unknown_large;}}if (o.has(""taxon"")) {try {iconicTaxonName = o.getJSONObject(""taxon"").optString(""iconic_taxon_name"");} catch (JSONException e) {e.printStackTrace();return R.drawable.unknown_large;}}if (iconicTaxonName == null) {return R.drawable.unknown_large;} else if (iconicTaxonName.equals(""Animalia"")) {return R.drawable.animalia_large;} else if (iconicTaxonName.equals(""Plantae"")) {return R.drawable.plantae_large;} else if (iconicTaxonName.equals(""Chromista"")) {return R.drawable.chromista_large;} else if (iconicTaxonName.equals(""Fungi"")) {return R.drawable.fungi_large;} else if (iconicTaxonName.equals(""Protozoa"")) {return R.drawable.protozoa_large;} else if (iconicTaxonName.equals(""Actinopterygii"")) {return R.drawable.actinopterygii_large;} else if (iconicTaxonName.equals(""Amphibia"")) {return R.drawable.amphibia_large;} else if (iconicTaxonName.equals(""Reptilia"")) {return R.drawable.reptilia_large;} else if (iconicTaxonName.equals(""Aves"")) {return R.drawable.aves_large;} else if (iconicTaxonName.equals(""Mammalia"")) {return R.drawable.mammalia_large;} else if (iconicTaxonName.equals(""Mollusca"")) {return R.drawable.mollusca_large;} else if (iconicTaxonName.equals(""Insecta"")) {return R.drawable.insecta_large;} else if (iconicTaxonName.equals(""Arachnida"")) {return R.drawable.arachnida_large;} else {return R.drawable.unknown_large;}}}",ObservationPhotosViewer.java,0
200,"package org.inaturalist.android;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.util.ArrayList;import java.util.Locale;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.app.NotificationManager;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Typeface;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Filter;import android.widget.Filterable;import android.widget.HeaderViewListAdapter;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;public class TaxonSearchActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {private static final String LOG_TAG = ""TaxonSearchActivity"";public static final String TAXON_ID = ""taxon_id"";public static final String ID_NAME = ""id_name"";public static final String TAXON_NAME = ""taxon_name"";public static final String ICONIC_TAXON_NAME = ""iconic_taxon_name"";public static final String ID_PIC_URL = ""id_url"";public static final String FIELD_ID = ""field_id"";public static final String IS_CUSTOM = ""is_custom"";public static final String SPECIES_GUESS = ""species_guess"";public static final String SHOW_UNKNOWN = ""show_unknown"";public static final int UNKNOWN_TAXON_ID = -1;private TaxonAutoCompleteAdapter mAdapter;private int mFieldId;private ProgressBar mProgress;private INaturalistApp mApp;private boolean mShowUnknown;private long mLastTime = 0;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overridepublic void onResume() {super.onResume();if (mApp == null) { mApp = (INaturalistApp) getApplicationContext(); }}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}private ArrayList<JSONObject> autocomplete(String input) {ArrayList<JSONObject> resultList = null;if (!isNetworkAvailable()) {return new ArrayList<JSONObject>();}HttpURLConnection conn = null;StringBuilder jsonResults = new StringBuilder();try {StringBuilder sb = new StringBuilder(INaturalistService.API_HOST + ""/taxa/autocomplete"");sb.append(""?q="");sb.append(URLEncoder.encode(input, ""utf8""));NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = getResources().getConfiguration().locale;String deviceLexicon = deviceLocale.getLanguage();sb.append(""&locale="");sb.append(deviceLexicon);URL url = new URL(sb.toString());conn = (HttpURLConnection) url.openConnection();InputStreamReader in = new InputStreamReader(conn.getInputStream());// Load the results into a StringBuilderint read;char[] buff = new char[1024];while ((read = in.read(buff)) != -1) {jsonResults.append(buff, 0, read);}} catch (MalformedURLException e) {Log.e(LOG_TAG, ""Error processing Places API URL"", e);return resultList;} catch (IOException e) {Log.e(LOG_TAG, ""Error connecting to Places API"", e);return resultList;} finally {if (conn != null) {conn.disconnect();}}try {JSONObject resultsObject = new JSONObject(jsonResults.toString());JSONArray predsJsonArray = resultsObject.getJSONArray(""results"");// Extract the Place descriptions from the resultsresultList = new ArrayList<JSONObject>(predsJsonArray.length());for (int i = 0; i < predsJsonArray.length(); i++) {resultList.add(predsJsonArray.getJSONObject(i));}} catch (JSONException e) {Log.e(LOG_TAG, ""Cannot process JSON results"", e);}return resultList;}private class TaxonAutoCompleteAdapter extends ArrayAdapter<String> implements Filterable {private ArrayList<JSONObject> mResultList;private Context mContext;private String mCurrentSearchString;public TaxonAutoCompleteAdapter(Context context, int resourceId) {super(context, resourceId, new ArrayList<String>());mContext = context;mResultList = new ArrayList<JSONObject>();}@Overridepublic int getCount() {return (mResultList != null ? mResultList.size() : 0);}@Overridepublic String getItem(int index) {try {return mResultList.get(index).getString(""name"");} catch (JSONException e) {return """";}}private void toggleLoading(final boolean isLoading) {runOnUiThread(new Runnable() {@Overridepublic void run() {if (isLoading) {mProgress.setVisibility(View.VISIBLE);if (isNetworkAvailable()) {// While we're waiting for results to load, show the string the user is// typing as the first result (just with an unknown taxon type)if (mResultList == null) {mResultList = new ArrayList<JSONObject>();} else {mResultList.clear();}JSONObject customObs = new JSONObject();try {customObs.put(""is_custom"", true);customObs.put(""name"", mCurrentSearchString);} catch (JSONException e) {e.printStackTrace();}mResultList.add(customObs);notifyDataSetChanged();}} else {mProgress.setVisibility(View.GONE);}}});}@Overridepublic Filter getFilter() {Filter filter = new Filter() {@Overrideprotected FilterResults performFiltering(CharSequence constraint) {FilterResults filterResults = new FilterResults();if (constraint != null) {if (constraint.length() == 0) {filterResults.values = new ArrayList<JSONObject>();filterResults.count = 0;} else {toggleLoading(true);// Retrieve the autocomplete results.ArrayList<JSONObject> results;mCurrentSearchString = (String) constraint;results = autocomplete(constraint.toString());if (!constraint.equals(mCurrentSearchString)) {// In the meanwhile, new searches were initiated by the user - ignore this resultreturn null;}// Assign the data to the FilterResultsfilterResults.values = results;filterResults.count = results != null ? results.size() : 0;}}toggleLoading(false);return filterResults;}@Overrideprotected void publishResults(CharSequence constraint, final FilterResults results) {new Thread(new Runnable() {@Overridepublic void run() {if (results != null && results.count > 0 && results.values != null) {mResultList = (ArrayList<JSONObject>) results.values;if ((mCurrentSearchString != null) && (mCurrentSearchString.length() > 0)) {// Add in the current search string as a custom observationJSONObject customObs = new JSONObject();try {customObs.put(""is_custom"", true);customObs.put(""name"", mCurrentSearchString);} catch (JSONException e) {e.printStackTrace();}mResultList.add(0, customObs);}if (mShowUnknown) mResultList.add(0, null);runOnUiThread(new Runnable() {@Overridepublic void run() {notifyDataSetChanged();}});} else {if ((results != null) && (results.values != null)) {mResultList = (ArrayList<JSONObject>) results.values;if ((mCurrentSearchString != null) && (mCurrentSearchString.length() > 0)) {// Add in the current search string as a custom observationJSONObject customObs = new JSONObject();try {customObs.put(""is_custom"", true);customObs.put(""name"", mCurrentSearchString);} catch (JSONException e) {e.printStackTrace();}mResultList.add(customObs);}if (mShowUnknown) mResultList.add(0, null);}runOnUiThread(new Runnable() {@Overridepublic void run() {notifyDataSetInvalidated();}});}}}).start();}};return filter;}public View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View view = inflater.inflate(R.layout.taxon_result_item, parent, false);JSONObject item = mResultList.get(position);JSONObject defaultName;String displayName = null;if (item == null) {// It's the unknown taxon row (the first row)((ViewGroup)view.findViewById(R.id.taxon_result)).setVisibility(View.GONE);((ViewGroup)view.findViewById(R.id.unknown_taxon_result)).setVisibility(View.VISIBLE);view.setTag(null);return view;} else {((ViewGroup)view.findViewById(R.id.taxon_result)).setVisibility(View.VISIBLE);((ViewGroup)view.findViewById(R.id.unknown_taxon_result)).setVisibility(View.GONE);}// Get the taxon display name according to device localetry {ImageView idPic = (ImageView) view.findViewById(R.id.id_pic);TextView idName = (TextView) view.findViewById(R.id.id_name);TextView idTaxonName = (TextView) view.findViewById(R.id.id_taxon_name);if (item.optBoolean(""is_custom"", false)) {// Custom-named taxonidName.setText(item.getString(""name""));idTaxonName.setVisibility(View.GONE);idPic.setImageResource(R.drawable.iconic_taxon_unknown);} else {idName.setText(getTaxonName(item));idTaxonName.setText(item.getString(""name""));idTaxonName.setTypeface(null, Typeface.ITALIC);if (item.has(""default_photo"") && !item.isNull(""default_photo"")) {JSONObject defaultPhoto = item.getJSONObject(""default_photo"");UrlImageViewHelper.setUrlDrawable(idPic, defaultPhoto.getString(""square_url""), new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {if (loadedBitmap != null) imageView.setImageBitmap(ImageUtils.getRoundedCornerBitmap(loadedBitmap, 4));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {return loadedBitmap;}});} else {idPic.setImageResource(R.drawable.iconic_taxon_unknown);}}view.setTag(item);} catch (JSONException e) {e.printStackTrace();}return view;}}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:setResult(RESULT_CANCELED);if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {finishAfterTransition();} else {finish();}return true;}return super.onOptionsItemSelected(item);}@Overridepublic void onBackPressed() {setResult(RESULT_CANCELED);if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {finishAfterTransition();} else {finish();}}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);if (mApp == null) { mApp = (INaturalistApp) getApplicationContext(); }ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setDisplayShowCustomEnabled(true);LayoutInflater li = LayoutInflater.from(this);View customView = li.inflate(R.layout.taxon_search_action_bar, null);actionBar.setCustomView(customView);actionBar.setLogo(R.drawable.ic_arrow_back);setContentView(R.layout.taxon_search);Intent intent = getIntent();mFieldId = intent.getIntExtra(FIELD_ID, 0);mProgress = (ProgressBar) findViewById(R.id.progress);mProgress.setVisibility(View.GONE);mAdapter = new TaxonAutoCompleteAdapter(getApplicationContext(), R.layout.taxon_result_item);final EditText autoCompView = (EditText) customView.findViewById(R.id.search_text);autoCompView.addTextChangedListener(new TextWatcher() {@Overridepublic void onTextChanged(final CharSequence s, int start, int before, int count) {if (mAdapter != null) mAdapter.getFilter().filter(s);}@Overridepublic void beforeTextChanged(CharSequence s, int start, int count, int after) { }@Overridepublic void afterTextChanged(Editable s) { }});String initialSearch = intent.getStringExtra(SPECIES_GUESS);mShowUnknown = intent.getBooleanExtra(SHOW_UNKNOWN, false);if ((initialSearch != null) && (initialSearch.trim().length() > 0)) {autoCompView.setText(initialSearch);autoCompView.setSelection(initialSearch.length());autoCompView.requestFocus();(new Handler()).postDelayed(new Runnable() {@Overridepublic void run() {InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);imm.showSoftInput(autoCompView, InputMethodManager.SHOW_IMPLICIT);}}, 100);}setListAdapter(mAdapter);getListView().setOnItemClickListener(this);}public void onItemClick(AdapterView<?> adapterView, View v, int position, long id) {JSONObject item = (JSONObject) v.getTag();try {Intent intent = new Intent();Bundle bundle = new Bundle();if (item != null) {if (item.optBoolean(""is_custom"", false)) {// Custom named taxonbundle.putString(TaxonSearchActivity.ID_NAME, item.getString(""name""));bundle.putBoolean(TaxonSearchActivity.IS_CUSTOM, true);} else {bundle.putString(TaxonSearchActivity.ID_NAME, getTaxonName(item));bundle.putString(TaxonSearchActivity.TAXON_NAME, item.getString(""name""));bundle.putString(TaxonSearchActivity.ICONIC_TAXON_NAME, item.optString(""iconic_taxon_name""));if (item.has(""default_photo"") && !item.isNull(""default_photo"")) bundle.putString(TaxonSearchActivity.ID_PIC_URL, item.getJSONObject(""default_photo"").getString(""square_url""));bundle.putBoolean(TaxonSearchActivity.IS_CUSTOM, false);bundle.putInt(TaxonSearchActivity.TAXON_ID, item.getInt(""id""));}bundle.putInt(TaxonSearchActivity.FIELD_ID, mFieldId);} else {// Unknown taxonbundle.putInt(TaxonSearchActivity.TAXON_ID, UNKNOWN_TAXON_ID);}intent.putExtras(bundle);setResult(RESULT_OK, intent);if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {finishAfterTransition();} else {finish();}} catch (JSONException e) {// TODO Auto-generated catch blocke.printStackTrace();}}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}private String getTaxonName(JSONObject item) {return item.optString(""preferred_common_name"", item.optString(""matched_term""));}private ListView mListView;protected ListView getListView() {if (mListView == null) {mListView = (ListView) findViewById(android.R.id.list);}return mListView;}protected void setListAdapter(ListAdapter adapter) {getListView().setAdapter(adapter);}protected ListAdapter getListAdapter() {ListAdapter adapter = getListView().getAdapter();if (adapter instanceof HeaderViewListAdapter) {return ((HeaderViewListAdapter)adapter).getWrappedAdapter();} else {return adapter;}}}",TaxonSearchActivity.java,0
200,"package org.inaturalist.android;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.Serializable;import org.json.JSONArray;import org.json.JSONException;public class SerializableJSONArray implements Serializable {private transient JSONArray jsonArray;public SerializableJSONArray() {this.jsonArray = new JSONArray();}public SerializableJSONArray(JSONArray jsonArray) {this.jsonArray = jsonArray;}public JSONArray getJSONArray() {return jsonArray;}private void writeObject(ObjectOutputStream oos) throws IOException {oos.defaultWriteObject();oos.writeObject(jsonArray != null ? jsonArray.toString() : null);}private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException, JSONException {ois.defaultReadObject();String data = (String) ois.readObject();jsonArray = (data != null ? new JSONArray(data) : null);}}",SerializableJSONArray.java,0
200,package org.inaturalist.android;public class FeaturedProjectsTab extends BaseProjectsTab {@Overrideprotected String getActionName() {return INaturalistService.ACTION_GET_FEATURED_PROJECTS;}@Overrideprotected String getFilterResultName() {return INaturalistService.ACTION_FEATURED_PROJECTS_RESULT;}@Overrideprotected String getFilterResultParamName() {return INaturalistService.PROJECTS_RESULT;}},FeaturedProjectsTab.java,0
200,"package org.inaturalist.android;import android.content.ContentResolver;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.PorterDuff;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.net.Uri;import android.support.v8.renderscript.Allocation;import android.support.v8.renderscript.Element;import android.support.v8.renderscript.RenderScript;import android.support.v8.renderscript.ScriptIntrinsicBlur;import android.util.Log;import java.io.FileNotFoundException;import javax.microedition.khronos.egl.EGL10;import javax.microedition.khronos.egl.EGLConfig;import javax.microedition.khronos.egl.EGLContext;import javax.microedition.khronos.egl.EGLDisplay;/*** Various image utility methods*/public class ImageUtils {// Radius of the Blur. Supported range 0 < radius <= 25private static final float BLUR_RADIUS = 25f;public static Bitmap blur(Context context, Bitmap image) {if (null == image) return null;Bitmap outputBitmap = Bitmap.createBitmap(image);final RenderScript renderScript = RenderScript.create(context);Allocation tmpIn = Allocation.createFromBitmap(renderScript, image);Allocation tmpOut = Allocation.createFromBitmap(renderScript, outputBitmap);//Intrinsic Gausian blur filterScriptIntrinsicBlur theIntrinsic = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));theIntrinsic.setRadius(BLUR_RADIUS);theIntrinsic.setInput(tmpIn);theIntrinsic.forEach(tmpOut);tmpOut.copyTo(outputBitmap);return outputBitmap;}/*** Center-crops a bitmap* @param bitmap* @return*/public static Bitmap centerCropBitmap(Bitmap bitmap) {Bitmap output;if (bitmap.getWidth() == bitmap.getHeight()) {return bitmap;} else if (bitmap.getWidth() > bitmap.getHeight()) {output = Bitmap.createBitmap(bitmap,bitmap.getWidth() / 2 - bitmap.getHeight() / 2,0,bitmap.getHeight(),bitmap.getHeight());} else {output = Bitmap.createBitmap(bitmap,0,bitmap.getHeight() / 2 - bitmap.getWidth() / 2,bitmap.getWidth(),bitmap.getWidth());}return output;}/*** Creates a circular bitmap (taken from http://curious-blog.blogspot.com/2014/05/create-circle-bitmap-in-android.html)* @param bitmap* @return*/public static Bitmap getCircleBitmap(Bitmap bitmap) {final Bitmap output = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);final Canvas canvas = new Canvas(output);final int color = Color.RED;final Paint paint = new Paint();final Rect rect = new Rect(0, 0, output.getWidth(), output.getHeight());final RectF rectF = new RectF(rect);paint.setAntiAlias(true);canvas.drawARGB(0, 0, 0, 0);paint.setColor(color);canvas.drawOval(rectF, paint);paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));canvas.drawBitmap(bitmap, rect, rect, paint);return output;}public static Bitmap getRoundedCornerBitmap(Bitmap bitmap) {return getRoundedCornerBitmap(bitmap, 6);}public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, float round) {Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(), Bitmap.Config.ARGB_8888);Canvas canvas = new Canvas(output);final int color = 0xff424242;final Paint paint = new Paint();final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());final RectF rectF = new RectF(rect);final float roundPx = round;paint.setAntiAlias(true);canvas.drawARGB(0, 0, 0, 0);paint.setColor(color);canvas.drawRoundRect(rectF, roundPx, roundPx, paint);paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));canvas.drawBitmap(bitmap, rect, rect, paint);return output;}// Get max GL dimensions (width/height)// Taken from: http://stackoverflow.com/a/26823209/1233767private static void getMaxDimensions() {// Safe minimum default sizefinal int IMAGE_MAX_BITMAP_DIMENSION = 2048;if ((sMaxBitmapHeight > 0) && (sMaxBitmapWidth > 0)) {// Already calculated max height/width - no need to recalculatereturn;}// Get EGL DisplayEGL10 egl = (EGL10) EGLContext.getEGL();EGLDisplay display = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);// Initialiseint[] version = new int[2];egl.eglInitialize(display, version);// Query total number of configurationsint[] totalConfigurations = new int[1];egl.eglGetConfigs(display, null, 0, totalConfigurations);// Query actual list configurationsEGLConfig[] configurationsList = new EGLConfig[totalConfigurations[0]];egl.eglGetConfigs(display, configurationsList, totalConfigurations[0], totalConfigurations);int[] textureWidth = new int[1];int[] textureHeight = new int[1];int maximumTextureWidth = 0, maximumTextureHeight = 0;// Iterate through all the configurations to located the maximum texture sizefor (int i = 0; i < totalConfigurations[0]; i++) {egl.eglGetConfigAttrib(display, configurationsList[i], EGL10.EGL_MAX_PBUFFER_WIDTH, textureWidth);egl.eglGetConfigAttrib(display, configurationsList[i], EGL10.EGL_MAX_PBUFFER_HEIGHT, textureHeight);// Keep track of the maximum texture sizeif (maximumTextureWidth < textureWidth[0])maximumTextureWidth = textureWidth[0];if (maximumTextureHeight < textureHeight[0])maximumTextureHeight = textureHeight[0];}// Releaseegl.eglTerminate(display);// Return largest texture size found, or defaultsMaxBitmapWidth = Math.max(maximumTextureWidth, IMAGE_MAX_BITMAP_DIMENSION);sMaxBitmapHeight = Math.max(maximumTextureHeight, IMAGE_MAX_BITMAP_DIMENSION);}private static int sMaxBitmapHeight = 0, sMaxBitmapWidth = 0;// Scales down the bitmap only the bitmap is larger than GL limitspublic static Bitmap scaleDownBitmapIfNeeded(Context context, Bitmap photo) {getMaxDimensions();if (photo.getHeight() > sMaxBitmapHeight) {return scaleDownBitmap(context, photo, sMaxBitmapHeight, true);} else if (photo.getWidth() > sMaxBitmapWidth) {return scaleDownBitmap(context, photo, sMaxBitmapWidth, false);} else {// No problem - return as-isreturn photo;}}public static Bitmap scaleDownBitmap(Context context, Bitmap photo, int newDimension, boolean isHeight) {final float densityMultiplier = context.getResources().getDisplayMetrics().density;int h;int w;if (isHeight) {h = (int) (newDimension * densityMultiplier);w = (int) (h * photo.getWidth() / ((double) photo.getHeight()));} else {w = (int) (newDimension * densityMultiplier);h = (int) (w * photo.getHeight() / ((double) photo.getWidth()));}photo = Bitmap.createScaledBitmap(photo, w, h, true);return photo;}public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {// Raw height and width of imagefinal int height = options.outHeight;final int width = options.outWidth;int inSampleSize = 1;if (height > reqHeight || width > reqWidth) {final int halfHeight = height / 2;final int halfWidth = width / 2;// Calculate the largest inSampleSize value that is a power of 2 and keeps both// height and width larger than the requested height and width.while ((halfHeight / inSampleSize) > reqHeight&& (halfWidth / inSampleSize) > reqWidth) {inSampleSize *= 2;}}return inSampleSize * 4;}public static Bitmap decodeSampledBitmapFromUri(ContentResolver contentResolver, Uri uri, int reqWidth, int reqHeight) {// First decode with inJustDecodeBounds=true to check dimensionsfinal BitmapFactory.Options options = new BitmapFactory.Options();options.inJustDecodeBounds = true;try {BitmapFactory.decodeStream(contentResolver.openInputStream(uri), null, options);} catch (FileNotFoundException e) {e.printStackTrace();return null;}// Calculate inSampleSizeoptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);// Decode bitmap with inSampleSize setoptions.inJustDecodeBounds = false;// This decreases in-memory byte-storage per pixeloptions.inPreferredConfig = Bitmap.Config.ALPHA_8;try {return BitmapFactory.decodeStream(contentResolver.openInputStream(uri), null, options);} catch (FileNotFoundException e) {e.printStackTrace();return null;}}}",ImageUtils.java,0
200,"package org.inaturalist.android;import java.util.List;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;public class MyPageAdapter extends FragmentPagerAdapter {private List<Fragment> fragments;public MyPageAdapter(FragmentManager fm, List<Fragment> fragments) {super(fm);this.fragments = fragments;}@Overridepublic Fragment getItem(int position) {return this.fragments.get(position);}@Overridepublic int getCount() {return this.fragments.size();}}",MyPageAdapter.java,0
200,"package org.inaturalist.android;import java.util.HashMap;import java.util.Map;import org.inaturalist.android.INaturalistService.LoginType;import com.flurry.android.FlurryAgent;import android.app.Activity;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Bitmap;import android.net.Uri;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.util.Log;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.Window;import android.webkit.*;import android.widget.Button;import android.widget.TextView;public class WebActivity extends BaseFragmentActivity {private static String TAG = ""WebActivity"";private static String HOME_URL = ""http://%s/home.mobile"";private WebView mWebView;private INaturalistApp app;private ActivityHelper helper;private String mHomeUrl;private Button mLogin;private TextView mNotLoggedIn;private static final int REQUEST_CODE_LOGIN = 0x1000;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);requestWindowFeature(Window.FEATURE_PROGRESS);super.onCreate(savedInstanceState);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setIcon(android.R.color.transparent);app = (INaturalistApp) getApplicationContext();setContentView(R.layout.web);onDrawerCreate(savedInstanceState);helper = new ActivityHelper(this);mWebView = (WebView) findViewById(R.id.webview);mLogin = (Button) findViewById(R.id.login);mNotLoggedIn = (TextView) findViewById(R.id.not_logged_in);mLogin.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startActivityForResult(new Intent(WebActivity.this, OnboardingActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP), REQUEST_CODE_LOGIN);}});mLogin.setVisibility(View.GONE);mNotLoggedIn.setVisibility(View.GONE);String inatNetwork = app.getInaturalistNetworkMember();String inatHost = app.getStringResourceByName(""inat_host_"" + inatNetwork);mHomeUrl = String.format(HOME_URL, inatHost);mWebView.getSettings().setJavaScriptEnabled(true);final Activity activity = this;mWebView.setWebChromeClient(new WebChromeClient() {public void onProgressChanged(WebView view, int progress) {// Activities and WebViews measure progress with different scales.// The progress meter will automatically disappear when we reach 100%activity.setProgress(progress * 1000);}});mWebView.setWebViewClient(new WebViewClient() {public void onPageStarted(WebView view, String url, Bitmap favicon) {helper.loading();}public void onPageFinished(WebView view, String url) {helper.stopLoading();}public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {helper.stopLoading();helper.alert(String.format(getString(R.string.oh_no), description));}// TODO this works for get requests, but it doesn't intercept POSTs,// so it leads to some weird behavior. Apparently this has been a bug// since 2010, which is pretty disgusting:// https://code.google.com/p/android/issues/detail?id=9122public boolean shouldOverrideUrlLoading(WebView view, String url) {if (!app.loggedIn()) {return false;}mWebView.loadUrl(url, getAuthHeaders());return true;}});goHome();}@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) {if (event.getAction() == KeyEvent.ACTION_DOWN){switch (keyCode) {case KeyEvent.KEYCODE_BACK:if (mWebView.canGoBack() == true) {WebBackForwardList webBackForwardList = mWebView.copyBackForwardList();String historyUrl = webBackForwardList.getItemAtIndex(webBackForwardList.getCurrentIndex()-1).getUrl();// weird bug shows a blank page when just going back to the first url in historyif (historyUrl.equals(mHomeUrl)) {mWebView.clearHistory();goHome();} else {mWebView.goBack();}} else {finish();}return true;}}return super.onKeyDown(keyCode, event);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {MenuInflater inflater = getMenuInflater();inflater.inflate(R.menu.web_menu, menu);return super.onCreateOptionsMenu(menu);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case R.id.reload:if (mWebView != null) mWebView.reload();return true;case R.id.view:if (mWebView != null) {Intent i = new Intent(Intent.ACTION_VIEW);i.setData(Uri.parse(mWebView.getUrl() != null ? mWebView.getUrl() : mHomeUrl));startActivity(i);}return true;default:return super.onOptionsItemSelected(item);}}public HashMap<String,String> getAuthHeaders() {HashMap<String,String> headers = new HashMap<String,String>();if (!app.loggedIn()) {return headers;}if (app.getLoginType() == LoginType.PASSWORD) {headers.put(""Authorization"", ""Basic "" + app.getPrefs().getString(""credentials"", null));} else {headers.put(""Authorization"", ""Bearer "" + app.getPrefs().getString(""credentials"", null));}return headers;}public void goHome() {if (app.loggedIn()) {mLogin.setVisibility(View.GONE);mNotLoggedIn.setVisibility(View.GONE);mWebView.setVisibility(View.VISIBLE);mWebView.getSettings().setUserAgentString(INaturalistService.USER_AGENT);mWebView.loadUrl(mHomeUrl, getAuthHeaders());} else {mLogin.setVisibility(View.VISIBLE);mNotLoggedIn.setVisibility(View.VISIBLE);mWebView.setVisibility(View.GONE);}}@Overridepublic void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if ((requestCode == REQUEST_CODE_LOGIN) && (resultCode == Activity.RESULT_OK)) {// User logged-in - Refresh web viewmLogin.setVisibility(View.GONE);mNotLoggedIn.setVisibility(View.GONE);goHome();}}}",WebActivity.java,0
200,package org.inaturalist.android;import android.content.Context;import android.view.View;import android.widget.TabHost.TabContentFactory;public class MyTabFactory implements TabContentFactory {private final Context mContext;public MyTabFactory(Context context) {mContext = context;}public View createTabContent(String tag) {View v = new View(mContext);v.setMinimumWidth(0);v.setMinimumHeight(0);return v;}},MyTabFactory.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import java.util.List;import com.flurry.android.FlurryAgent;import android.annotation.SuppressLint;import android.content.Intent;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.support.v7.app.ActionBar;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.TabHost;import android.widget.TabHost.OnTabChangeListener;import android.widget.TabWidget;import android.widget.TextView;public class ProjectsActivity extends BaseFragmentActivity implements OnTabChangeListener, OnPageChangeListener {MyPageAdapter mPageAdapter;private ViewPager mViewPager;private TabHost mTabHost;private List<Fragment> mFragments;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overrideprotected void onCreate(Bundle savedInstanceState) {setTheme(R.style.NoActionBarShadowTheme);super.onCreate(savedInstanceState);setContentView(R.layout.projects);onDrawerCreate(savedInstanceState);getSupportActionBar().setElevation(0);mViewPager = (ViewPager) findViewById(R.id.viewpager);mViewPager.setOffscreenPageLimit(2);// Tab InitializationinitialiseTabHost();// Fragments and ViewPager Initializationif (savedInstanceState == null) {mFragments = getFragments();} else {mFragments = new ArrayList<Fragment>();mFragments.add(getSupportFragmentManager().getFragment(savedInstanceState, ""joined_projects""));mFragments.add(getSupportFragmentManager().getFragment(savedInstanceState, ""nearby_projects""));mFragments.add(getSupportFragmentManager().getFragment(savedInstanceState, ""featured_projects""));}mPageAdapter = new MyPageAdapter(getSupportFragmentManager(), mFragments);mViewPager.setAdapter(mPageAdapter);mViewPager.setOnPageChangeListener(this);}// Method to add a TabHostprivate static void AddTab(ProjectsActivity activity, TabHost tabHost, TabHost.TabSpec tabSpec) {tabSpec.setContent(new MyTabFactory(activity));tabHost.addTab(tabSpec);}private View createTabContent(int titleRes) {View view = LayoutInflater.from(this).inflate(R.layout.tab, null);TextView tabTitle = (TextView) view.findViewById(R.id.tab_title);tabTitle.setText(titleRes);return view;}// Manages the Tab changes, synchronizing it with Pagespublic void onTabChanged(String tag) {int pos = this.mTabHost.getCurrentTab();this.mViewPager.setCurrentItem(pos);refreshTabs(pos);}private void refreshTabs(int pos) {TabWidget tabWidget = mTabHost.getTabWidget();for (int i = 0; i < 3; i++) {tabWidget.getChildAt(i).findViewById(R.id.bottom_line).setVisibility(View.GONE);((TextView) tabWidget.getChildAt(i).findViewById(R.id.tab_title)).setTextColor(Color.parseColor(""#84000000""));}tabWidget.getChildAt(pos).findViewById(R.id.bottom_line).setVisibility(View.VISIBLE);((TextView)tabWidget.getChildAt(pos).findViewById(R.id.tab_title)).setTextColor(Color.parseColor(""#000000""));}@Overridepublic void onPageScrollStateChanged(int arg0) {}// Manages the Page changes, synchronizing it with Tabs@Overridepublic void onPageScrolled(int arg0, float arg1, int arg2) {int pos = this.mViewPager.getCurrentItem();this.mTabHost.setCurrentTab(pos);}@Overridepublic void onPageSelected(int arg0) {}private List<Fragment> getFragments(){List<Fragment> fList = new ArrayList<Fragment>();JoinedProjectsTab f1 = new JoinedProjectsTab();NearByProjectsTab f2 = new NearByProjectsTab();FeaturedProjectsTab f3 = new FeaturedProjectsTab();fList.add(f1);fList.add(f2);fList.add(f3);return fList;}// Tabs Creation@SuppressLint(""NewApi"")private void initialiseTabHost() {mTabHost = (TabHost) findViewById(android.R.id.tabhost);mTabHost.setup();ProjectsActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(""joined_projects"").setIndicator(createTabContent(R.string.joined_projects)));ProjectsActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(""nearby_projects"").setIndicator(createTabContent(R.string.nearby_projects)));ProjectsActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(""featured_projects"").setIndicator(createTabContent(R.string.featured_projects)));mTabHost.getTabWidget().setDividerDrawable(null);mTabHost.setOnTabChangedListener(this);refreshTabs(0);}@Overrideprotected void onSaveInstanceState(Bundle outState) {getSupportFragmentManager().putFragment(outState, ""joined_projects"", mFragments.get(0));getSupportFragmentManager().putFragment(outState, ""nearby_projects"", mFragments.get(1));getSupportFragmentManager().putFragment(outState, ""featured_projects"", mFragments.get(2));super.onSaveInstanceState(outState);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case R.id.search:Intent intent = new Intent(this, ItemSearchActivity.class);intent.putExtra(ItemSearchActivity.RESULT_VIEWER_ACTIVITY, ProjectDetails.class);intent.putExtra(ItemSearchActivity.RESULT_VIEWER_ACTIVITY_PARAM_NAME, ""project"");intent.putExtra(ItemSearchActivity.SEARCH_HINT_TEXT, BaseProjectsTab.getSearchFilterTextHint(this));intent.putExtra(ItemSearchActivity.SEARCH_URL, BaseProjectsTab.getSearchUrl((INaturalistApp) getApplicationContext()));startActivity(intent);return true;}return super.onOptionsItemSelected(item);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {getMenuInflater().inflate(R.menu.search_menu, menu);return true;}@Overridepublic void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if  (resultCode == ProjectDetails.RESULT_REFRESH_RESULTS) {// Refresh all projects resultfor (int i = 0; i < mFragments.size(); i++) {BaseTab tab = (BaseTab) mFragments.get(i);tab.refresh();}}}}",ProjectsActivity.java,0
200,"package org.inaturalist.android;import java.lang.reflect.Field;import android.annotation.SuppressLint;import android.content.Context;import android.os.Build;import android.util.AttributeSet;import android.widget.GridView;/** A GridView extension that supports getColumnWidth for pre-16 API */public class GridViewExtended extends GridView {public GridViewExtended(Context context, AttributeSet attrs, int defStyle) {super(context, attrs, defStyle);}public GridViewExtended(Context context, AttributeSet attrs) {super(context, attrs);}public GridViewExtended(Context context) {super(context);}@SuppressLint(""NewApi"")@Overridepublic int getColumnWidth() {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)return super.getColumnWidth();else {try {Field field = GridView.class.getDeclaredField(""mColumnWidth"");field.setAccessible(true);Integer value = (Integer) field.get(this);field.setAccessible(false);return value.intValue();} catch (NoSuchFieldException e) {throw new RuntimeException(e);} catch (IllegalAccessException e) {throw new RuntimeException(e);}}}}",GridViewExtended.java,0
200,"package org.inaturalist.android;import android.annotation.SuppressLint;import android.app.DatePickerDialog;import android.app.Dialog;import android.app.TimePickerDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.database.Cursor;import android.graphics.Typeface;import android.os.Bundle;import android.support.v4.app.DialogFragment;import android.support.v7.app.AppCompatActivity;import android.text.InputType;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TableRow;import android.widget.TextView;import android.widget.TimePicker;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import com.ptashek.widgets.datetimepicker.DateTimePicker;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.collections4.Predicate;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.Hashtable;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Random;public class ProjectFieldViewer {private static final String TAG = ""ProjectFieldViewer"";public static final int PROJECT_FIELD_TAXON_SEARCH_REQUEST_CODE = 301;private final boolean mIsConfirmation;private AppCompatActivity mContext;private ProjectField mField;private ProjectFieldValue mFieldValue;private int mTaxonId = -1;// UI elementsprivate TextView mFieldName;private EditText mEditText;private Spinner mSpinner;private RelativeLayout mDateContainer;private ImageView mSetDate;private TextView mDate;private RelativeLayout mTaxonContainer;private ImageView mTaxonPic;private TextView mIdName;private TextView mIdTaxonName;private ArrayAdapter<String> mSpinnerAdapter;private TaxonReceiver mTaxonReceiver;private TextView mFieldDescription;private FocusedListener mFocusedListener;private boolean mIsFocusing;@SuppressLint(""ValidFragment"")private class TimePickerFragment extends DialogFragment implements TimePickerDialog.OnTimeSetListener {private boolean mIsCanceled;private int mHour, mMinute;@Overridepublic Dialog onCreateDialog(Bundle savedInstanceState) {String currentHour = mDate.getText().toString();Calendar c;mIsCanceled = false;if (currentHour.equals("""")) {// Use the current hour as the default hour in the pickerc = Calendar.getInstance();} else {Date date;c = Calendar.getInstance();c.set(Calendar.HOUR_OF_DAY, Integer.valueOf(currentHour.split("":"")[0]));c.set(Calendar.MINUTE, Integer.valueOf(currentHour.split("":"")[1]));}int hour = c.get(Calendar.HOUR_OF_DAY);int minute = c.get(Calendar.MINUTE);// Create a new instance of TimePickerDialog and return itTimePickerDialog dialog = new TimePickerDialog(getActivity(), this, hour, minute, true);dialog.setOnCancelListener(this);dialog.setOnDismissListener(this);return dialog;}public void onCancel(DialogInterface dialog) {mIsCanceled = true;}public void onDismiss(DialogInterface dialog) {if (!mIsCanceled) {mDate.setText(String.format(""%02d:%02d"", mHour, mMinute));}dismiss();}@Overridepublic void onTimeSet(TimePicker view, int hour, int minute) {mHour = hour;mMinute = minute;}}@SuppressLint(""ValidFragment"")private class DatePickerFragment extends DialogFragment implements DatePickerDialog.OnDateSetListener {private boolean mIsCanceled;private int mYear, mMonth, mDay;@Overridepublic Dialog onCreateDialog(Bundle savedInstanceState) {String currentDate = mDate.getText().toString();Calendar c;mIsCanceled = false;if (currentDate.equals("""")) {// Use the current date as the default date in the pickerc = Calendar.getInstance();} else {Date date;c = Calendar.getInstance();try {date = new SimpleDateFormat(""yyyy-MM-dd"").parse(currentDate);c.setTime(date);} catch (ParseException e) {e.printStackTrace();}}int year = c.get(Calendar.YEAR);int month = c.get(Calendar.MONTH);int day = c.get(Calendar.DAY_OF_MONTH);// Create a new instance of DatePickerDialog and return itDatePickerDialog dialog = new DatePickerDialog(getActivity(), this, year, month, day);dialog.setOnCancelListener(this);dialog.setOnDismissListener(this);return dialog;}public void onCancel(DialogInterface dialog) {mIsCanceled = true;}public void onDismiss(DialogInterface dialog) {if (!mIsCanceled) {mDate.setText(String.format(""%d-%02d-%02d"", mYear, mMonth + 1, mDay));}dismiss();}public void onDateSet(DatePicker view, int year, int month, int day) {mYear = year;mMonth = month;mDay = day;}}private class TaxonReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {mContext.unregisterReceiver(mTaxonReceiver);BetterJSONObject taxon = (BetterJSONObject) intent.getSerializableExtra(INaturalistService.TAXON_RESULT);if (taxon == null) {return;}int taxonId = taxon.getInt(""id"");if (taxonId != mTaxonId) {// Result was not from out taxonreturn;}UrlImageViewHelper.setUrlDrawable(mTaxonPic, taxon.getString(""image_url""));mIdName.setText(taxon.getString(""unique_name""));mIdTaxonName.setText(taxon.getString(""name""));mIdTaxonName.setTypeface(null, Typeface.ITALIC);String idNameString = getTaxonName(taxon.getJSONObject());if (idNameString != null) {mIdName.setText(idNameString);mIdTaxonName.setText(taxon.getJSONObject().optString(""name"", """"));} else {mIdName.setText(taxon.getJSONObject().optString(""name"", mContext.getResources().getString(R.string.unknown)));mIdTaxonName.setText("""");mIdName.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.ITALIC));}}}// Utility function for retrieving the Taxon's nameprivate String getTaxonName(JSONObject item) {JSONObject defaultName;String displayName = null;// Get the taxon display name according to configuration of the current iNat networkString inatNetwork = ((INaturalistApp)mContext.getApplication()).getInaturalistNetworkMember();String networkLexicon = ((INaturalistApp)mContext.getApplication()).getStringResourceByName(""inat_lexicon_"" + inatNetwork);try {JSONArray taxonNames = item.getJSONArray(""taxon_names"");for (int i = 0; i < taxonNames.length(); i++) {JSONObject taxonName = taxonNames.getJSONObject(i);String lexicon = taxonName.getString(""lexicon"");if (lexicon.equals(networkLexicon)) {// Found the appropriate lexicon for the taxondisplayName = taxonName.getString(""name"");break;}}} catch (JSONException e3) {e3.printStackTrace();}if (displayName == null) {// Couldn't extract the display name from the taxon names list - use the default onetry {displayName = item.getString(""unique_name"");} catch (JSONException e2) {displayName = null;}try {defaultName = item.getJSONObject(""default_name"");displayName = defaultName.getString(""name"");} catch (JSONException e1) {// alasJSONObject commonName = item.optJSONObject(""common_name"");if (commonName != null) {displayName = commonName.optString(""name"");} else {displayName = item.optString(""name"");}}}return displayName;}public ProjectFieldViewer(AppCompatActivity context, ProjectField field, ProjectFieldValue fieldValue, boolean isConfirmation) {mField = field;mFieldValue = fieldValue;mContext = context;mIsConfirmation = isConfirmation;if (mFieldValue == null) {mFieldValue = new ProjectFieldValue();}if (mFieldValue.value == null) {mFieldValue.value = """";}}public ProjectField getField() {return mField;}public String getValue() {if ((mField.data_type.equals(""text"")) && (mField.allowed_values != null) && (!mField.allowed_values.equals(""""))) {return (String) mSpinner.getSelectedItem();} else if (mField.data_type.equals(""text"")) {return mEditText.getText().toString();} else if (mField.data_type.equals(""numeric"")) {String val = mEditText.getText().toString();return (val.equals("""") ? null : val);} else if (mField.data_type.equals(""date"")) {String dateString = mDate.getText().toString();if (dateString.equals("""")) return null;return dateString;} else if (mField.data_type.equals(""time"")) {String dateString = mDate.getText().toString();if (dateString.equals("""")) return null;return dateString;} else if (mField.data_type.equals(""datetime"")) {String dateString = mDate.getText().toString();if (dateString.equals("""")) return null;try {Date date = new SimpleDateFormat(""yyyy-MM-dd HH:mm"").parse(dateString);// Return a ISO8601 date stringString formatted = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").format(date);return formatted.substring(0, 22) + "":"" + formatted.substring(22);} catch (ParseException e) {e.printStackTrace();return null;}} else if (mField.data_type.equals(""taxon"")) {if (mTaxonId == -1) return null;return String.valueOf(mTaxonId);} else {return null;}}public Boolean isValid() {if (mField.is_required) {String value = getValue();if (value == null || value.equals("""")) {// Mandatory fieldreturn false;}}if ((mField.data_type.equals(""numeric"")) && (!mEditText.getText().toString().equals(""""))) {try {float value = Float.valueOf(mEditText.getText().toString());} catch (Exception exc) {// Invalid numberreturn false;}}return true;}public void onTaxonSearchResult(Intent data) {int taxonId = data.getIntExtra(TaxonSearchActivity.TAXON_ID, 0);String taxonName = data.getStringExtra(TaxonSearchActivity.TAXON_NAME);String idName = data.getStringExtra(TaxonSearchActivity.ID_NAME);String idImageUrl = data.getStringExtra(TaxonSearchActivity.ID_PIC_URL);int fieldId = data.getIntExtra(TaxonSearchActivity.FIELD_ID, 0);if ((fieldId != mField.field_id.intValue()) || (!mField.data_type.equals(""taxon""))) {// Not our fieldreturn;}mTaxonId = taxonId;UrlImageViewHelper.setUrlDrawable(mTaxonPic, idImageUrl);mIdName.setText(idName);mIdTaxonName.setText(taxonName);mIdTaxonName.setTypeface(null, Typeface.ITALIC);}public void setFocus() {if (mEditText.getVisibility() == View.VISIBLE) {mIsFocusing = true;mEditText.requestFocus();mEditText.setSelection(mEditText.getText().length());}}public interface FocusedListener {void onFocused();}public void setOnFocusedListener(FocusedListener listener) {mFocusedListener = listener;}public View getView() {ViewGroup row = (ViewGroup) LayoutInflater.from(mContext).inflate(mIsConfirmation ? R.layout.project_field_confirmation : R.layout.project_field, null);row.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT));mFieldName = (TextView) row.findViewById(R.id.field_name);mFieldDescription = (TextView) row.findViewById(R.id.field_description);mEditText = (EditText) row.findViewById(R.id.edit_text);mEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {@Overridepublic void onFocusChange(View view, boolean focused) {if (focused) {if (mFocusedListener != null) {if (mIsFocusing) {mIsFocusing = false;} else {mFocusedListener.onFocused();}}}}});mSpinner = (Spinner) row.findViewById(R.id.spinner);mDateContainer = (RelativeLayout) row.findViewById(R.id.date_container);mSetDate = (ImageView) row.findViewById(R.id.set_date);mDate = (TextView) row.findViewById(R.id.date);mTaxonContainer = (RelativeLayout) row.findViewById(R.id.taxon_container);mTaxonPic = (ImageView) row.findViewById(R.id.taxon_pic);mIdName = (TextView) row.findViewById(R.id.id_name);mIdTaxonName = (TextView) row.findViewById(R.id.id_taxon_name);mIdTaxonName.setTypeface(null, Typeface.ITALIC);mFieldName.setText(mField.name);mFieldDescription.setText(mField.description);if ((mField.description == null) || (mField.description.length() == 0)) {mFieldDescription.setVisibility(View.GONE);} else {mFieldDescription.setVisibility(View.VISIBLE);}if (mField.is_required) {mFieldName.setTypeface(null, Typeface.BOLD);if (mIsConfirmation) {mFieldName.setText(mFieldName.getText() + "" *"");}}if ((mField.data_type.equals(""text"")) && (mField.allowed_values != null) && (!mField.allowed_values.equals(""""))) {mSpinner.setVisibility(View.VISIBLE);String[] allowedValues = mField.allowed_values.split(""\\|"");mSpinnerAdapter = new ArrayAdapter<String>(mContext, android.R.layout.simple_spinner_item, android.R.id.text1, allowedValues);mSpinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);mSpinner.setAdapter(mSpinnerAdapter);int position = mSpinnerAdapter.getPosition(mFieldValue.value);if (position != -1) {mSpinner.setSelection(position);}} else if (mField.data_type.equals(""text"")) {mEditText.setVisibility(View.VISIBLE);mEditText.setText(mFieldValue.value);} else if (mField.data_type.equals(""numeric"")) {mEditText.setVisibility(View.VISIBLE);mEditText.setText(mFieldValue.value);mEditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_CLASS_NUMBER);} else if (mField.data_type.equals(""date"")) {mDateContainer.setVisibility(View.VISIBLE);if (!mFieldValue.value.equals("""")) {mDate.setText(formatDate(mFieldValue.value));} else {mDate.setText("""");}mDateContainer.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {DialogFragment newFragment = new DatePickerFragment();newFragment.show(mContext.getSupportFragmentManager(), ""datePicker"");}});} else if (mField.data_type.equals(""time"")) {mDateContainer.setVisibility(View.VISIBLE);mDate.setText(mFieldValue.value);mSetDate.setImageResource(R.drawable.ic_action_time);mDateContainer.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {DialogFragment newFragment = new TimePickerFragment();newFragment.show(mContext.getSupportFragmentManager(), ""timePicker"");}});} else if (mField.data_type.equals(""datetime"")) {mDateContainer.setVisibility(View.VISIBLE);// date time = 2013-11-14T13:23:37+00:00if (!mFieldValue.value.equals("""")) {mDate.setText(formatDateTime(mFieldValue.value));} else {mDate.setText("""");}mDateContainer.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {showDateTimeDialog();}});} else if (mField.data_type.equals(""taxon"")) {mTaxonContainer.setVisibility(View.VISIBLE);if (mTaxonId == -1) {mTaxonId = (mFieldValue.value.equals("""") ? -1 : Integer.valueOf(mFieldValue.value));}if (mTaxonId != -1) {// Get the taxon detailsmTaxonReceiver = new TaxonReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_GET_TAXON_RESULT);Log.i(TAG, ""Registering ACTION_GET_TAXON_RESULT"");mContext.registerReceiver(mTaxonReceiver, filter);Intent serviceIntent = new Intent(INaturalistService.ACTION_GET_TAXON, null, mContext, INaturalistService.class);serviceIntent.putExtra(INaturalistService.TAXON_ID, mTaxonId);mContext.startService(serviceIntent);} else {mIdName.setText("""");mIdTaxonName.setText("""");}mTaxonContainer.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(mContext, TaxonSearchActivity.class);intent.putExtra(TaxonSearchActivity.FIELD_ID, mField.field_id);mContext.startActivityForResult(intent, PROJECT_FIELD_TAXON_SEARCH_REQUEST_CODE);}});}return row;}private void showDateTimeDialog() {// Create the dialogfinal Dialog mDateTimeDialog = new Dialog(mContext);// Inflate the root layoutfinal RelativeLayout mDateTimeDialogView = (RelativeLayout) mContext.getLayoutInflater().inflate(R.layout.date_time_dialog, null);// Grab widget instancefinal DateTimePicker mDateTimePicker = (DateTimePicker) mDateTimeDialogView.findViewById(R.id.DateTimePicker);// When the ""OK"" button is clicked((Button) mDateTimeDialogView.findViewById(R.id.SetDateTime)).setOnClickListener(new View.OnClickListener() {public void onClick(View v) {mDateTimePicker.clearFocus();Date selectedTime = mDateTimePicker.getDate();String formatted = new SimpleDateFormat(""yyyy-MM-dd HH:mm"").format(selectedTime);mDate.setText(formatted);mDateTimeDialog.dismiss();}});// Cancel the dialog when the ""Cancel"" button is clicked((Button) mDateTimeDialogView.findViewById(R.id.CancelDialog)).setOnClickListener(new View.OnClickListener() {public void onClick(View v) {mDateTimeDialog.cancel();}});// Reset Date and Time pickers when the ""Reset"" button is clicked((Button) mDateTimeDialogView.findViewById(R.id.ResetDateTime)).setOnClickListener(new View.OnClickListener() {public void onClick(View v) {mDateTimePicker.reset();}});// Setup TimePickermDateTimePicker.setIs24HourView(true);// No title on the dialog windowmDateTimeDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);// Set the dialog content viewmDateTimeDialog.setContentView(mDateTimeDialogView);String dateValue = mDate.getText().toString();if (!dateValue.equals("""")) {try {Date date = new SimpleDateFormat(""yyyy-MM-dd HH:mm"").parse(dateValue);mDateTimePicker.updateDate(date.getYear() + 1900, date.getMonth(), date.getDate());mDateTimePicker.updateTime(date.getHours(), date.getMinutes());} catch (ParseException e) {e.printStackTrace();}}// Display the dialogmDateTimeDialog.show();}private Date valueToDateTime(String value) {Calendar calendar = GregorianCalendar.getInstance();String s = value.replace(""Z"", ""+00:00"");try {s = s.substring(0, 22) + s.substring(23);} catch (IndexOutOfBoundsException e) {e.printStackTrace();return null;}Date date;try {date = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").parse(s);} catch (ParseException e) {e.printStackTrace();return null;}calendar.setTime(date);return calendar.getTime();}private Date valueToDate(String value) {Calendar calendar = GregorianCalendar.getInstance();Date date;try {date = new SimpleDateFormat(""yyyy-MM-dd"").parse(value);} catch (ParseException e) {e.printStackTrace();return null;}calendar.setTime(date);return calendar.getTime();}private String formatDate(String value) {Date date = valueToDate(value);String formatted = new SimpleDateFormat(""yyyy-MM-dd"").format(date);return formatted;}private String formatDateTime(String value) {Date date = valueToDateTime(value);String formatted = new SimpleDateFormat(""yyyy-MM-dd HH:mm"").format(date);return formatted;}//// Utility methods to be used by several activies (for displaying and retrieving project fields)//// Returns all fields and field values for a specific observationpublic interface ProjectFieldsResults {void onProjectFieldsResults(Hashtable<Integer, ProjectField> projectFields, HashMap<Integer, ProjectFieldValue> projectValues);}public static void getProjectFields(Context context, List<Integer> projectIds, int obsId, ProjectFieldsResults resultsCallback) {Hashtable<Integer, ProjectField> projectFields = new Hashtable<Integer, ProjectField>();HashMap<Integer, ProjectFieldValue> projectFieldValues = new HashMap<Integer, ProjectFieldValue>();// Get project fieldsfor (int projectId : projectIds) {Cursor c = context.getContentResolver().query(ProjectField.CONTENT_URI, ProjectField.PROJECTION,""(project_id = "" + projectId + "")"",null, ProjectField.DEFAULT_SORT_ORDER);c.moveToFirst();while (c.isAfterLast() == false) {ProjectField projectField = new ProjectField(c);projectFields.put(projectField.field_id, projectField);c.moveToNext();}c.close();}// Get project field valuesCursor c = context.getContentResolver().query(ProjectFieldValue.CONTENT_URI, ProjectFieldValue.PROJECTION,""(observation_id = "" + obsId + "")"",null, ProjectFieldValue.DEFAULT_SORT_ORDER);c.moveToFirst();while (c.isAfterLast() == false) {ProjectFieldValue fieldValue = new ProjectFieldValue(c);projectFieldValues.put(fieldValue.field_id, fieldValue);if (!projectFields.containsKey(fieldValue.field_id)) {// It's a custom non-project fieldCursor c2 = context.getContentResolver().query(ProjectField.CONTENT_URI, ProjectField.PROJECTION,""(field_id = "" + fieldValue.field_id + "")"", null, ProjectField.DEFAULT_SORT_ORDER);c2.moveToFirst();if (!c2.isAfterLast()) {ProjectField field = new ProjectField(c2);projectFields.put(fieldValue.field_id, field);}c2.close();}c.moveToNext();}c.close();resultsCallback.onProjectFieldsResults(projectFields, projectFieldValues);}// Returns a sorted field list for a specific projectpublic static List<ProjectField> sortProjectFields(final int projectId, Hashtable<Integer, ProjectField> projectFields) {ArrayList<Map.Entry<Integer, ProjectField>> fields = new ArrayList(projectFields.entrySet());// Filter by project IDCollectionUtils.filter(fields, new Predicate<Map.Entry<Integer, ProjectField>>() {@Overridepublic boolean evaluate(Map.Entry<Integer, ProjectField> object) {ProjectField field = object.getValue();return (field.project_id != null) && (field.project_id == projectId);}});// Then sort by positionCollections.sort(fields, new Comparator<Map.Entry<Integer, ProjectField>>() {@Overridepublic int compare(Map.Entry<Integer, ProjectField> lhs, Map.Entry<Integer, ProjectField> rhs) {ProjectField field1 = lhs.getValue();ProjectField field2 = rhs.getValue();Integer projectId1 = (field1.project_id != null ? field1.project_id : Integer.valueOf(-1));Integer projectId2 = (field2.project_id != null ? field2.project_id : Integer.valueOf(-1));if (projectId1.equals(projectId2)) {// Same project - sort by positionInteger position1 = (field1.position != null ? field1.position : Integer.valueOf(0));Integer position2 = (field2.position != null ? field2.position : Integer.valueOf(0));return position1.compareTo(position2);} else {// Group fields together in the same projectreturn projectId1.compareTo(projectId2);}}});Iterator<Map.Entry<Integer, ProjectField>> iterator = fields.iterator();List<ProjectField> resultProjectFields = new ArrayList<ProjectField>();while (iterator.hasNext()) {ProjectField field = iterator.next().getValue();resultProjectFields.add(field);}return resultProjectFields;}}",ProjectFieldViewer.java,0
200,"package org.inaturalist.android;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Set;import android.app.Activity;import android.app.AlertDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.res.Configuration;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.support.v4.app.NavUtils;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBar;import android.text.Editable;import android.text.Html;import android.text.TextWatcher;import android.text.method.LinkMovementMethod;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckBox;import android.widget.EditText;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.support.v7.app.AppCompatActivity;public class GuideDetails extends AppCompatActivity implements INaturalistApp.OnDownloadFileProgress {private static final String TAG = ""GuideDetails"";private static final double MAX_TAXA = 100; // Max number of taxa to show in the gridprivate INaturalistApp mApp;private BetterJSONObject mGuide;private GuideXML mGuideXml;private String mGuideXmlFilename;private ProgressBar mProgress;private GridViewExtended mGuideTaxaGrid;private TextView mTaxaEmpty;private GuideTaxaReceiver mTaxaGuideReceiver;private EditText mSearchText;private GuideTaxonFilter mFilter;private TaxaListAdapter mAdapter;private List<GuideTaxonXML> mTaxa;private DrawerLayout mDrawerLayout;private View mGuideMenu;private ListView mGuideMenuList;private GuideMenuListAdapter mGuideMenuListAdapter;private Handler mHandler;private Runnable mTypingTask;private TextView mDownloadTitle;private TextView mDownloadSubtitle;private View mDownloadGuide;private View mDownloadingGuide;private ProgressBar mDownloadingProgress;private boolean mIsDownloading;private ImageView mDownloadGuideImage;private TextView mDescription;private TextView mEditorName;private TextView mLicense;private int mDownloadProgress;private TextView mDownloadingSubtitle;private ActivityHelper mHelper;private Button mRecommendedNextStep;private List<GuideTaxonXML> mCurrentTaxaResults;private List<GuideMenuItem> mSideMenuItems;private String mRecommendedPrediate;private ImageButton mReset;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);if (mTypingTask != null) mHandler.removeCallbacks(mTypingTask);}private class TaxaListAdapter extends ArrayAdapter<GuideTaxonXML> {private List<GuideTaxonXML> mItems;private Context mContext;public TaxaListAdapter(Context context, List<GuideTaxonXML> objects) {super(context, R.layout.guide_taxon_item, objects);mItems = objects;mContext = context;}@Overridepublic int getCount() {return mItems.size();}@Overridepublic GuideTaxonXML getItem(int index) {return mItems.get(index);}// Gets the photo location (local/remote) - tries a specific size, and if not found,// tries the next best size until something is foundprivate String getPhotoLocation(GuideTaxonPhotoXML photo, GuideTaxonPhotoXML.PhotoType photoType) {final GuideTaxonPhotoXML.PhotoSize[] DEFAULT_SIZES = {GuideTaxonPhotoXML.PhotoSize.THUMBNAIL,GuideTaxonPhotoXML.PhotoSize.SMALL,GuideTaxonPhotoXML.PhotoSize.MEDIUM,GuideTaxonPhotoXML.PhotoSize.LARGE};String photoLocation = null;for (GuideTaxonPhotoXML.PhotoSize size : DEFAULT_SIZES) {photoLocation = photo.getPhotoLocation(photoType, size);// See if we found a photo for current size - if not, try the next best sizeif ((photoLocation != null) && (photoLocation.length() > 0)) break;}return photoLocation;}@Overridepublic View getView(int position, View convertView, ViewGroup parent) {View view;if (convertView == null) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);view = inflater.inflate(R.layout.guide_taxon_item, parent, false);} else {view = convertView;}GuideTaxonXML item = mItems.get(position);TextView idName = (TextView) view.findViewById(R.id.id_name);String name = item.getDisplayName();if ((name == null) || (name.length() == 0)) name = item.getName();idName.setText(name);ImageView taxonPic = (ImageView) view.findViewById(R.id.taxon_pic);taxonPic.setLayoutParams(new RelativeLayout.LayoutParams(mGuideTaxaGrid.getColumnWidth(),mGuideTaxaGrid.getColumnWidth()));List<GuideTaxonPhotoXML> photos = item.getPhotos();if (photos.size() == 0) {// No photos - use default imagetaxonPic.setImageResource(R.drawable.iconic_taxon_unknown);} else {if (mGuideXml.isGuideDownloaded()) {// Use offline photoString photoPath = getPhotoLocation(photos.get(0), GuideTaxonPhotoXML.PhotoType.LOCAL);Bitmap bitmap = BitmapFactory.decodeFile(photoPath);taxonPic.setImageBitmap(bitmap);} else {// Use online photoString url = getPhotoLocation(photos.get(0), GuideTaxonPhotoXML.PhotoType.REMOTE);UrlImageViewHelper.setUrlDrawable(taxonPic,url,R.drawable.iconic_taxon_unknown,new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url,boolean loadedFromCache) {imageView.setLayoutParams(new RelativeLayout.LayoutParams(mGuideTaxaGrid.getColumnWidth(),mGuideTaxaGrid.getColumnWidth()));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// No post-processing of bitmapreturn loadedBitmap;}});}}view.setTag(item);return view;}}private class GuideTaxaReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {unregisterReceiver(mTaxaGuideReceiver);mGuideXmlFilename = intent.getStringExtra(INaturalistService.GUIDE_XML_RESULT);if (mGuideXmlFilename == null) {mHelper.confirm(R.string.error, R.string.could_not_retrieve_guide, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {dialogInterface.cancel();}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {dialogInterface.cancel();}});mProgress.setVisibility(View.GONE);return;}mGuideXml = new GuideXML(GuideDetails.this, mGuide.getInt(""id"").toString(), mGuideXmlFilename);mTaxa = new ArrayList<GuideTaxonXML>();mAdapter = new TaxaListAdapter(GuideDetails.this, mTaxa);updateTaxaByFilter();mProgress.setVisibility(View.GONE);updateSideMenu();}}private void updateSideMenu() {if (mGuideXml == null) return;Map<String, Set<String>> tags = mGuideXml.getAllTags();if (tags == null) return;// Build the guide side menu// Build the tags and predicates (section header)List<GuideMenuItem> sideMenuItems = new ArrayList<GuideMenuItem>();Map<String, Integer> tagCounts = mGuideXml.getTagCounts();for (String sectionName : tags.keySet()) {sideMenuItems.add(new GuideMenuSection(sectionName));Set<String> currentTags = tags.get(sectionName);for (String tagName : currentTags) {String tagTitle = tagName;String[] parts = tagName.split(""="", 2);if (parts.length > 1) {// For display purposes, show only the tag valuetagTitle = parts[1];}sideMenuItems.add(new GuideMenuTag(tagTitle, tagName, tagCounts.get(tagName)));}}mSideMenuItems = sideMenuItems;mGuideMenuListAdapter = new GuideMenuListAdapter(GuideDetails.this, mFilter, sideMenuItems);mGuideMenuList.setAdapter(mGuideMenuListAdapter);refreshGuideSideMenu();}private void refreshGuideSideMenu() {// Prepare the footer of the guide side menu (description, license, etc.)mDownloadingGuide.setVisibility(View.GONE);mDownloadGuide.setVisibility(View.VISIBLE);if (mGuideXml == null) return;mDescription.setText(Html.fromHtml(mGuideXml.getDescription()));mDescription.setMovementMethod(LinkMovementMethod.getInstance());mEditorName.setText(mGuideXml.getCompiler());mLicense.setText(GuideXML.licenseToText(this, mGuideXml.getLicense()));View.OnClickListener showUser = new View.OnClickListener() {@Overridepublic void onClick(View view) {BetterJSONObject userObj = new BetterJSONObject();userObj.put(""login"", mGuideXml.getCompiler());Intent intent = new Intent(GuideDetails.this, UserProfile.class);intent.putExtra(""user"", userObj);startActivity(intent);}};mEditorName.setOnClickListener(showUser);if (mIsDownloading) {// Currently downloading guidemDownloadingGuide.setVisibility(View.VISIBLE);mDownloadingSubtitle.setText(R.string.downloading);mDownloadGuide.setVisibility(View.GONE);updateDownloadProgress(mDownloadProgress);} else if (mGuideXml.isGuideDownloaded()) {// Guide was already downloadedmDownloadTitle.setText(R.string.downloaded);SimpleDateFormat  formatter = new SimpleDateFormat();mDownloadSubtitle.setText(formatter.format(mGuideXml.getDownloadedGuideDate()));mDownloadGuideImage.setImageResource(R.drawable.ic_fa_check);mDownloadGuide.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {showEditDownloadDialog();}});} else if (!mGuideXml.isOfflineGuideAvailable()) {// Download not availablemDownloadTitle.setText(R.string.download_not_available);mDownloadSubtitle.setText(R.string.guide_editor_must_enable_this_feature);mDownloadGuideImage.setImageResource(R.drawable.ic_action_download);} else {// Download is availablemDownloadTitle.setText(R.string.download_for_offline_use);mDownloadSubtitle.setText(mGuideXml.getNgzFileSize());mDownloadGuideImage.setImageResource(R.drawable.ic_action_download);mDownloadGuide.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {mHelper.confirm(R.string.are_you_sure, String.format(getString(R.string.download_guide_alert), mGuideXml.getNgzFileSize()), new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {if (!isLoggedIn()) {// User not logged-in - redirect to onboarding screenstartActivity(new Intent(GuideDetails.this, OnboardingActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));return;}downloadGuide();}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {dialogInterface.cancel();}});}});}if ((mGuideXml.getAllTags() == null) || (mGuideXml.getAllTags().size() == 0)) {// No tags for this guide - no need to show the reset / next recommended step buttonsView topBar = (View) findViewById(R.id.top_side_menu_bar);topBar.setVisibility(View.GONE);}}private void showEditDownloadDialog() {AlertDialog.Builder builder = new AlertDialog.Builder(this);// Set the adapterString[] items = {getResources().getString(R.string.delete_download),getResources().getString(R.string.re_download),getResources().getString(R.string.cancel)};builder.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1, items), null);final AlertDialog alertDialog = builder.create();ListView listView = alertDialog.getListView();listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {alertDialog.dismiss();if (position == 0) {// Delete downloadmGuideXml.deleteOfflineGuide();refreshGuideSideMenu();} else if (position == 1) {// Re-downloadmGuideXml.deleteOfflineGuide();downloadGuide();} else {// Cancel}}});alertDialog.show();}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}private void showDownloadGuideError() {mIsDownloading = false;mDownloadProgress = 0;runOnUiThread(new Runnable() {@Overridepublic void run() {mHelper.alert(R.string.failed_to_download_guide, R.string.internet_connection_seems_to_be_offline);mGuideXml.deleteOfflineGuide();refreshGuideSideMenu();}});}private void updateDownloadProgress(int progress) {mDownloadProgress = progress;mDownloadingProgress.setProgress(progress);}private void downloadGuide() {if (!isNetworkAvailable()) {showDownloadGuideError();return;}mDownloadingGuide.setVisibility(View.VISIBLE);mDownloadGuide.setVisibility(View.GONE);mIsDownloading = true;updateDownloadProgress(0);// Download guide as a background taskmApp.downloadFile(mGuideXml.getNgzURL(), this);}@Overridepublic boolean onDownloadProgress(long downloaded, long total, String downloadedFilename) {final int progress = (int)((((float)downloaded) / total) * 100);runOnUiThread(new Runnable() {@Overridepublic void run() {// Update progressupdateDownloadProgress(progress);}});if (downloaded == total) {// Download complete// Extract the downloaded compressed guide filerunOnUiThread(new Runnable() {@Overridepublic void run() {mDownloadingSubtitle.setText(R.string.extracting);}});boolean status = mGuideXml.extractOfflineGuide(downloadedFilename);if (!status) {showDownloadGuideError();return true;}mIsDownloading = false;runOnUiThread(new Runnable() {@Overridepublic void run() {refreshGuideSideMenu();}});}return true;}@Overridepublic void onDownloadError() {showDownloadGuideError();}// Represents a list item in the guide menu (header/item)private interface GuideMenuItem {public boolean isSectionHeader();public String getText();}private class GuideMenuSection implements  GuideMenuItem {private final String mTitle;public GuideMenuSection(String title) {mTitle = title;}public boolean isSectionHeader() {return true;}public String getText() {return mTitle;}}private class GuideMenuTag implements  GuideMenuItem {private final String mTitle;private final String mValue;private final int mCount;public GuideMenuTag(String title, String value, int count) {mTitle = title;mCount = count;mValue = value;}public boolean isSectionHeader() {return false;}public String getText() {return mTitle;}public int getCount() {return mCount;}public String getValue() {return mValue;}}private class GuideMenuListAdapter extends ArrayAdapter<GuideMenuItem> {private List<GuideMenuItem> mItems;private Context mContext;private GuideTaxonFilter mFilter;public GuideMenuListAdapter(Context context, GuideTaxonFilter filter, List<GuideMenuItem>items) {super(context, R.layout.guide_menu_tag, items);mContext = context;mFilter = filter;mItems = items;}@Overridepublic int getCount() {return mItems.size();}@Overridepublic GuideMenuItem getItem(int index) {return mItems.get(index);}@Overridepublic View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);GuideMenuItem item = mItems.get(position);View view;TextView title;String itemText = item.getText();if (item.isSectionHeader()) {// Header sectionview = inflater.inflate(R.layout.guide_menu_header, parent, false);title = (TextView) view.findViewById(R.id.title);if ((mRecommendedPrediate != null) && (itemText.equals(mRecommendedPrediate))) {// Current predicate is the recommended oneview.setBackgroundResource(R.color.inatapptheme_color);} else {List<String> tags = mFilter.getAllTags();for (String tag: tags) {String[] values = tag.split(""="", 2);if (values[0].equals(itemText)) {// Current predicate has checked on tags - highlight it in greenview.setBackgroundColor(Color.parseColor(""#FF2D5228""));break;}}}} else {// Tag list itemGuideMenuTag guideMenuTag = (GuideMenuTag)item;view = inflater.inflate(R.layout.guide_menu_tag, parent, false);title = (TextView) view.findViewById(R.id.tagName);TextView tagCount = (TextView) view.findViewById(R.id.tagCount);tagCount.setText(String.valueOf((guideMenuTag.getCount())));if (mFilter.hasTag(guideMenuTag.getValue())) {// Tag is checked onview.setBackgroundColor(Color.parseColor(""#4C669900""));CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox);checkbox.setChecked(true);}ImageView photoIcon = (ImageView) view.findViewById(R.id.tag_photo);final String[] values = guideMenuTag.getValue().split(""="", 2);String predicateName, value;if (values.length == 1) {predicateName = GuideXML.PREDICATE_TAGS;value = values[0];} else {predicateName = values[0];value = values[1];}final List<GuideTaxonPhotoXML> photos =  mGuideXml.getTagRepresentativePhoto(predicateName, value);if (photos == null) {// No representative photo for the tag valuephotoIcon.setVisibility(View.INVISIBLE);} else {photoIcon.setVisibility(View.VISIBLE);photoIcon.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(GuideDetails.this, TaxonTagPhotosViewer.class);intent.putExtra(""guide_id"", mGuideXml.getID());intent.putExtra(""guide_xml_filename"", mGuideXmlFilename);intent.putExtra(""tag_name"", values[0]);intent.putExtra(""tag_value"", values[1]);startActivity(intent);}});}}title.setText(itemText);view.setTag(item);view.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {GuideMenuItem item = (GuideMenuItem) view.getTag();if (item == null) return;if (item.isSectionHeader()) return;// A tag was added/removedString tagName = ((GuideMenuTag) item).getValue();if (mFilter.hasTag(tagName)) {mFilter.removeTag(tagName);} else {mFilter.addTag(tagName);}updateTaxaByFilter();mGuideMenuListAdapter.notifyDataSetChanged();}});return view;}}// Refresh the taxa list according to current filterprivate void updateTaxaByFilter() {if ((mFilter == null) || (mGuideXml == null) || (mTaxa == null)) return;List<GuideTaxonXML> taxa = mGuideXml.getTaxa(mFilter);mCurrentTaxaResults = taxa;mTaxa.clear();mTaxa.addAll(taxa.subList(0, (int)Math.min(taxa.size(), MAX_TAXA)));mAdapter.notifyDataSetChanged();mSearchText.setEnabled(true);if (mTaxa.size() > 0) {mTaxaEmpty.setVisibility(View.GONE);mGuideTaxaGrid.setVisibility(View.VISIBLE);mAdapter = new TaxaListAdapter(GuideDetails.this, mTaxa);mGuideTaxaGrid.setAdapter(mAdapter);} else {mTaxaEmpty.setText(R.string.no_check_list);mTaxaEmpty.setVisibility(View.VISIBLE);mGuideTaxaGrid.setVisibility(View.GONE);}String nextPredicate = mGuideXml.getRecommendedPredicate(mFilter, mCurrentTaxaResults);if (nextPredicate != null) {mRecommendedNextStep.setEnabled(true);} else {// No recommended next step availablemRecommendedNextStep.setEnabled(false);}}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase R.id.show_side_menu:if (mGuideMenuListAdapter == null) {// Guide still not loadedreturn true;}if (mDrawerLayout.isDrawerOpen(mGuideMenu)) {mDrawerLayout.closeDrawer(mGuideMenu);} else {mDrawerLayout.openDrawer(mGuideMenu);}return true;case android.R.id.home:NavUtils.navigateUpFromSameTask(this);return true;default:return super.onOptionsItemSelected(item);}}@Overrideprotected void onPostCreate(Bundle savedInstanceState) {super.onPostCreate(savedInstanceState);}@Overridepublic void onConfigurationChanged(Configuration newConfig) {super.onConfigurationChanged(newConfig);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {// Inflate the menu items for use in the action barMenuInflater inflater = getMenuInflater();inflater.inflate(R.menu.guide_details_menu, menu);return super.onCreateOptionsMenu(menu);}/** Called when the activity is first created. */@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.guide_details);mHandler = new Handler();mHelper = new ActivityHelper(this);mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);mGuideMenuList = (ListView) findViewById(R.id.guide_menu_list);mGuideMenu = findViewById(R.id.guide_menu);mFilter = new GuideTaxonFilter();mRecommendedNextStep = (Button) findViewById(R.id.recommended_next_step);mRecommendedNextStep.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {String nextPredicate = mGuideXml.getRecommendedPredicate(mFilter, mCurrentTaxaResults);mRecommendedPrediate = nextPredicate;if (mRecommendedPrediate != null) {// Highlight the appropriate predicate (guide menu header)int position = -1;int i = 0;for (GuideMenuItem item : mSideMenuItems) {if (item instanceof GuideMenuSection) {if (item.getText().equals(mRecommendedPrediate)) {position = i;break;}}i++;}if (i > -1) {// Call setSelection at the end because the ListView scrolling method is sometimes buggyfinal int finalPosition = position;mGuideMenuList.setOnScrollListener(new AbsListView.OnScrollListener() {int tryCount = 0;@Overridepublic void onScrollStateChanged(final AbsListView view, final int scrollState) {if (scrollState == SCROLL_STATE_IDLE) {new Thread(new Runnable() {@Overridepublic void run() {try {Thread.sleep(10);} catch (InterruptedException e) {e.printStackTrace();}if ((tryCount < 2) && (view.getFirstVisiblePosition() != finalPosition)) {// Fix for scrolling bugGuideDetails.this.runOnUiThread(new Runnable() {@Overridepublic void run() {view.setSelection(finalPosition);}});tryCount++;} else {view.setOnScrollListener(null);tryCount = 0;}}}).start();}}@Overridepublic void onScroll(final AbsListView view, final int firstVisibleItem, final int visibleItemCount,final int totalItemCount) {}});if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {mGuideMenuList.smoothScrollToPositionFromTop(position, 0, 300);} else {mGuideMenuList.setSelectionFromTop(position, 0);}}}mGuideMenuListAdapter.notifyDataSetChanged();}});mReset = (ImageButton) findViewById(R.id.reset_key);mReset.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {// Reset all tag selectionsmRecommendedPrediate = null;mFilter.clearTags();mGuideMenuListAdapter.notifyDataSetChanged();updateTaxaByFilter();if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {mGuideMenuList.smoothScrollToPositionFromTop(0, 0, 300);} else {mGuideMenuList.setSelectionFromTop(0, 0);}}});ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);final Intent intent = getIntent();if (mApp == null) {mApp = (INaturalistApp)getApplicationContext();}if (savedInstanceState == null) {mGuide = (BetterJSONObject) intent.getSerializableExtra(""guide"");} else {mGuide = (BetterJSONObject) savedInstanceState.getSerializable(""guide"");mGuideXmlFilename = savedInstanceState.getString(""guideXmlFilename"");if (mGuideXmlFilename != null) mGuideXml = new GuideXML(GuideDetails.this, mGuide.getInt(""id"").toString(), mGuideXmlFilename);mFilter.setSearchText(savedInstanceState.getString(""filterSearchText""));mFilter.setTags(savedInstanceState.getStringArrayList(""filterTags""));mIsDownloading = savedInstanceState.getBoolean(""isDownloading"");mDownloadProgress = savedInstanceState.getInt(""downloadProgress"", 0);mRecommendedPrediate = savedInstanceState.getString(""recommendedPredicate"");}if (mGuide == null) {finish();return;}actionBar.setTitle(mGuide.getString(""title""));mTaxaGuideReceiver = new GuideTaxaReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_GUIDE_XML_RESULT);Log.i(TAG, ""Registering ACTION_GUIDE_XML_RESULT"");registerReceiver(mTaxaGuideReceiver, filter);mSearchText = (EditText) findViewById(R.id.search_filter);mSearchText.setEnabled(false);mSearchText.setText(mFilter.getSearchText());mSearchText.addTextChangedListener(new TextWatcher() {@Overridepublic void onTextChanged(CharSequence s, int start, int before, int count) {if (mAdapter != null) {mFilter.setSearchText(s.toString());if (mTypingTask != null) {mHandler.removeCallbacks(mTypingTask);}mTypingTask = new Runnable() {@Overridepublic void run() {updateTaxaByFilter();}};mHandler.postDelayed(mTypingTask, 400);}}@Overridepublic void beforeTextChanged(CharSequence s, int start, int count, int after) { }@Overridepublic void afterTextChanged(Editable s) { }});mProgress = (ProgressBar) findViewById(R.id.progress);mTaxaEmpty = (TextView) findViewById(R.id.guide_taxa_empty);mGuideTaxaGrid = (GridViewExtended) findViewById(R.id.taxa_grid);mGuideTaxaGrid.setOnItemClickListener(new OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {GuideTaxonXML taxon = (GuideTaxonXML) arg1.getTag();// Show taxon detailsIntent intent = new Intent(GuideDetails.this, GuideTaxonActivity.class);intent.putExtra(""guide_taxon"", true);intent.putExtra(""guide_id"", mGuideXml.getID());intent.putExtra(""taxon_id"", taxon.getTaxonId());intent.putExtra(""guide_xml_filename"", mGuideXmlFilename);startActivity(intent);}});mProgress.setVisibility(View.VISIBLE);mGuideTaxaGrid.setVisibility(View.GONE);mTaxaEmpty.setVisibility(View.GONE);if (mGuideXml == null) {// Get the guide's XML fileint guideId = mGuide.getInt(""id"");Intent serviceIntent = new Intent(INaturalistService.ACTION_GUIDE_XML, null, GuideDetails.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.ACTION_GUIDE_ID, guideId);startService(serviceIntent);}LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);View footerView = inflater.inflate(R.layout.guide_menu_footer, null, false);mDescription = (TextView) footerView.findViewById(R.id.description);mEditorName = (TextView) footerView.findViewById(R.id.editorName);mLicense = (TextView) footerView.findViewById(R.id.license);mDownloadTitle = (TextView) footerView.findViewById(R.id.downloadTitle);mDownloadSubtitle = (TextView) footerView.findViewById(R.id.downloadSubtitle);mDownloadingSubtitle = (TextView) footerView.findViewById(R.id.downloadingSubtitle);mDownloadGuideImage = (ImageView) footerView.findViewById(R.id.downloadGuideImage);mDownloadingGuide = (View) footerView.findViewById(R.id.downloadingGuide);mDownloadingProgress = (ProgressBar) footerView.findViewById(R.id.downloadingProgress);mDownloadGuide = (View) footerView.findViewById(R.id.downloadGuide);mGuideMenuList.addFooterView(footerView);if (mIsDownloading) {refreshGuideSideMenu();mApp.setDownloadCallback(this);}if (mGuideXml != null) {mTaxa = new ArrayList<GuideTaxonXML>();mAdapter = new TaxaListAdapter(GuideDetails.this, mTaxa);updateTaxaByFilter();mProgress.setVisibility(View.GONE);updateSideMenu();}}@Overrideprotected void onPause() {super.onPause();if (mTaxaGuideReceiver != null) {Log.i(TAG, ""Unregistering ACTION_GUIDE_XML_RESULT"");try {unregisterReceiver(mTaxaGuideReceiver);} catch (Exception exc) {exc.printStackTrace();}mTaxaGuideReceiver = null;}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(""guide"", mGuide);outState.putString(""guideXmlFilename"", mGuideXmlFilename);outState.putString(""filterSearchText"", mFilter.getSearchText());outState.putStringArrayList(""filterTags"", (ArrayList<String>) mFilter.getAllTags());outState.putBoolean(""isDownloading"", mIsDownloading);outState.putInt(""downloadProgress"", mDownloadProgress);outState.putString(""recommendedPredicate"", mRecommendedPrediate);super.onSaveInstanceState(outState);}private boolean isLoggedIn() {SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);return prefs.getString(""username"", null) != null;}}",GuideDetails.java,0
200,"package org.inaturalist.android;import android.content.Context;import android.util.Log;import android.util.Pair;import org.apache.commons.lang3.StringUtils;import org.w3c.dom.Node;import org.xml.sax.InputSource;import java.io.BufferedInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Set;import java.util.SortedMap;import java.util.TreeMap;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import javax.xml.xpath.XPath;import javax.xml.xpath.XPathConstants;import javax.xml.xpath.XPathExpressionException;import javax.xml.xpath.XPathFactory;/*** Represents a Guide's XML file - parses it and supports downloading an NGZ file locally*/public class GuideXML extends BaseGuideXMLParser {// The default predicate - tagspublic final static String PREDICATE_TAGS = ""TAGS"";// The directory where all offline guides are saved toprivate final static String OFFLINE_GUIDE_PATH = ""/offline_guides/"";private String mGuideId;private Context mContext;private Map<String, Integer> mTagCounts;private Map<String, Set<String>> mTags;// Representative photos of the tag values (e.g. what photo should we display for ""number of legs=4"")private Map<Pair<String, String>, List<GuideTaxonPhotoXML>> mReprTagPhotos;/*** Initialize the GuideXML class with the offline (downloaded) version of it* @param context the app context* @param guideId the guide identifier*/public GuideXML(Context context, String guideId) {// Initialize the class with the offline guide downloaded XML filethis(context, guideId,context.getExternalCacheDir() + OFFLINE_GUIDE_PATH + guideId + ""/"" + guideId + "".xml"");}/*** Initialize the GuideXML class with a local file XML path* @param context the app context* @param guideId the guide identifier* @param path the local file name of the guide XML file*/public GuideXML(Context context, String guideId, String path) {mContext = context;mGuideId = guideId;FileReader fr = null;try {fr = new FileReader(path);} catch (FileNotFoundException e) {e.printStackTrace();return;}InputSource inputSource = new InputSource(fr);mTagCounts = new HashMap<String, Integer>();mTags = new HashMap<String, Set<String>>();try {// Read root node so we won't re-parse the XML file every time we evaluate an XPathXPath xpath = XPathFactory.newInstance().newXPath();setRootNode((Node) xpath.evaluate(""/"", inputSource, XPathConstants.NODE));// Parse all taxon tagsparseTags();// Parse the TaxonImage tags (so we'll know what are the representative image for each tag value)parseImageTags();} catch (XPathExpressionException e) {e.printStackTrace();}}/*** Creates the root directory that will hold all offline guides* @param context*/public static void createOfflineGuidesDirectory(Context context) {File offlineGuidesDir = new File(context.getExternalCacheDir() + OFFLINE_GUIDE_PATH);offlineGuidesDir.mkdirs();}/*** Returns all offline (downloaded) guides available* @param context* @return*/public static List<GuideXML> getAllOfflineGuides(Context context) {ArrayList<GuideXML> guides = new ArrayList<GuideXML>();File rootDir = new File(context.getExternalCacheDir() + OFFLINE_GUIDE_PATH);File files[] = rootDir.listFiles();if (files == null) return guides;// Iterate over all directories in the offline guides root directory, and create// a new GuideXML instance for each.for (int i = 0; i < files.length; i++) {if (!files[i].isDirectory()) {continue;}String guideId = files[i].getName();guides.add(new GuideXML(context, guideId));}return guides;}/*** Checks whether or not an offline version of the guide is available (was downloaded)* @return*/public boolean isGuideDownloaded() {String path = getOfflineGuidePath();File dir = new File(path);return dir.exists();}/*** Returns the base path for the downloaded offline guide* @return*/public String getOfflineGuidePath() {return mContext.getExternalCacheDir() + OFFLINE_GUIDE_PATH + mGuideId;}/*** Returns the path for the downloaded offline guide XML* @return*/public String getOfflineGuideXmlFilePath() {return getOfflineGuidePath() + ""/"" + mGuideId + "".xml"";}/*** Returns the date/time the guide was downloaded at.* @return*/public Date getDownloadedGuideDate() {String path = getOfflineGuideXmlFilePath();File xmlFile = new File(path);return new Date(xmlFile.lastModified());}/*** Deletes the directory to which the offline guide was downloaded/extract to* @return true/false status*/public boolean deleteOfflineGuide() {// Delete all files inside directorydeleteFiles(mContext.getExternalCacheDir() + OFFLINE_GUIDE_PATH + mGuideId);return true;}/*** Recursively delete files and folders* @param uri*/private void deleteFiles(String uri) {File currentFile = new File(uri);File files[] = currentFile.listFiles();if (files != null) {for (int i = 0; i < files.length; i++) {if (files[i].isDirectory()) {deleteFiles(files[i].toString());}files[i].delete();}}currentFile.delete();}/*** Extracts a downloaded NGZ file into the offline guide directory* @param ngzFilename the NGZ file path* @return true/false status*/public boolean extractOfflineGuide(String ngzFilename) {// First, create the offline guide directory, if it doesn't existFile offlineGuidesDir = new File(mContext.getExternalCacheDir() + OFFLINE_GUIDE_PATH + mGuideId);offlineGuidesDir.mkdirs();// Next, extract the NGZ file into that directoryString basePath = offlineGuidesDir.getPath();InputStream is;ZipInputStream zis;try {String filename;is = new FileInputStream(ngzFilename);zis = new ZipInputStream(new BufferedInputStream(is));ZipEntry ze;byte[] buffer = new byte[1024];int count;// Extract all files in the zip file - one by onewhile ((ze = zis.getNextEntry()) != null) {// Get current filenamefilename = ze.getName();// Need to create directories if doesn't exist, or it will generate an Exception...if (ze.isDirectory()) {File fmd = new File(basePath + ""/"" + filename);fmd.mkdirs();continue;}FileOutputStream fout = new FileOutputStream(basePath + ""/"" + filename);// Extract current filewhile ((count = zis.read(buffer)) != -1) {fout.write(buffer, 0, count);}fout.close();zis.closeEntry();}zis.close();}catch(IOException e) {e.printStackTrace();return false;}return true;}/*** Returns the guide's ID* @return the guide's ID*/public String getID() {return mGuideId;}/*** Returns the guide's title* @return the guide's title*/public String getTitle() {return getValueByXPath(""//INatGuide/dc:title"");}/*** Returns the guide's description* @return the guide's description*/public String getDescription() {return getValueByXPath(""//INatGuide/dc:description"");}/*** Returns the guide's compiler (user who created this guide)* @return the guide's compiler*/public String getCompiler() {return getValueByXPath(""//INatGuide/eol:agent[@role='compiler']"");}/*** Returns the guide's license* @return the guide's license*/public String getLicense() {return getValueByXPath(""//INatGuide/dc:license"");}/*** Utility method for converting a license URL to textual representation* @param context* @param license* @return*/public static String licenseToText(Context context, String license) {if ((license == null) || (license.length() == 0)) {// No licensereturn context.getResources().getString(R.string.license_none);}String[] parts = license.split(""/"");if (parts.length > 2) {return String.format(""CC %s"", parts[parts.length - 2].toUpperCase());} else {return license;}}/*** Checks whether or not an offline guide is available for download* @return*/public boolean isOfflineGuideAvailable() {String ngzUrl = getNgzURL();return ((ngzUrl!= null) && (ngzUrl.length() > 0));}/*** Returns the guide's NGZ file URL* @return the guide's NGZ URL*/public String getNgzURL() {return getValueByXPath(""//ngz/href"");}/*** Returns the guide's NGZ file size (e.g. 1.71 MB)* @return the guide's NGZ file size*/public String getNgzFileSize() {return getValueByXPath(""//ngz/size"");}/*** Utility method that parses out all of the guide photos's taxon tags*/private void parseImageTags() {ArrayList<Node> nodes = getNodesByXPath(""//GuideTaxon/GuidePhoto/tag"");if (nodes == null) {return;}mReprTagPhotos = new HashMap<Pair<String, String>, List<GuideTaxonPhotoXML>>();for (Node node: nodes) {String predicateName = getAttribute(node, ""predicate"");if ((predicateName == null) || (predicateName.length() == 0)) {predicateName = PREDICATE_TAGS;}String value = getAttribute(node, ""value"");Pair<String, String> key = new Pair<String, String>(predicateName, value);GuideTaxonPhotoXML photo = new GuideTaxonPhotoXML(this, node.getParentNode());if (!mReprTagPhotos.containsKey(key)) {mReprTagPhotos.put(key, new ArrayList<GuideTaxonPhotoXML>());}List<GuideTaxonPhotoXML> photos = mReprTagPhotos.get(key);photos.add(photo);}}/*** Returns the representative photos of a specific tag name + value combo.** @param tagName the tag name (e.g. number of legs)* @param tagValue the tag value (e.g. 3)* @return the representative photos for that combo (or null if non existent)*/public List<GuideTaxonPhotoXML> getTagRepresentativePhoto(String tagName, String tagValue) {Pair<String, String> key = new Pair<String, String>(tagName, tagValue);if (!mReprTagPhotos.containsKey(key)) {return null;}return mReprTagPhotos.get(key);}/*** Utility method that parses out all of the guide's taxon tags*/private void parseTags() {ArrayList<Node> nodes = getNodesByXPath(""//GuideTaxon/tag"");Map<String, Set<String>> predicates = new HashMap<String, Set<String>>();Map<String, Integer> tagCounts = new HashMap<String, Integer>();if (nodes == null) {return;}for (Node node: nodes) {String predicateName = getAttribute(node, ""predicate"");String tagName = node.getTextContent();if ((predicateName == null) || (predicateName.equalsIgnoreCase(PREDICATE_TAGS)) || (predicateName.length() == 0)) {predicateName = PREDICATE_TAGS;}if (!predicates.containsKey(predicateName)) {predicates.put(predicateName, new HashSet<String>());}if (!tagCounts.containsKey(tagName)) {tagCounts.put(tagName, Integer.valueOf(0));}HashSet<String> tags = (HashSet<String>)predicates.get(predicateName);Integer tagCount = tagCounts.get(tagName);tagCounts.put(tagName, tagCount + 1);tags.add(tagName);}mTagCounts = tagCounts;mTags = predicates;}/*** Returns a map of tag name -> count (how many taxa with that tags are found in the guide)* @return*/public Map<String, Integer> getTagCounts() {return mTagCounts;}/*** Returns all the tags set for the guide taxa* @return a map of predicates and its set of tags*/public Map<String, Set<String>> getAllTags() {return mTags;}/*** Returns a guide taxon by ID* @param taxonId* @return*/public GuideTaxonXML getTaxonById(String taxonId) {ArrayList<Node> nodes = getNodesByXPath(String.format(""//GuideTaxon/taxonID/text()[contains(.,'%s')]/ancestor::*[self::GuideTaxon]"", taxonId));if (nodes.size() == 0) return null;return new GuideTaxonXML(this, nodes.get(0));}/*** Used by getRecommendedPredicate* @param data* @return*/private Double getMean(List<Integer> data) {double sum = 0.0;for (Integer a : data) {sum += a;}return sum / data.size();}/*** Used by getRecommendedPredicate* @param data* @return*/private Double getVariance(Double mean, List<Integer> data) {if (data.size() <= 1) {// Undefined variance when there is one or less itemreturn null;}double temp = 0;for(Integer a : data) {temp += (mean - a) * (mean - a);}return temp / data.size();}/*** Returns the next recommended predicate name, according to current filter tags and results - find out* the tag name that is the most ""useful"" one for filtering results. For example, a tag that will* not eliminate the results by much will not be considered a good candidate.* @param filter current filter tags* @param currentResults current search results* @return the next recommended tag name.*/public String getRecommendedPredicate(GuideTaxonFilter filter, List<GuideTaxonXML> currentResults) {Map<String, Integer> currentTagCounts = new HashMap<String, Integer>();List<String> selectedPredicates = new ArrayList<String>();// Build the list of already-selected predicate namesfor (String tagName : filter.getAllTags()) {String predicateName = tagName.split(""="")[0];selectedPredicates.add(predicateName);}// Calculate the tag counts from the remaining taxa resultsfor (GuideTaxonXML taxon : currentResults) {ArrayList<Node> nodes = taxon.getNodesByXPath(""tag"");for (Node node : nodes) {String tagName = node.getTextContent();if (!currentTagCounts.containsKey(tagName)) {currentTagCounts.put(tagName, 0);}int currentCount = currentTagCounts.get(tagName);currentTagCounts.put(tagName, currentCount + 1);}}// Next, create a list of tag counts for each predicateMap<String, List<Integer>> predicateTagCounts = new HashMap<String, List<Integer>>();for (String tagName : currentTagCounts.keySet()) {int tagCount = currentTagCounts.get(tagName);String predicateName = tagName.split(""="")[0];if (!predicateTagCounts.containsKey(predicateName)) {predicateTagCounts.put(predicateName, new ArrayList<Integer>());}predicateTagCounts.get(predicateName).add(tagCount);}// Calculate the mean and variance for each predicate tag count list// (Key = predicate name; values = mean, varianceSortedMap<String, Pair<Double, Double>> predicatesMeanAndVariance = new TreeMap<String, Pair<Double, Double>>();for (String predicateName : predicateTagCounts.keySet()) {List<Integer> predicateTagCount = predicateTagCounts.get(predicateName);if (selectedPredicates.contains(predicateName)) {// Predicate was already selected - skip itcontinue;}// Calculate mean and varianceDouble mean = getMean(predicateTagCount);Double variance = getVariance(mean, predicateTagCount);predicatesMeanAndVariance.put(predicateName, new Pair<Double, Double>(mean, variance));Log.e(""AAA"", predicateName + "" = ["" + StringUtils.join(predicateTagCount, "","") + ""] = "" + mean + "", "" + variance);}// Finally, decide which of the predicates is the next recommended one// This comparator is the heart of our algorithm for choosing the next recommended predicate:// We choose the one with the max mean; then, in case of identical means, we choose the one// with the minimum variance (that is not null).Comparator<Map.Entry> predicateComparator = new Comparator<Map.Entry>() {@Overridepublic int compare(Map.Entry entry1, Map.Entry entry2) {Pair<Double, Double> predicate1 = (Pair<Double, Double>) entry1.getValue();Pair<Double, Double> predicate2 = (Pair<Double, Double>) entry2.getValue();// First, compare by meanif (predicate1.first > predicate2.first) {return -1;} else if (predicate2.first > predicate1.first) {return 1;} else {// Means are identical - compare by varianceif ((predicate1.second == null) && (predicate2.second != null)) {return 1;} else if ((predicate2.second == null) && (predicate1.second != null)) {return -1;} else if ((predicate2.second == null) && (predicate1.second == null)) {return 0;} else {return (int)(predicate1.second - predicate2.second);}}}};// Sort the predicate mean/variance listList<Map.Entry> list = new LinkedList(predicatesMeanAndVariance.entrySet());if (list.size() > 1) {Collections.sort(list, predicateComparator);}for (Map.Entry item : list) {Log.e(""AAA"", item.getKey() + "" = "" + ((Pair<Double,Double>)item.getValue()).first + "", "" + ((Pair<Double,Double>)item.getValue()).second);}if (list.size() > 0) {return (String) list.get(0).getKey();} else {return null;}}/*** Utility method for building an xpath string by a taxon search filter* @param filter* @return*/private String buildFilterXpath(GuideTaxonFilter filter) {String searchText = filter.getSearchText();String xPathExpression;if ((searchText == null) || (searchText.length() == 0)) {// No search textxPathExpression = ""//GuideTaxon"";} else {// Filter only guide taxa that fit the search textxPathExpression = String.format(""//GuideTaxon/*/text()[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),'%s')]/ancestor::*[self::GuideTaxon]"",searchText.toLowerCase());}List<String> tags = filter.getAllTags();if (tags.size() > 0) {// Filter by specific tags as wellArrayList<String> tagExpressions = new ArrayList<String>();for (String tag: tags) {tagExpressions.add(String.format(""descendant::tag[text() = '%s']"", tag));}xPathExpression = String.format(""%s[%s]"", xPathExpression, StringUtils.join(tagExpressions, "" and ""));}return xPathExpression;}/*** Returns the list of guide taxa according to the filter* @return*/public List<GuideTaxonXML> getTaxa(GuideTaxonFilter filter) {String xPathExpression = buildFilterXpath(filter);// Get the list of all GuideTaxon nodes that fit the filterArrayList<Node> nodes = getNodesByXPath(xPathExpression);ArrayList<GuideTaxonXML> taxa = new ArrayList<GuideTaxonXML>();if (nodes == null) {return taxa;}// Initialize each node into a GuideTaxonXML instancefor (Node node: nodes) {taxa.add(new GuideTaxonXML(this, node));}return taxa;}}",GuideXML.java,0
200,"// BEGIN GENERATED BY /Users/kueda/projects/eclipse/workspace/iNaturalist/rails2android.rb AT Mon Jan 09 13:07:06 -0500 2012package org.inaturalist.android;import java.io.Serializable;import java.sql.Timestamp;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.apache.http.NameValuePair;import org.apache.http.message.BasicNameValuePair;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.content.ContentUris;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.provider.BaseColumns;import android.util.Log;import android.view.View;public class Observation implements BaseColumns, Serializable {public Integer _id;public Timestamp _created_at;public Timestamp _synced_at;public Timestamp _updated_at;public Timestamp created_at;public String description;public String geoprivacy;public Integer iconic_taxon_id;public String iconic_taxon_name;public Integer id;public Boolean id_please;public Double latitude;public Double longitude;public Timestamp observed_on;public String observed_on_string;public Boolean out_of_range;public Boolean captive;public String place_guess;public Integer positional_accuracy;public String positioning_device;public String positioning_method;public Double private_latitude;public Double private_longitude;public Integer private_positional_accuracy;public String quality_grade;public String species_guess;public Integer taxon_id;public Timestamp time_observed_at;public Timestamp updated_at;public String user_agent;public Integer user_id;public String user_login;public Integer comments_count;public Integer identifications_count;public Integer last_comments_count;public Integer last_identifications_count;public Boolean is_deleted;public String preferred_common_name;public SerializableJSONArray comments;public SerializableJSONArray identifications;public SerializableJSONArray favorites;public List<ObservationPhoto> photos;public Timestamp _created_at_was;public Timestamp _synced_at_was;public Timestamp _updated_at_was;public Timestamp created_at_was;public String description_was;public String geoprivacy_was;public Integer iconic_taxon_id_was;public String iconic_taxon_name_was;public Integer id_was;public Boolean id_please_was;public Double latitude_was;public Double longitude_was;public Timestamp observed_on_was;public String observed_on_string_was;public Boolean out_of_range_was;public Boolean captive_was;public String place_guess_was;public Integer positional_accuracy_was;public String positioning_device_was;public String positioning_method_was;public Double private_latitude_was;public Double private_longitude_was;public Integer private_positional_accuracy_was;public String quality_grade_was;public String species_guess_was;public Integer taxon_id_was;public Timestamp time_observed_at_was;public Timestamp updated_at_was;public String user_agent_was;public Integer user_id_was;public String user_login_was;public Boolean is_deleted_was;public SerializableJSONArray projects;public String uuid;public static final String TAG = ""Observation"";public static final String TABLE_NAME = ""observations"";public static final int OBSERVATIONS_URI_CODE = 1279;public static final int OBSERVATION_ID_URI_CODE = 1164;public static HashMap<String, String> PROJECTION_MAP;public static final String AUTHORITY = ""org.inaturalist.android.observation"";public static final Uri    CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/observations"");public static final String CONTENT_TYPE = ""vnd.android.cursor.dir/vnd.google.observation"";public static final String CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/vnd.google.observation"";public static final String DEFAULT_SORT_ORDER = ""CASE WHEN id IS NULL THEN _created_at ELSE created_at END DESC"";public static final String SYNC_ORDER = ""_created_at ASC"";public static final String _CREATED_AT = ""_created_at"";public static final String _SYNCED_AT = ""_synced_at"";public static final String _UPDATED_AT = ""_updated_at"";public static final String CREATED_AT = ""created_at"";public static final String DESCRIPTION = ""description"";public static final String GEOPRIVACY = ""geoprivacy"";public static final String ICONIC_TAXON_ID = ""iconic_taxon_id"";public static final String ICONIC_TAXON_NAME = ""iconic_taxon_name"";public static final String ID = ""id"";public static final String ID_PLEASE = ""id_please"";public static final String LATITUDE = ""latitude"";public static final String LONGITUDE = ""longitude"";public static final String OBSERVED_ON = ""observed_on"";public static final String OBSERVED_ON_STRING = ""observed_on_string"";public static final String OUT_OF_RANGE = ""out_of_range"";public static final String CAPTIVE = ""captive"";public static final String PLACE_GUESS = ""place_guess"";public static final String POSITIONAL_ACCURACY = ""positional_accuracy"";public static final String POSITIONING_DEVICE = ""positioning_device"";public static final String POSITIONING_METHOD = ""positioning_method"";public static final String PRIVATE_LATITUDE = ""private_latitude"";public static final String PRIVATE_LONGITUDE = ""private_longitude"";public static final String PRIVATE_POSITIONAL_ACCURACY = ""private_positional_accuracy"";public static final String QUALITY_GRADE = ""quality_grade"";public static final String SPECIES_GUESS = ""species_guess"";public static final String PREFERRED_COMMON_NAME = ""preferred_common_name"";public static final String TAXON_ID = ""taxon_id"";public static final String TIME_OBSERVED_AT = ""time_observed_at"";public static final String UPDATED_AT = ""updated_at"";public static final String USER_AGENT = ""user_agent"";public static final String USER_ID = ""user_id"";public static final String USER_LOGIN = ""user_login"";public static final String COMMENTS_COUNT = ""comments_count"";public static final String IDENTIFICATIONS_COUNT = ""identifications_count"";public static final String LAST_COMMENTS_COUNT = ""last_comments_count"";public static final String LAST_IDENTIFICATIONS_COUNT = ""last_identifications_count"";public static final String IS_DELETED = ""is_deleted"";public static final String UUID = ""uuid"";public static final String[] PROJECTION = new String[] {Observation._ID,Observation._CREATED_AT,Observation._SYNCED_AT,Observation._UPDATED_AT,Observation.CREATED_AT,Observation.DESCRIPTION,Observation.GEOPRIVACY,Observation.ICONIC_TAXON_ID,Observation.ICONIC_TAXON_NAME,Observation.ID,Observation.ID_PLEASE,Observation.LATITUDE,Observation.LONGITUDE,Observation.OBSERVED_ON,Observation.OBSERVED_ON_STRING,Observation.OUT_OF_RANGE,Observation.CAPTIVE,Observation.PLACE_GUESS,Observation.POSITIONAL_ACCURACY,Observation.POSITIONING_DEVICE,Observation.POSITIONING_METHOD,Observation.PRIVATE_LATITUDE,Observation.PRIVATE_LONGITUDE,Observation.PRIVATE_POSITIONAL_ACCURACY,Observation.QUALITY_GRADE,Observation.SPECIES_GUESS,Observation.PREFERRED_COMMON_NAME,Observation.TAXON_ID,Observation.TIME_OBSERVED_AT,Observation.UPDATED_AT,Observation.USER_AGENT,Observation.USER_ID,Observation.USER_LOGIN,Observation.IDENTIFICATIONS_COUNT,Observation.COMMENTS_COUNT,Observation.LAST_COMMENTS_COUNT,Observation.LAST_IDENTIFICATIONS_COUNT,Observation.IS_DELETED,Observation.UUID,};static {PROJECTION_MAP = new HashMap<String, String>();PROJECTION_MAP.put(Observation._ID, Observation._ID);PROJECTION_MAP.put(Observation._CREATED_AT, Observation._CREATED_AT);PROJECTION_MAP.put(Observation._SYNCED_AT, Observation._SYNCED_AT);PROJECTION_MAP.put(Observation._UPDATED_AT, Observation._UPDATED_AT);PROJECTION_MAP.put(Observation.CREATED_AT, Observation.CREATED_AT);PROJECTION_MAP.put(Observation.DESCRIPTION, Observation.DESCRIPTION);PROJECTION_MAP.put(Observation.GEOPRIVACY, Observation.GEOPRIVACY);PROJECTION_MAP.put(Observation.ICONIC_TAXON_ID, Observation.ICONIC_TAXON_ID);PROJECTION_MAP.put(Observation.ICONIC_TAXON_NAME, Observation.ICONIC_TAXON_NAME);PROJECTION_MAP.put(Observation.ID, Observation.ID);PROJECTION_MAP.put(Observation.ID_PLEASE, Observation.ID_PLEASE);PROJECTION_MAP.put(Observation.LATITUDE, Observation.LATITUDE);PROJECTION_MAP.put(Observation.LONGITUDE, Observation.LONGITUDE);PROJECTION_MAP.put(Observation.OBSERVED_ON, Observation.OBSERVED_ON);PROJECTION_MAP.put(Observation.OBSERVED_ON_STRING, Observation.OBSERVED_ON_STRING);PROJECTION_MAP.put(Observation.OUT_OF_RANGE, Observation.OUT_OF_RANGE);PROJECTION_MAP.put(Observation.CAPTIVE, Observation.CAPTIVE);PROJECTION_MAP.put(Observation.PLACE_GUESS, Observation.PLACE_GUESS);PROJECTION_MAP.put(Observation.UUID, Observation.UUID);PROJECTION_MAP.put(Observation.POSITIONAL_ACCURACY, Observation.POSITIONAL_ACCURACY);PROJECTION_MAP.put(Observation.POSITIONING_DEVICE, Observation.POSITIONING_DEVICE);PROJECTION_MAP.put(Observation.POSITIONING_METHOD, Observation.POSITIONING_METHOD);PROJECTION_MAP.put(Observation.PRIVATE_LATITUDE, Observation.PRIVATE_LATITUDE);PROJECTION_MAP.put(Observation.PRIVATE_LONGITUDE, Observation.PRIVATE_LONGITUDE);PROJECTION_MAP.put(Observation.PRIVATE_POSITIONAL_ACCURACY, Observation.PRIVATE_POSITIONAL_ACCURACY);PROJECTION_MAP.put(Observation.QUALITY_GRADE, Observation.QUALITY_GRADE);PROJECTION_MAP.put(Observation.SPECIES_GUESS, Observation.SPECIES_GUESS);PROJECTION_MAP.put(Observation.PREFERRED_COMMON_NAME, Observation.PREFERRED_COMMON_NAME);PROJECTION_MAP.put(Observation.TAXON_ID, Observation.TAXON_ID);PROJECTION_MAP.put(Observation.TIME_OBSERVED_AT, Observation.TIME_OBSERVED_AT);PROJECTION_MAP.put(Observation.UPDATED_AT, Observation.UPDATED_AT);PROJECTION_MAP.put(Observation.USER_AGENT, Observation.USER_AGENT);PROJECTION_MAP.put(Observation.USER_ID, Observation.USER_ID);PROJECTION_MAP.put(Observation.USER_LOGIN, Observation.USER_LOGIN);PROJECTION_MAP.put(Observation.IDENTIFICATIONS_COUNT, Observation.IDENTIFICATIONS_COUNT);PROJECTION_MAP.put(Observation.COMMENTS_COUNT, Observation.COMMENTS_COUNT);PROJECTION_MAP.put(Observation.LAST_IDENTIFICATIONS_COUNT, Observation.LAST_IDENTIFICATIONS_COUNT);PROJECTION_MAP.put(Observation.LAST_COMMENTS_COUNT, Observation.LAST_COMMENTS_COUNT);PROJECTION_MAP.put(Observation.IS_DELETED, Observation.IS_DELETED);}public Observation() {}public Observation(Cursor c) {if (c.getPosition() == -1) c.moveToFirst();BetterCursor bc = new BetterCursor(c);this._id = bc.getInt(_ID);this._created_at = bc.getTimestamp(_CREATED_AT);this._created_at_was = this._created_at;this._synced_at = bc.getTimestamp(_SYNCED_AT);this._synced_at_was = this._synced_at;this._updated_at = bc.getTimestamp(_UPDATED_AT);this._updated_at_was = this._updated_at;this.created_at = bc.getTimestamp(CREATED_AT);this.created_at_was = this.created_at;this.description = bc.getString(DESCRIPTION);this.description_was = this.description;this.geoprivacy = bc.getString(GEOPRIVACY);this.geoprivacy_was = this.geoprivacy;this.iconic_taxon_id = bc.getInteger(ICONIC_TAXON_ID);this.iconic_taxon_id_was = this.iconic_taxon_id;this.iconic_taxon_name = bc.getString(ICONIC_TAXON_NAME);this.iconic_taxon_name_was = this.iconic_taxon_name;this.id = bc.getInteger(ID);this.id_was = this.id;this.id_please = bc.getBoolean(ID_PLEASE);this.id_please_was = this.id_please;this.latitude = bc.getDouble(LATITUDE);this.latitude_was = this.latitude;this.longitude = bc.getDouble(LONGITUDE);this.longitude_was = this.longitude;this.observed_on = bc.getTimestamp(OBSERVED_ON);this.observed_on_was = this.observed_on;this.observed_on_string = bc.getString(OBSERVED_ON_STRING);this.observed_on_string_was = this.observed_on_string;this.out_of_range = bc.getBoolean(OUT_OF_RANGE);this.out_of_range_was = this.out_of_range;this.captive = bc.getBoolean(CAPTIVE);this.captive_was = this.captive;this.place_guess = bc.getString(PLACE_GUESS);this.place_guess_was = this.place_guess;this.uuid = bc.getString(UUID);this.positional_accuracy = bc.getInteger(POSITIONAL_ACCURACY);this.positional_accuracy_was = this.positional_accuracy;this.positioning_device = bc.getString(POSITIONING_DEVICE);this.positioning_device_was = this.positioning_device;this.positioning_method = bc.getString(POSITIONING_METHOD);this.positioning_method_was = this.positioning_method;this.private_latitude = bc.getDouble(PRIVATE_LATITUDE);this.private_latitude_was = this.private_latitude;this.private_longitude = bc.getDouble(PRIVATE_LONGITUDE);this.private_longitude_was = this.private_longitude;this.private_positional_accuracy = bc.getInteger(PRIVATE_POSITIONAL_ACCURACY);this.private_positional_accuracy_was = this.private_positional_accuracy;this.quality_grade = bc.getString(QUALITY_GRADE);this.quality_grade_was = this.quality_grade;this.species_guess = bc.getString(SPECIES_GUESS);this.species_guess_was = this.species_guess;this.preferred_common_name = bc.getString(PREFERRED_COMMON_NAME);this.taxon_id = bc.getInteger(TAXON_ID);this.taxon_id_was = this.taxon_id;this.time_observed_at = bc.getTimestamp(TIME_OBSERVED_AT);this.time_observed_at_was = this.time_observed_at;this.updated_at = bc.getTimestamp(UPDATED_AT);this.updated_at_was = this.updated_at;this.user_agent = bc.getString(USER_AGENT);this.user_agent_was = this.user_agent;this.user_id = bc.getInteger(USER_ID);this.user_id_was = this.user_id;this.user_login = bc.getString(USER_LOGIN);this.user_login_was = this.user_login;this.is_deleted = bc.getBoolean(IS_DELETED);this.is_deleted_was = this.is_deleted;this.comments_count = bc.getInteger(COMMENTS_COUNT);this.identifications_count = bc.getInteger(IDENTIFICATIONS_COUNT);this.last_comments_count = bc.getInteger(LAST_COMMENTS_COUNT);this.last_identifications_count = bc.getInteger(LAST_IDENTIFICATIONS_COUNT);}public Observation(BetterJSONObject o) {this._created_at = o.getTimestamp(""_created_at"");this._created_at_was = this._created_at;this._synced_at = o.getTimestamp(""_synced_at"");this._synced_at_was = this._synced_at;this._updated_at = o.getTimestamp(""_updated_at"");this._updated_at_was = this._updated_at;this.created_at = o.getTimestamp(""created_at"");this.created_at_was = this.created_at;this.description = o.getString(""description"");this.description_was = this.description;this.geoprivacy = o.getString(""geoprivacy"");this.geoprivacy_was = this.geoprivacy;this.iconic_taxon_id = o.getInteger(""iconic_taxon_id"");this.iconic_taxon_id_was = this.iconic_taxon_id;this.iconic_taxon_name = o.getString(""iconic_taxon_name"");this.iconic_taxon_name_was = this.iconic_taxon_name;this.id = o.getInteger(""id"");this.id_was = this.id;this.id_please = o.getBoolean(""id_please"");this.id_please_was = this.id_please;this.latitude = o.getDouble(""latitude"");this.latitude_was = this.latitude;this.longitude = o.getDouble(""longitude"");this.longitude_was = this.longitude;this.observed_on = o.getTimestamp(""observed_on"");this.observed_on_was = this.observed_on;this.observed_on_string = o.getString(""observed_on_string"");this.observed_on_string_was = this.observed_on_string;this.out_of_range = o.getBoolean(""out_of_range"");this.out_of_range_was = this.out_of_range;this.captive = o.getBoolean(""captive"");this.captive_was = this.captive;this.place_guess = o.getString(""place_guess"");this.place_guess_was = this.place_guess;this.uuid = o.getString(""uuid"");this.positional_accuracy = o.getInteger(""positional_accuracy"");this.positional_accuracy_was = this.positional_accuracy;this.positioning_device = o.getString(""positioning_device"");this.positioning_device_was = this.positioning_device;this.positioning_method = o.getString(""positioning_method"");this.positioning_method_was = this.positioning_method;this.private_latitude = o.getDouble(""private_latitude"");this.private_latitude_was = this.private_latitude;this.private_longitude = o.getDouble(""private_longitude"");this.private_longitude_was = this.private_longitude;this.private_positional_accuracy = o.getInteger(""private_positional_accuracy"");this.private_positional_accuracy_was = this.private_positional_accuracy;this.quality_grade = o.getString(""quality_grade"");this.quality_grade_was = this.quality_grade;this.species_guess = o.getString(""species_guess"");this.species_guess_was = this.species_guess;this.taxon_id = o.getInteger(""taxon_id"");this.taxon_id_was = this.taxon_id;this.time_observed_at = o.getTimestamp(""time_observed_at"");this.time_observed_at_was = this.time_observed_at;this.updated_at = o.getTimestamp(""updated_at"");this.updated_at_was = this.updated_at;this.user_agent = o.getString(""user_agent"");this.user_agent_was = this.user_agent;this.user_id = o.getInteger(""user_id"");this.user_id_was = this.user_id;this.user_login = o.getString(""user_login"");this.user_login_was = this.user_login;this.is_deleted_was = this.is_deleted;this.comments = o.getJSONArray(""comments"");this.identifications = o.getJSONArray(""identifications"");this.favorites = o.getJSONArray(""faves"");try {this.photos = new ArrayList<ObservationPhoto>();JSONArray photos;photos = o.getJSONObject().getJSONArray(""observation_photos"");for (int i = 0; i < photos.length(); i++) {BetterJSONObject json = new BetterJSONObject((JSONObject)photos.get(i));ObservationPhoto photo = new ObservationPhoto(json);photo.observation_id = o.getInt(""id"");photo._observation_id = this._id;photo._photo_id = photo.photo_id;this.photos.add(photo);}} catch (JSONException e) {e.printStackTrace();}this.comments_count = o.getInteger(""comments_count"");this.identifications_count = o.getInteger(""identifications_count"");this.projects = o.getJSONArray(""project_observations"");this.preferred_common_name = null;JSONObject taxon = o.getJSONObject(""taxon"");if (taxon != null) {if (taxon.has(""common_name"") && !taxon.isNull(""common_name"")) {try {this.preferred_common_name = taxon.getJSONObject(""common_name"").optString(""name"");} catch (JSONException e) {e.printStackTrace();}} else {this.preferred_common_name = taxon.optString(""name"");}}}@Overridepublic String toString() {return ""Observation(id: "" + id + "", _id: "" + _id + "")"";}public JSONObject toJSONObject() {BetterJSONObject bo = new BetterJSONObject();bo.put(""_created_at"", _created_at);bo.put(""_synced_at"", _synced_at);bo.put(""_updated_at"", _updated_at);bo.put(""created_at"", created_at);bo.put(""description"", description);bo.put(""geoprivacy"", geoprivacy);bo.put(""iconic_taxon_id"", iconic_taxon_id);bo.put(""iconic_taxon_name"", iconic_taxon_name);bo.put(""id"", id);bo.put(""id_please"", id_please);bo.put(""latitude"", latitude);bo.put(""longitude"", longitude);bo.put(""observed_on"", observed_on);bo.put(""observed_on_string"", observed_on_string);bo.put(""out_of_range"", out_of_range);bo.put(""captive"", captive);bo.put(""place_guess"", place_guess);bo.put(""uuid"", uuid);bo.put(""positional_accuracy"", positional_accuracy);bo.put(""positioning_device"", positioning_device);bo.put(""positioning_method"", positioning_method);bo.put(""private_latitude"", private_latitude);bo.put(""private_longitude"", private_longitude);bo.put(""private_positional_accuracy"", private_positional_accuracy);bo.put(""quality_grade"", quality_grade);bo.put(""species_guess"", species_guess);bo.put(""taxon_id"", taxon_id);bo.put(""time_observed_at"", time_observed_at);bo.put(""updated_at"", updated_at);bo.put(""user_agent"", user_agent);bo.put(""user_id"", user_id);bo.put(""user_login"", user_login);bo.put(""identifications_count"", identifications_count);bo.put(""comment_count"", comments_count);return bo.getJSONObject();}public Uri getUri() {if (_id == null) {return null;} else {return ContentUris.withAppendedId(CONTENT_URI, _id);}}// Returns true if observation was modified because of the mergepublic boolean merge(Observation observation) {if (this._updated_at.before(observation.updated_at)) {// overwritethis.created_at = observation.created_at;this.description = observation.description;this.geoprivacy = observation.geoprivacy;this.iconic_taxon_id = observation.iconic_taxon_id;this.iconic_taxon_name = observation.iconic_taxon_name;if (observation.preferred_common_name != null) this.preferred_common_name = observation.preferred_common_name;this.id = observation.id;this.id_please = observation.id_please;this.latitude = observation.latitude;this.longitude = observation.longitude;this.observed_on = observation.observed_on;this.observed_on_string = observation.observed_on_string;this.out_of_range = observation.out_of_range;this.captive = observation.captive;this.place_guess = observation.place_guess;this.uuid = observation.uuid;this.positional_accuracy = observation.positional_accuracy;this.positioning_device = observation.positioning_device;this.positioning_method = observation.positioning_method;this.private_latitude = observation.private_latitude;this.private_longitude = observation.private_longitude;this.private_positional_accuracy = observation.private_positional_accuracy;this.quality_grade = observation.quality_grade;this.species_guess = observation.species_guess;this.taxon_id = observation.taxon_id;this.time_observed_at = observation.time_observed_at;this.updated_at = observation.updated_at;this.user_agent = observation.user_agent;this.user_id = observation.user_id;this.user_login = observation.user_login;this.comments_count = observation.comments_count;this.identifications_count = observation.identifications_count;return true;} else {// set if nullboolean isModified = false;if ((this.created_at == null) && (observation.created_at != null)) { this.created_at = observation.created_at; isModified = true; }if ((this.description == null) && (observation.description != null)) { this.description = observation.description; isModified = true; }if ((this.geoprivacy == null) && (observation.geoprivacy != null)) { this.geoprivacy = observation.geoprivacy; isModified = true; }if ((this.iconic_taxon_id == null) && (observation.iconic_taxon_id != null)) { this.iconic_taxon_id = observation.iconic_taxon_id; isModified = true; }if ((this.iconic_taxon_name == null) && (observation.iconic_taxon_name != null)) { this.iconic_taxon_name = observation.iconic_taxon_name; isModified = true; }if ((this.id == null) && (observation.id != null)) { this.id = observation.id; isModified = true; }if ((this.id_please == null) && (observation.id_please != null)) { this.id_please = observation.id_please; isModified = true; }if ((this.latitude == null) && (observation.latitude != null)) { this.latitude = observation.latitude; isModified = true; }if ((this.longitude == null) && (observation.longitude != null)) { this.longitude = observation.longitude; isModified = true; }if ((this.observed_on == null) && (observation.observed_on != null)) { this.observed_on = observation.observed_on; isModified = true; }if ((this.observed_on_string == null) && (observation.observed_on_string != null)) { this.observed_on_string = observation.observed_on_string; isModified = true; }if ((this.out_of_range == null) && (observation.out_of_range != null)) { this.out_of_range = observation.out_of_range; isModified = true; }if ((this.captive == null) && (observation.captive != null)) { this.captive = observation.captive; isModified = true; }if ((this.place_guess == null) && (observation.place_guess != null)) { this.place_guess = observation.place_guess; isModified = true; }if ((this.uuid == null) && (observation.uuid != null)) { this.uuid = observation.uuid; isModified = true; }if ((this.positional_accuracy == null) && (observation.positional_accuracy != null)) { this.positional_accuracy = observation.positional_accuracy; isModified = true; }if ((this.positioning_device == null) && (observation.positioning_device != null)) { this.positioning_device = observation.positioning_device; isModified = true; }if ((this.positioning_method == null) && (observation.positioning_method != null)) { this.positioning_method = observation.positioning_method; isModified = true; }if ((this.private_latitude == null) && (observation.private_latitude != null)) { this.private_latitude = observation.private_latitude; isModified = true; }if ((this.private_longitude == null) && (observation.private_longitude != null)) { this.private_longitude = observation.private_longitude; isModified = true; }if ((this.private_positional_accuracy == null) && (observation.private_positional_accuracy != null)) { this.private_positional_accuracy = observation.private_positional_accuracy; isModified = true; }if ((this.quality_grade == null) && (observation.quality_grade != null)) { this.quality_grade = observation.quality_grade; isModified = true; }if ((this.species_guess == null) && (observation.species_guess != null)) { this.species_guess = observation.species_guess; isModified = true; }if ((this.preferred_common_name == null) && (observation.preferred_common_name != null)) { this.preferred_common_name = observation.preferred_common_name; isModified = true; }if ((this.taxon_id == null) && (observation.taxon_id != null)) { this.taxon_id = observation.taxon_id; isModified = true; }if ((this.time_observed_at == null) && (observation.time_observed_at != null)) { this.time_observed_at = observation.time_observed_at; isModified = true; }if ((this.updated_at == null) && (observation.updated_at != null)) { this.updated_at = observation.updated_at; isModified = true; }if ((this.user_agent == null) && (observation.user_agent != null)) { this.user_agent = observation.user_agent; isModified = true; }if ((this.user_id == null) && (observation.user_id != null)) { this.user_id = observation.user_id; isModified = true; }if ((this.user_login == null) && (observation.user_login != null)) { this.user_login = observation.user_login; isModified = true; }if ((this.comments_count == null) && (observation.comments_count != null)) { this.comments_count = observation.comments_count; isModified = true; }if ((this.identifications_count == null) && (observation.identifications_count != null)) { this.identifications_count = observation.identifications_count; isModified = true; }return isModified;}}public ContentValues getContentValues() {ContentValues cv = new ContentValues();if (created_at != null) { cv.put(CREATED_AT, created_at.getTime()); }cv.put(DESCRIPTION, description);cv.put(GEOPRIVACY, geoprivacy);cv.put(ICONIC_TAXON_ID, iconic_taxon_id);cv.put(ICONIC_TAXON_NAME, iconic_taxon_name);cv.put(ID, id);cv.put(ID_PLEASE, id_please);cv.put(LATITUDE, latitude);cv.put(LONGITUDE, longitude);if (observed_on != null) { cv.put(OBSERVED_ON, observed_on.getTime()); }cv.put(OBSERVED_ON_STRING, observed_on_string);cv.put(OUT_OF_RANGE, out_of_range);cv.put(CAPTIVE, captive);cv.put(PLACE_GUESS, place_guess);cv.put(UUID, uuid);cv.put(POSITIONAL_ACCURACY, positional_accuracy);cv.put(POSITIONING_DEVICE, positioning_device);cv.put(POSITIONING_METHOD, positioning_method);cv.put(PRIVATE_LATITUDE, private_latitude);cv.put(PRIVATE_LONGITUDE, private_longitude);cv.put(PRIVATE_POSITIONAL_ACCURACY, private_positional_accuracy);cv.put(QUALITY_GRADE, quality_grade);cv.put(SPECIES_GUESS, species_guess);cv.put(PREFERRED_COMMON_NAME, preferred_common_name);cv.put(TAXON_ID, taxon_id);if (time_observed_at != null) { cv.put(TIME_OBSERVED_AT, time_observed_at.getTime()); }if (updated_at != null) { cv.put(UPDATED_AT, updated_at.getTime()); }cv.put(USER_AGENT, user_agent);cv.put(USER_ID, user_id);cv.put(USER_LOGIN, user_login);cv.put(COMMENTS_COUNT, comments_count);cv.put(IDENTIFICATIONS_COUNT, identifications_count);cv.put(LAST_COMMENTS_COUNT, last_comments_count);cv.put(LAST_IDENTIFICATIONS_COUNT, last_identifications_count);cv.put(IS_DELETED, is_deleted);return cv;}public ArrayList<NameValuePair> getParams() {final ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();if (description != null) { params.add(new BasicNameValuePair(""observation[description]"", description.toString())); }if (geoprivacy != null) { params.add(new BasicNameValuePair(""observation[geoprivacy]"", geoprivacy.toString())); }if (iconic_taxon_id != null) { params.add(new BasicNameValuePair(""observation[iconic_taxon_id]"", iconic_taxon_id.toString())); }if (id_please != null) { params.add(new BasicNameValuePair(""observation[id_please]"", id_please.toString())); }params.add(new BasicNameValuePair(""observation[latitude]"", latitude != null ? latitude.toString() : """"));params.add(new BasicNameValuePair(""observation[longitude]"", longitude != null ? longitude.toString() : """"));if (observed_on_string != null) { params.add(new BasicNameValuePair(""observation[observed_on_string]"", observed_on_string.toString())); }if (out_of_range != null) { params.add(new BasicNameValuePair(""observation[out_of_range]"", out_of_range.toString())); }if (captive != null) { params.add(new BasicNameValuePair(""observation[captive_flag]"", captive.toString())); }if (place_guess != null) { params.add(new BasicNameValuePair(""observation[place_guess]"", place_guess.toString())); }if (uuid != null) { params.add(new BasicNameValuePair(""observation[uuid]"", uuid)); }params.add(new BasicNameValuePair(""observation[positional_accuracy]"", positional_accuracy != null ? positional_accuracy.toString() : """"));if (positioning_device != null) { params.add(new BasicNameValuePair(""observation[positioning_device]"", positioning_device.toString())); }if (positioning_method != null) { params.add(new BasicNameValuePair(""observation[positioning_method]"", positioning_method.toString())); }if (private_latitude != null) { params.add(new BasicNameValuePair(""observation[private_latitude]"", private_latitude.toString())); }if (private_longitude != null) { params.add(new BasicNameValuePair(""observation[private_longitude]"", private_longitude.toString())); }if (private_positional_accuracy != null) { params.add(new BasicNameValuePair(""observation[private_positional_accuracy]"", private_positional_accuracy.toString())); }if (quality_grade != null) { params.add(new BasicNameValuePair(""observation[quality_grade]"", quality_grade.toString())); }if (species_guess != null) { params.add(new BasicNameValuePair(""observation[species_guess]"", species_guess.toString())); }if (taxon_id != null) { params.add(new BasicNameValuePair(""observation[taxon_id]"", taxon_id.toString())); }if (user_agent != null) { params.add(new BasicNameValuePair(""observation[user_agent]"", user_agent.toString())); }return params;}public static String sqlCreate() {return ""CREATE TABLE "" + TABLE_NAME + "" (""+ Observation._ID + "" INTEGER PRIMARY KEY,""+ ""_created_at INTEGER,""+ ""_synced_at INTEGER,""+ ""_updated_at INTEGER,""+ ""created_at INTEGER,""+ ""description TEXT,""+ ""geoprivacy TEXT,""+ ""iconic_taxon_id INTEGER,""+ ""iconic_taxon_name TEXT,""+ ""id INTEGER,""+ ""id_please INTEGER,""+ ""latitude REAL,""+ ""longitude REAL,""+ ""observed_on INTEGER,""+ ""observed_on_string TEXT,""+ ""out_of_range INTEGER,""+ ""captive INTEGER,""+ ""place_guess TEXT,""+ ""uuid TEXT,""+ ""positional_accuracy INTEGER,""+ ""positioning_device TEXT,""+ ""positioning_method TEXT,""+ ""private_latitude REAL,""+ ""private_longitude REAL,""+ ""private_positional_accuracy INTEGER,""+ ""quality_grade TEXT,""+ ""species_guess TEXT,""+ ""preferred_common_name TEXT,""+ ""taxon_id INTEGER,""+ ""time_observed_at INTEGER,""+ ""updated_at INTEGER,""+ ""user_agent TEXT,""+ ""user_id INTEGER,""+ ""user_login TEXT,""+ ""comments_count INTEGER,""+ ""identifications_count INTEGER,""+ ""last_comments_count INTEGER,""+ ""last_identifications_count INTEGER,""+ ""activity_viewed_at INTEGER,""+ ""last_activity_at INTEGER,""+ ""is_deleted INTEGER""+ "");"";}public boolean _created_at_changed() { return !String.valueOf(_created_at).equals(String.valueOf(_created_at_was)); }public boolean _synced_at_changed() { return !String.valueOf(_synced_at).equals(String.valueOf(_synced_at_was)); }public boolean _updated_at_changed() { return !String.valueOf(_updated_at).equals(String.valueOf(_updated_at_was)); }public boolean created_at_changed() { return !String.valueOf(created_at).equals(String.valueOf(created_at_was)); }public boolean description_changed() { return !String.valueOf(description).equals(String.valueOf(description_was)); }public boolean geoprivacy_changed() { return !String.valueOf(geoprivacy).equals(String.valueOf(geoprivacy_was)); }public boolean iconic_taxon_id_changed() { return !String.valueOf(iconic_taxon_id).equals(String.valueOf(iconic_taxon_id_was)); }public boolean iconic_taxon_name_changed() { return !String.valueOf(iconic_taxon_name).equals(String.valueOf(iconic_taxon_name_was)); }public boolean id_changed() { return !String.valueOf(id).equals(String.valueOf(id_was)); }public boolean id_please_changed() { return !String.valueOf(id_please).equals(String.valueOf(id_please_was)); }public boolean latitude_changed() { return !String.valueOf(latitude).equals(String.valueOf(latitude_was)); }public boolean longitude_changed() { return !String.valueOf(longitude).equals(String.valueOf(longitude_was)); }public boolean observed_on_changed() { return !String.valueOf(observed_on).equals(String.valueOf(observed_on_was)); }public boolean observed_on_string_changed() { return !String.valueOf(observed_on_string).equals(String.valueOf(observed_on_string_was)); }public boolean out_of_range_changed() { return !String.valueOf(out_of_range).equals(String.valueOf(out_of_range_was)); }public boolean captive_changed() { return !String.valueOf(captive).equals(String.valueOf(captive_was)); }public boolean place_guess_changed() { return !String.valueOf(place_guess).equals(String.valueOf(place_guess_was)); }public boolean positional_accuracy_changed() { return !String.valueOf(positional_accuracy).equals(String.valueOf(positional_accuracy_was)); }public boolean positioning_device_changed() { return !String.valueOf(positioning_device).equals(String.valueOf(positioning_device_was)); }public boolean positioning_method_changed() { return !String.valueOf(positioning_method).equals(String.valueOf(positioning_method_was)); }public boolean private_latitude_changed() { return !String.valueOf(private_latitude).equals(String.valueOf(private_latitude_was)); }public boolean private_longitude_changed() { return !String.valueOf(private_longitude).equals(String.valueOf(private_longitude_was)); }public boolean private_positional_accuracy_changed() { return !String.valueOf(private_positional_accuracy).equals(String.valueOf(private_positional_accuracy_was)); }public boolean quality_grade_changed() { return !String.valueOf(quality_grade).equals(String.valueOf(quality_grade_was)); }public boolean species_guess_changed() { return !String.valueOf(species_guess).equals(String.valueOf(species_guess_was)); }public boolean taxon_id_changed() { return !String.valueOf(taxon_id).equals(String.valueOf(taxon_id_was)); }public boolean time_observed_at_changed() { return !String.valueOf(time_observed_at).equals(String.valueOf(time_observed_at_was)); }public boolean updated_at_changed() { return !String.valueOf(updated_at).equals(String.valueOf(updated_at_was)); }public boolean user_agent_changed() { return !String.valueOf(user_agent).equals(String.valueOf(user_agent_was)); }public boolean user_id_changed() { return !String.valueOf(user_id).equals(String.valueOf(user_id_was)); }public boolean user_login_changed() { return !String.valueOf(user_login).equals(String.valueOf(user_login_was)); }public boolean is_deleted_changed() { return is_deleted != is_deleted_was; }public boolean isDirty() {if (_created_at_changed()) { return true; }if (_synced_at_changed()) { return true; }if (_updated_at_changed()) { return true; }if (created_at_changed()) { return true; }if (description_changed()) { return true; }if (geoprivacy_changed()) { return true; }if (iconic_taxon_id_changed()) { return true; }if (iconic_taxon_name_changed()) { return true; }if (id_changed()) { return true; }if (id_please_changed()) { return true; }if (latitude_changed()) { return true; }if (longitude_changed()) { return true; }if (observed_on_changed()) { return true; }if (observed_on_string_changed()) { return true; }if (out_of_range_changed()) { return true; }if (captive_changed()) { return true; }if (place_guess_changed()) { return true; }if (positional_accuracy_changed()) { return true; }if (positioning_device_changed()) { return true; }if (positioning_method_changed()) { return true; }if (private_latitude_changed()) { return true; }if (private_longitude_changed()) { return true; }if (private_positional_accuracy_changed()) { return true; }if (quality_grade_changed()) { return true; }if (species_guess_changed()) { return true; }if (taxon_id_changed()) { return true; }if (time_observed_at_changed()) { return true; }if (updated_at_changed()) { return true; }if (user_agent_changed()) { return true; }if (user_id_changed()) { return true; }if (user_login_changed()) { return true; }if (is_deleted_changed()) { return true; }return false;}public Integer updatesCount() {Integer idCount = this.identifications_count;// assume that one of the IDs is the owner's. Not entirely safe, but often isif (this.taxon_id != null && this.taxon_id != 0 && idCount != null && idCount > 0) {idCount--;}Integer c = this.comments_count == null ? 0 : this.comments_count + idCount;return c >= 0 ? c : 0;}public boolean unviewedUpdates() {Integer c = this.updatesCount();if (c == 0) {return false;}return (this.last_comments_count == null) || (this.last_comments_count < this.comments_count) ||(this.last_identifications_count == null) || (this.last_identifications_count < this.identifications_count);}}// END GENERATED BY /Users/kueda/projects/eclipse/workspace/iNaturalist/rails2android.rb AT Mon Jan 09 13:07:06 -0500 2012",Observation.java,0
200,"package org.inaturalist.android;import java.io.Serializable;import java.util.HashMap;import org.json.JSONException;import org.json.JSONObject;import android.content.ContentUris;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.provider.BaseColumns;import android.util.Log;public class Project implements BaseColumns, Serializable {public static final String TAG = ""Project"";public Integer _id;public Integer id;public String title;public String description;public String icon_url;public Integer check_list_id;public static final String TABLE_NAME = ""projects"";public static final int PROJECTS_URI_CODE = 1979;public static final int PROJECT_ID_URI_CODE = 1964;public static HashMap<String, String> PROJECTION_MAP;public static final String AUTHORITY = ""org.inaturalist.android.project"";public static final Uri    CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/projects"");public static final String CONTENT_TYPE = ""vnd.android.cursor.dir/vnd.google.inatproject"";public static final String CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/vnd.google.inatproject"";public static final String DEFAULT_SORT_ORDER = ""_id DESC"";public static final String ID = ""id"";public static final String TITLE = ""title"";public static final String DESCRIPTION = ""description"";public static final String ICON_URL = ""icon_url"";public static final String CHECK_LIST_ID = ""check_list_id"";public static final String[] PROJECTION = new String[] {Project._ID,Project.ID,Project.DESCRIPTION,Project.TITLE,Project.ICON_URL,Project.CHECK_LIST_ID};static {PROJECTION_MAP = new HashMap<String, String>();PROJECTION_MAP.put(Project._ID, Project._ID);PROJECTION_MAP.put(Project.ID, Project.ID);PROJECTION_MAP.put(Project.DESCRIPTION, Project.DESCRIPTION);PROJECTION_MAP.put(Project.TITLE, Project.TITLE);PROJECTION_MAP.put(Project.ICON_URL, Project.ICON_URL);PROJECTION_MAP.put(Project.CHECK_LIST_ID, Project.CHECK_LIST_ID);}public Project() {}public Project(Cursor c) {if (c.getPosition() == -1) c.moveToFirst();BetterCursor bc = new BetterCursor(c);this._id = bc.getInt(_ID);this.id = bc.getInt(ID);this.description = bc.getString(DESCRIPTION);this.title = bc.getString(TITLE);this.icon_url = bc.getString(ICON_URL);this.check_list_id = bc.getInt(CHECK_LIST_ID);}public Project(BetterJSONObject o) {this.id = o.getInt(""id"");this.title = o.getString(""title"");this.description = o.getString(""description"");this.icon_url = o.getString(""icon_url"");try {this.check_list_id = o.getJSONObject(""project_list"").getInt(""id"");} catch (JSONException e) {e.printStackTrace();}}public JSONObject toJSONObject() {BetterJSONObject obj = new BetterJSONObject();obj.put(""id"", id);obj.put(""title"", title);obj.put(""description"", description);obj.put(""icon_url"", icon_url);BetterJSONObject projectList = new BetterJSONObject();projectList.put(""id"", check_list_id);obj.put(""project_list"", projectList.getJSONObject());return obj.getJSONObject();}@Overridepublic String toString() {return ""Project(id: "" + id + "", _id: "" + _id + "")"";}public Uri getUri() {if (_id == null) {return null;} else {return ContentUris.withAppendedId(CONTENT_URI, _id);}}public ContentValues getContentValues() {ContentValues cv = new ContentValues();cv.put(ID, id);cv.put(DESCRIPTION, description);cv.put(TITLE, title);cv.put(ICON_URL, icon_url);cv.put(CHECK_LIST_ID, check_list_id);return cv;}public static String sqlCreate() {return ""CREATE TABLE "" + TABLE_NAME + "" (""+ Project._ID + "" INTEGER PRIMARY KEY,""+ ""title TEXT,""+ ""description TEXT,""+ ""icon_url TEXT,""+ ""id INTEGER,""+ ""check_list_id INTEGER""+ "");"";}}",Project.java,0
200,"package org.inaturalist.android;import java.util.Locale;/*** Created by ulrikeaxen on 1/4/15.*/public class LocaleHelper {private static final String DefaultLocale = ""en"";// add locale codes here when they are complete in valuespublic static final String[] SupportedLocales = new String[] {"""", // Use device locale""eu"",""gl""};public static String getDefaultLocale(){String languageCode = Locale.getDefault().getLanguage();for (int i = 0; i < SupportedLocales.length; i++)if (languageCode.equalsIgnoreCase(SupportedLocales[i]))return SupportedLocales[i];return DefaultLocale;}}",LocaleHelper.java,0
200,"package org.inaturalist.android;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.app.Activity;import android.content.Intent;import android.graphics.Color;import android.graphics.Typeface;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import com.flurry.android.FlurryAgent;public class IdentificationActivity extends AppCompatActivity {public static final String ID_REMARKS = ""id_remarks"";protected static final int TAXON_SEARCH_REQUEST_CODE = 301;public static final String TAXON_ID = ""taxon_id"";public static final String SPECIES_GUESS = ""species_guess"";public static final String ICONIC_TAXON_NAME = ""iconic_taxon_name"";private ActionBar mTopActionBar;private EditText mRemarks;private int mTaxonId = 0;private String mIconicTaxonName;private TextView mTaxonName;private TextView mIdName;private ImageView mIdPic;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:setResult(RESULT_CANCELED);finish();return true;}return super.onOptionsItemSelected(item);}/** Called when the activity is first created. */@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.new_identification);mRemarks = (EditText) findViewById(R.id.remarks);mTopActionBar = getSupportActionBar();mTopActionBar.setHomeButtonEnabled(true);mTopActionBar.setDisplayShowCustomEnabled(true);mTopActionBar.setDisplayHomeAsUpEnabled(true);mTopActionBar.setCustomView(R.layout.add_id_top_action_bar);mTopActionBar.setBackgroundDrawable(getResources().getDrawable(R.drawable.actionbar_background));mTopActionBar.setIcon(android.R.color.transparent);mTopActionBar.setLogo(R.drawable.up_icon);mTaxonName = (TextView) findViewById(R.id.id_taxon_name);mIdName = (TextView) findViewById(R.id.id_name);mIdPic = (ImageView) findViewById(R.id.id_pic);View saveId = (View) mTopActionBar.getCustomView().findViewById(R.id.save_id);saveId.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent();Bundle bundle = new Bundle();bundle.putInt(TAXON_ID, mTaxonId);bundle.putString(ID_REMARKS, mRemarks.getText().toString());bundle.putString(SPECIES_GUESS, mIdName.getText().toString());bundle.putString(ICONIC_TAXON_NAME, mIconicTaxonName);intent.putExtras(bundle);setResult(RESULT_OK, intent);finish();}});View changeId = (View) findViewById(R.id.id_change);changeId.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(IdentificationActivity.this, TaxonSearchActivity.class);startActivityForResult(intent, TAXON_SEARCH_REQUEST_CODE);}});// When loaded for the first time - show the taxon search dialogIntent intent = new Intent(IdentificationActivity.this, TaxonSearchActivity.class);startActivityForResult(intent, TAXON_SEARCH_REQUEST_CODE);}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if (requestCode == TAXON_SEARCH_REQUEST_CODE) {if (resultCode == RESULT_OK) {mTaxonId = data.getIntExtra(TaxonSearchActivity.TAXON_ID, 0);mIconicTaxonName = data.getStringExtra(TaxonSearchActivity.ICONIC_TAXON_NAME);mTaxonName.setText(data.getStringExtra(TaxonSearchActivity.TAXON_NAME));mTaxonName.setTypeface(null, Typeface.ITALIC);mIdName.setText(data.getStringExtra(TaxonSearchActivity.ID_NAME));UrlImageViewHelper.setUrlDrawable(mIdPic, data.getStringExtra(TaxonSearchActivity.ID_PIC_URL));} else {if (mTaxonId == 0) {// User never selected a taxon (even once) - close this window as wellsetResult(RESULT_CANCELED);finish();}}}}}",IdentificationActivity.java,0
200,"package org.inaturalist.android;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.media.Image;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Html;import android.text.method.LinkMovementMethod;import android.text.util.Linkify;import android.view.MenuItem;import android.view.View;import android.webkit.WebView;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.regex.Pattern;public class NewsArticle extends AppCompatActivity {public static final String KEY_ARTICLE = ""article"";public static final String KEY_IS_USER_FEED = ""is_user_feed"";private INaturalistApp mApp;private BetterJSONObject mArticle;private ActivityHelper mHelper;private TextView mArticleTitle;private WebView mArticleContentWeb;private TextView mArticleContent;private TextView mUsername;private ImageView mUserPic;private boolean mIsUserFeed;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:this.onBackPressed();return true;}return super.onOptionsItemSelected(item);}@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mHelper = new ActivityHelper(this);final Intent intent = getIntent();setContentView(R.layout.article);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);actionBar.setTitle(R.string.article);mArticleTitle = (TextView) findViewById(R.id.article_title);mArticleContentWeb = (WebView) findViewById(R.id.article_content_web);mArticleContent = (TextView) findViewById(R.id.article_content);mUsername = (TextView) findViewById(R.id.username);mUserPic = (ImageView) findViewById(R.id.user_pic);if (mApp == null) {mApp = (INaturalistApp)getApplicationContext();}if (savedInstanceState == null) {mArticle = (BetterJSONObject) intent.getSerializableExtra(KEY_ARTICLE);mIsUserFeed = intent.getBooleanExtra(KEY_IS_USER_FEED, false);} else {mArticle = (BetterJSONObject) savedInstanceState.getSerializable(KEY_ARTICLE);mIsUserFeed = savedInstanceState.getBoolean(KEY_IS_USER_FEED);}if (mArticle == null) {finish();return;}mArticleTitle.setText(mArticle.getString(""title""));if (mIsUserFeed) {mArticleContent.setVisibility(View.GONE);mArticleContentWeb.setVisibility(View.VISIBLE);mArticleContentWeb.setBackgroundColor(Color.TRANSPARENT);mArticleContentWeb.setVerticalScrollBarEnabled(false);String html = """" +""<html>"" +""<head>"" +""<style type=\""text/css\""> "" +""body {"" +""line-height: 22pt;"" +""margin: 0;"" +""padding: 0;"" +""font-family: \""HelveticaNeue-UltraLight\"", \""Segoe UI\"", \""Roboto Light\"", sans-serif;"" +""font-size: medium;"" +""} "" +""div {max-width: 100%;} "" +""figure { padding: 0; margin: 0; } "" +""img { padding-top: 4; padding-bottom: 4; max-width: 100%; } "" +""</style>"" +""</head>"" +""<body>"";mArticleContentWeb.loadDataWithBaseURL("""", html + mArticle.getString(""body"") + ""</body></html>"", ""text/html"", ""UTF-8"", """");} else {mArticleContentWeb.setVisibility(View.GONE);mArticleContent.setVisibility(View.VISIBLE);mArticleContent.setText(Html.fromHtml(mArticle.getString(""body"")));Linkify.addLinks(mArticleContent, Linkify.ALL);}final JSONObject user = mArticle.getJSONObject(""user"");mUsername.setText(user.optString(""login""));View.OnClickListener showUser = new View.OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(NewsArticle.this, UserProfile.class);intent.putExtra(""user"", new BetterJSONObject(user));startActivity(intent);}};if (user.has(""user_icon_url"") && !user.isNull(""user_icon_url"")) {UrlImageViewHelper.setUrlDrawable(mUserPic, user.optString(""user_icon_url""), R.drawable.ic_account_circle_black_24dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Nothing to do here}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Return a circular version of the profile picturereturn ImageUtils.getCircleBitmap(loadedBitmap);}});}mUserPic.setOnClickListener(showUser);mUsername.setOnClickListener(showUser);}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(KEY_ARTICLE, mArticle);outState.putBoolean(KEY_IS_USER_FEED, mIsUserFeed);super.onSaveInstanceState(outState);}@Overrideprotected void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}}@Overridepublic void onBackPressed() {super.onBackPressed();}}",NewsArticle.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.Hashtable;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Color;import android.graphics.Typeface;import android.graphics.drawable.ColorDrawable;import android.media.projection.MediaProjection;import android.os.Bundle;import android.os.Handler;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Editable;import android.text.Html;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.animation.AnimationUtils;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Filter;import android.widget.Filterable;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.ListView;import android.widget.TableLayout;import android.widget.TextView;import android.widget.Toast;public class ProjectSelectorActivity extends AppCompatActivity implements OnItemClickListener {private static final String TAG = ""INAT:ProjectSelectorActivity"";public static final String PROJECT_IDS = ""project_ids"";public static final String PROJECT_FIELDS = ""project_fields"";public static final String IS_CONFIRMATION = ""is_confirmation"";private ImageButton mSaveButton;private TextView mLoadingProjects;private ListView mProjectList;private EditText mSearchText;private INaturalistApp mApp;private int mObservationId;private ArrayList<Integer> mObservationProjects;private ProjectReceiver mProjectReceiver;private boolean mIsConfirmation;private ProjectAdapter mAdapter;private ActivityHelper mHelper;private Hashtable<Integer, ProjectField> mProjectFields;private HashMap<Integer, ProjectFieldValue> mProjectFieldValues = null;private HashMap<Integer, List<ProjectFieldViewer>> mProjectFieldViewers;private boolean mShownSearchBox;private int mLastProjectFieldFocused = -1;private int mLastProjectIdFocused = -1;private int mLastProjectFieldIndex;private int mLastProjectFieldTop;private class ProjectReceiver extends BroadcastReceiver {private ArrayList<JSONObject> mProjects;@Overridepublic void onReceive(Context context, Intent intent) {SerializableJSONArray serializableArray = (SerializableJSONArray) intent.getSerializableExtra(INaturalistService.PROJECTS_RESULT);JSONArray projectList = new JSONArray();if (serializableArray != null) {projectList = serializableArray.getJSONArray();}List<Integer> projectIds = new ArrayList<Integer>();mProjects = new ArrayList<JSONObject>();unregisterReceiver(mProjectReceiver);for (int i = 0; i < projectList.length(); i++) {try {mProjects.add(projectList.getJSONObject(i));projectIds.add(projectList.getJSONObject(i).getInt(""id""));} catch (JSONException e) {e.printStackTrace();}}Collections.sort(mProjects, new Comparator<JSONObject>() {@Overridepublic int compare(JSONObject lhs, JSONObject rhs) {try {return lhs.getString(""title"").compareTo(rhs.getString(""title""));} catch (JSONException e) {return 0;}}});if (projectList.length() > 0) {mLoadingProjects.setVisibility(View.GONE);mProjectList.setVisibility(View.VISIBLE);if (mIsConfirmation) {mProjectList.setDividerHeight(0);}mAdapter = new ProjectAdapter(ProjectSelectorActivity.this, mProjects);mProjectList.setAdapter(mAdapter);mProjectList.setOnItemClickListener(ProjectSelectorActivity.this);mProjectList.setOnScrollListener(new AbsListView.OnScrollListener() {@Overridepublic void onScrollStateChanged(AbsListView absListView, int i) {if (mSearchText.getVisibility() != View.VISIBLE) {mSearchText.setVisibility(View.VISIBLE);mSearchText.startAnimation(AnimationUtils.loadAnimation(ProjectSelectorActivity.this, R.anim.slide_in_from_top));mShownSearchBox = true;}}@Overridepublic void onScroll(AbsListView absListView, int i, int i1, int i2) { }});} else {mLoadingProjects.setText(R.string.no_projects);mLoadingProjects.setVisibility(View.VISIBLE);mProjectList.setVisibility(View.GONE);}ProjectFieldViewer.getProjectFields(ProjectSelectorActivity.this, projectIds, mObservationId, new ProjectFieldViewer.ProjectFieldsResults() {@Overridepublic void onProjectFieldsResults(Hashtable<Integer, ProjectField> projectFields, HashMap<Integer, ProjectFieldValue> projectValues) {mProjectFields = projectFields;if (mProjectFieldValues == null) {mProjectFieldValues = projectValues;}}});}}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:setResult(RESULT_CANCELED);finish();return true;case R.id.save_projects:saveProjectFieldValues();if (!validateProjectFields()) {return false;}Intent intent = new Intent();Bundle bundle = new Bundle();bundle.putIntegerArrayList(PROJECT_IDS, mObservationProjects);bundle.putSerializable(PROJECT_FIELDS, mProjectFieldValues);intent.putExtras(bundle);setResult(RESULT_OK, intent);finish();return true;}return super.onOptionsItemSelected(item);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {if (mIsConfirmation) {MenuInflater inflater = getMenuInflater();inflater.inflate(R.menu.project_selector_menu, menu);}return true;}@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mHelper = new ActivityHelper(this);mProjectReceiver = new ProjectReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_JOINED_PROJECTS_RESULT);registerReceiver(mProjectReceiver, filter);mProjectFieldViewers = new HashMap<Integer, List<ProjectFieldViewer>>();final Intent intent = getIntent();setContentView(R.layout.project_selector);if (mApp == null) {mApp = (INaturalistApp)getApplicationContext();}if (savedInstanceState == null) {mObservationId = (int) intent.getIntExtra(INaturalistService.OBSERVATION_ID, 0);mObservationProjects = intent.getIntegerArrayListExtra(INaturalistService.PROJECT_ID);mIsConfirmation = intent.getBooleanExtra(ProjectSelectorActivity.IS_CONFIRMATION, false);mProjectFieldValues = (HashMap<Integer, ProjectFieldValue>) intent.getSerializableExtra(ProjectSelectorActivity.PROJECT_FIELDS);} else {mObservationId = (int) savedInstanceState.getInt(INaturalistService.OBSERVATION_ID, 0);mObservationProjects = savedInstanceState.getIntegerArrayList(INaturalistService.PROJECT_ID);mIsConfirmation = savedInstanceState.getBoolean(ProjectSelectorActivity.IS_CONFIRMATION);mShownSearchBox = savedInstanceState.getBoolean(""mShownSearchBox"");mProjectFieldValues = (HashMap<Integer, ProjectFieldValue>) savedInstanceState.getSerializable(ProjectSelectorActivity.PROJECT_FIELDS);}ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);if (!mIsConfirmation) {actionBar.setDisplayShowCustomEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);LayoutInflater li = LayoutInflater.from(this);View customView = li.inflate(R.layout.project_selector_action_bar, null);actionBar.setCustomView(customView);actionBar.setLogo(R.drawable.up_icon);mSaveButton = (ImageButton) customView.findViewById(R.id.save);mSaveButton.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent();Bundle bundle = new Bundle();bundle.putIntegerArrayList(PROJECT_IDS, mObservationProjects);intent.putExtras(bundle);setResult(RESULT_OK, intent);finish();}});} else {actionBar.setLogo(R.drawable.ic_arrow_back);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setTitle(Html.fromHtml(getString(R.string.select_projects)));}mLoadingProjects = (TextView) findViewById(R.id.project_list_empty);mProjectList = (ListView) findViewById(R.id.project_list);mSearchText = (EditText) findViewById(R.id.search_filter);mSearchText.setHint(R.string.search_projects);mSearchText.addTextChangedListener(new TextWatcher() {@Overridepublic void onTextChanged(CharSequence s, int start, int before, int count) {if (mProjectReceiver != null && mAdapter != null) {mAdapter.getFilter().filter(s);}}@Overridepublic void beforeTextChanged(CharSequence s, int start, int count, int after) { }@Overridepublic void afterTextChanged(Editable s) { }});if (mShownSearchBox) {mSearchText.setVisibility(View.VISIBLE);}Intent serviceIntent = new Intent(INaturalistService.ACTION_GET_JOINED_PROJECTS, null, ProjectSelectorActivity.this, INaturalistService.class);startService(serviceIntent);}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putInt(INaturalistService.OBSERVATION_ID, mObservationId);outState.putIntegerArrayList(INaturalistService.PROJECT_ID, mObservationProjects);outState.putBoolean(ProjectSelectorActivity.IS_CONFIRMATION, mIsConfirmation);outState.putBoolean(""mShownSearchBox"", mShownSearchBox);saveProjectFieldValues();outState.putSerializable(PROJECT_FIELDS, mProjectFieldValues);super.onSaveInstanceState(outState);}@Overrideprotected void onPause() {super.onPause();if (mProjectReceiver != null) {try {unregisterReceiver(mProjectReceiver);} catch (Exception exc) {exc.printStackTrace();}}}@Overrideprotected void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}}// Update project field values from UIprivate void saveProjectFieldValues() {for (Integer projectId : mProjectFieldViewers.keySet()) {List<ProjectFieldViewer> viewers = mProjectFieldViewers.get(projectId);for (ProjectFieldViewer viewer : viewers) {String newValue = viewer.getValue();int fieldId = viewer.getField().field_id;ProjectFieldValue fieldValue = mProjectFieldValues.get(fieldId);if (fieldValue == null) {fieldValue = new ProjectFieldValue();fieldValue.field_id = fieldId;mProjectFieldValues.put(fieldId, fieldValue);}fieldValue.value = newValue;}}}public class ProjectAdapter extends ArrayAdapter<JSONObject> implements Filterable {private List<JSONObject> mItems;private List<JSONObject> mOriginalItems;private Context mContext;private Filter mFilter;public ProjectAdapter(Context context, List<JSONObject> objects) {super(context, R.layout.project_selector_item, objects);mItems = objects;mOriginalItems = new ArrayList<JSONObject>(mItems);mContext = context;mFilter = new Filter() {@Overrideprotected FilterResults performFiltering(CharSequence constraint) {FilterResults filterResults = new FilterResults();if (constraint != null) {// Retrieve the autocomplete results.String search = constraint.toString().toLowerCase();ArrayList<JSONObject> results = new ArrayList<JSONObject>(mOriginalItems.size());for (JSONObject item : mOriginalItems) {try {if (item.getString(""title"").toLowerCase().indexOf(search) > -1) {results.add(item);}} catch (JSONException e) {e.printStackTrace();}}// Assign the data to the FilterResultsfilterResults.values = results;filterResults.count = results.size();}return filterResults;}@Overrideprotected void publishResults(CharSequence constraint, FilterResults results) {mItems = (List<JSONObject>) results.values;notifyDataSetChanged();}};}@Overridepublic int getCount() {return mItems.size();}@Overridepublic JSONObject getItem(int index) {return mItems.get(index);}@Overridepublic Filter getFilter() {return mFilter;}@Overridepublic View getView(final int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);final View view = inflater.inflate(mIsConfirmation ? R.layout.project_selector_confirmation_item : R.layout.project_selector_item, parent, false);BetterJSONObject item = new BetterJSONObject(mItems.get(position));saveProjectFieldValues();TextView projectName = (TextView) view.findViewById(R.id.project_name);final String projectTitle = item.getString(""title"");projectName.setText(projectTitle);TextView projectDescription = (TextView) view.findViewById(R.id.project_description);final String noHTMLDescription = Html.fromHtml(item.getString(""description"")).toString();if (!mIsConfirmation) {// Strip HTML tagsprojectDescription.setText(noHTMLDescription);}ImageView projectPic = (ImageView) view.findViewById(R.id.project_pic);String iconUrl = item.getString(""icon_url"");if ((iconUrl != null) && (iconUrl.length() > 0)) {projectPic.setVisibility(View.VISIBLE);if (mIsConfirmation) {view.findViewById(R.id.project_pic_none).setVisibility(View.GONE);}UrlImageViewHelper.setUrlDrawable(projectPic, iconUrl);} else {projectPic.setVisibility(View.GONE);if (mIsConfirmation) {view.findViewById(R.id.project_pic_none).setVisibility(View.VISIBLE);}}if (mIsConfirmation) {if (noHTMLDescription.length() > 0) {((ViewGroup) view.findViewById(R.id.project_pic_container)).setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {mHelper.alert(projectTitle, noHTMLDescription);}});} else {// No description - Hide the info buttonview.findViewById(R.id.project_pic_info).setVisibility(View.GONE);}}view.setTag(R.id.TAG_PROJECT, item);final int projectId = item.getInt(""id"");view.setTag(R.id.TAG_IS_CHECKED, mObservationProjects.contains(Integer.valueOf(projectId)));if (mObservationProjects.contains(Integer.valueOf(projectId))) {// Checked onif (mIsConfirmation) {view.findViewById(R.id.project_selected_icon).setVisibility(View.VISIBLE);view.findViewById(R.id.project_unselected_icon).setVisibility(View.GONE);view.setBackgroundColor(Color.parseColor(""#f1f6e8""));// Show the project fieldsTableLayout projectFieldsTable = (TableLayout) view.findViewById(R.id.project_fields);List<ProjectField> fields = ProjectFieldViewer.sortProjectFields(projectId, mProjectFields);List<ProjectFieldViewer> viewers = new ArrayList<ProjectFieldViewer>();mProjectFieldViewers.put(projectId, viewers);if (fields.size() > 0) {projectFieldsTable.setVisibility(View.VISIBLE);((ViewGroup)view.findViewById(R.id.project_top_container)).setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View currentView) {mProjectList.performItemClick(view,position,projectId);}});} else {projectFieldsTable.setVisibility(View.GONE);}for (final ProjectField field : fields) {ProjectFieldValue fieldValue = mProjectFieldValues.get(field.field_id);final ProjectFieldViewer fieldViewer = new ProjectFieldViewer(ProjectSelectorActivity.this, field, fieldValue, true);viewers.add(fieldViewer);if (field.is_required) {view.findViewById(R.id.is_required).setVisibility(View.VISIBLE);}fieldViewer.setOnFocusedListener(new ProjectFieldViewer.FocusedListener() {@Overridepublic void onFocused() {mLastProjectFieldFocused = field.field_id;mLastProjectIdFocused = projectId;mLastProjectFieldIndex = mProjectList.getFirstVisiblePosition();View v = mProjectList.getChildAt(0);mLastProjectFieldTop = (v == null) ? 0 : (v.getTop() - mProjectList.getPaddingTop());}});projectFieldsTable.addView(fieldViewer.getView());}focusProjectField();} else {ImageView projectSelected = (ImageView) view.findViewById(R.id.project_selected);projectSelected.setImageResource(R.drawable.ic_action_accept);projectName.setTypeface(Typeface.DEFAULT_BOLD);projectDescription.setTypeface(Typeface.DEFAULT_BOLD);}} else {// Checked offif (mIsConfirmation) {view.findViewById(R.id.project_selected_icon).setVisibility(View.GONE);view.findViewById(R.id.project_unselected_icon).setVisibility(View.VISIBLE);view.setBackgroundColor(Color.parseColor(""#ffffff""));} else {ImageView projectSelected = (ImageView) view.findViewById(R.id.project_selected);projectSelected.setImageResource(android.R.color.transparent);projectName.setTypeface(Typeface.DEFAULT);projectDescription.setTypeface(Typeface.DEFAULT);}}return view;}}private void focusProjectField() {if ((mLastProjectIdFocused == -1) || (mLastProjectFieldFocused == -1)) {return;}for (final int projectId : mProjectFieldViewers.keySet()) {List<ProjectFieldViewer> fields = mProjectFieldViewers.get(projectId);for (final ProjectFieldViewer fieldViewer : fields) {final ProjectField field = fieldViewer.getField();if ((mLastProjectFieldFocused == field.field_id) && (mLastProjectIdFocused == projectId)) {mLastProjectIdFocused = -1;mLastProjectFieldFocused = -1;Handler handler = new Handler();handler.postDelayed(new Runnable() {@Overridepublic void run() {fieldViewer.setFocus();mProjectList.setSelectionFromTop(mLastProjectFieldIndex, mLastProjectFieldTop);}}, 5);}}}}@Overridepublic void onItemClick(AdapterView<?> arg0, View view, int arg2, long arg3) {BetterJSONObject project = (BetterJSONObject) view.getTag(R.id.TAG_PROJECT);Integer projectId = Integer.valueOf(project.getInt(""id""));if (mObservationProjects.contains(projectId)) {mObservationProjects.remove(projectId);} else {mObservationProjects.add(projectId);}mAdapter.notifyDataSetChanged();}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if (requestCode == ProjectFieldViewer.PROJECT_FIELD_TAXON_SEARCH_REQUEST_CODE) {if (resultCode == RESULT_OK) {// Notify the project fields that we returned from a taxon searchfor (List<ProjectFieldViewer> fields : mProjectFieldViewers.values()) {for (ProjectFieldViewer viewer : fields) {viewer.onTaxonSearchResult(data);}}}}}private boolean validateProjectFields() {if (mIsConfirmation) {HashMap<Integer, List<ProjectFieldViewer>> finalProjectFields = new HashMap<Integer, List<ProjectFieldViewer>>();// Only save the checked-on (selected) project fieldsfor (int projectId : mObservationProjects) {finalProjectFields.put(projectId, mProjectFieldViewers.get(projectId));}for (int projectId : finalProjectFields.keySet()) {List<ProjectFieldViewer> fields = finalProjectFields.get(projectId);if (fields == null) break;for (ProjectFieldViewer fieldViewer : fields) {if (!fieldViewer.isValid()) {Toast.makeText(this, String.format(getString(R.string.invalid_project_field), fieldViewer.getField().name), Toast.LENGTH_LONG).show();return false;}}}mProjectFieldViewers = finalProjectFields;}return true;}}",ProjectSelectorActivity.java,0
200,package org.inaturalist.android;public class MyGuidesTab extends BaseGuidesTab {@Overrideprotected String getActionName() {return INaturalistService.ACTION_GET_MY_GUIDES;}@Overrideprotected String getFilterResultName() {return INaturalistService.ACTION_MY_GUIDES_RESULT;}@Overrideprotected String getFilterResultParamName() {return INaturalistService.GUIDES_RESULT;}@Overrideprotected boolean recallServiceActionIfNoResults() {// If the search filter returns no results - load up the default my guides + offline guidesreturn true;}@Overrideprotected boolean requiresLogin() {return true;}@Overrideprotected String getUserLoginRequiredText() {return getResources().getString(R.string.please_sign_in_via_settings_for_guides);}},MyGuidesTab.java,0
200,"package org.inaturalist.android;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.Window;import android.widget.AdapterView;import android.widget.Button;import android.widget.ImageView;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TabHost;import android.widget.TextView;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;public class ProjectNews extends BaseFragmentActivity {private INaturalistApp mApp;private BetterJSONObject mProject;private ActivityHelper mHelper;private ListView mNewsList;private ProjectNewsAdapter mNewsListAdapter;private ProgressBar mLoadingNewsList;private TextView mNewsListEmpty;private ArrayList<JSONObject> mNews;private ProjectNewsReceiver mProjectNewsReceiver;private Boolean mIsUserFeed;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {if (!mIsUserFeed) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:this.onBackPressed();return true;}}return super.onOptionsItemSelected(item);}@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mHelper = new ActivityHelper(this);final Intent intent = getIntent();setContentView(R.layout.project_news);ActionBar actionBar = getSupportActionBar();mLoadingNewsList = (ProgressBar) findViewById(R.id.loading_news_list);mNewsListEmpty = (TextView) findViewById(R.id.news_list_empty);mNewsList = (ListView) findViewById(R.id.news_list);mNewsList.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {JSONObject item = (JSONObject) view.getTag();Intent intent = new Intent(ProjectNews.this, NewsArticle.class);intent.putExtra(NewsArticle.KEY_ARTICLE, new BetterJSONObject(item));intent.putExtra(NewsArticle.KEY_IS_USER_FEED, mIsUserFeed);startActivity(intent);}});if (mApp == null) {mApp = (INaturalistApp)getApplicationContext();}if (savedInstanceState == null) {mProject = (BetterJSONObject) intent.getSerializableExtra(""project"");mIsUserFeed = intent.getBooleanExtra(""is_user_feed"", false);Intent serviceIntent;if (mIsUserFeed) {// Get the user's news feedserviceIntent = new Intent(INaturalistService.ACTION_GET_NEWS, null, ProjectNews.this, INaturalistService.class);} else {// Get the project's news listserviceIntent = new Intent(INaturalistService.ACTION_GET_PROJECT_NEWS, null, ProjectNews.this, INaturalistService.class);serviceIntent.putExtra(INaturalistService.PROJECT_ID, mProject.getInt(""id""));}startService(serviceIntent);} else {mProject = (BetterJSONObject) savedInstanceState.getSerializable(""project"");mNews = loadListFromBundle(savedInstanceState, ""mNews"");mIsUserFeed = savedInstanceState.getBoolean(""mIsUserFeed"");}if ((mProject == null) && (!mIsUserFeed)) {finish();return;}actionBar.setTitle(mIsUserFeed ? R.string.feed : R.string.news);if (!mIsUserFeed) {actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);} else {onDrawerCreate(savedInstanceState);}refreshViewState();}private void saveListToBundle(Bundle outState, ArrayList<JSONObject> list, String key) {if (list != null) {JSONArray arr = new JSONArray(list);outState.putString(key, arr.toString());}}private ArrayList<JSONObject> loadListFromBundle(Bundle savedInstanceState, String key) {ArrayList<JSONObject> results = new ArrayList<JSONObject>();String obsString = savedInstanceState.getString(key);if (obsString != null) {try {JSONArray arr = new JSONArray(obsString);for (int i = 0; i < arr.length(); i++) {results.add(arr.getJSONObject(i));}return results;} catch (JSONException exc) {exc.printStackTrace();return null;}} else {return null;}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(""project"", mProject);outState.putBoolean(""mIsUserFeed"", mIsUserFeed);saveListToBundle(outState, mNews, ""mNews"");super.onSaveInstanceState(outState);}@Overrideprotected void onPause() {try {if (mProjectNewsReceiver != null) unregisterReceiver(mProjectNewsReceiver);} catch (Exception exc) {exc.printStackTrace();}super.onPause();}@Overrideprotected void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}mProjectNewsReceiver = new ProjectNewsReceiver();IntentFilter filter = new IntentFilter();filter.addAction(mIsUserFeed ? INaturalistService.ACTION_NEWS_RESULT : INaturalistService.ACTION_PROJECT_NEWS_RESULT);registerReceiver(mProjectNewsReceiver, filter);}@Overridepublic void onBackPressed() {super.onBackPressed();}private class ProjectNewsReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Bundle extras = intent.getExtras();String error = extras.getString(""error"");if (error != null) {mHelper.alert(String.format(getString(R.string.couldnt_load_project_news), error));return;}boolean isSharedOnApp = intent.getBooleanExtra(INaturalistService.IS_SHARED_ON_APP, false);SerializableJSONArray resultsJSON;if (isSharedOnApp) {resultsJSON = (SerializableJSONArray) mApp.getServiceResult(intent.getAction());} else {resultsJSON = (SerializableJSONArray) intent.getSerializableExtra(INaturalistService.RESULTS);}JSONArray results = resultsJSON.getJSONArray();ArrayList<JSONObject> resultsArray = new ArrayList<JSONObject>();if (results == null) {refreshViewState();return;}for (int i = 0; i < results.length(); i++) {try {JSONObject item = results.getJSONObject(i);resultsArray.add(item);} catch (JSONException e) {e.printStackTrace();}}mNews = resultsArray;refreshViewState();}}private void refreshViewState() {if (mNews == null) {mLoadingNewsList.setVisibility(View.VISIBLE);mNewsList.setVisibility(View.GONE);mNewsListEmpty.setVisibility(View.GONE);} else {mLoadingNewsList.setVisibility(View.GONE);if (mNews.size() == 0) {mNewsListEmpty.setVisibility(View.VISIBLE);} else {mNewsListEmpty.setVisibility(View.GONE);}mNewsListAdapter = new ProjectNewsAdapter(ProjectNews.this, mProject != null ? mProject.getJSONObject() : null, mNews);mNewsList.setAdapter(mNewsListAdapter);mNewsList.setVisibility(View.VISIBLE);}}}",ProjectNews.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import org.apache.commons.lang3.StringUtils;import android.content.ContentProvider;import android.content.ContentUris;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.UriMatcher;import android.database.Cursor;import android.database.SQLException;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.database.sqlite.SQLiteQueryBuilder;import android.net.Uri;import android.provider.BaseColumns;import android.provider.MediaStore;import android.text.TextUtils;import android.util.Log;public class ObservationProvider extends ContentProvider {private static final String TAG = ""ObservationProvider"";private static final String DATABASE_NAME = ""inaturalist.db"";private static final int DATABASE_VERSION = 10;private static final String[] TABLE_NAMES = new String[]{Observation.TABLE_NAME, ObservationPhoto.TABLE_NAME, Project.TABLE_NAME, ProjectObservation.TABLE_NAME, ProjectField.TABLE_NAME, ProjectFieldValue.TABLE_NAME};private static final SQLiteCursorFactory sFactory;public static final UriMatcher URI_MATCHER;static {sFactory = new SQLiteCursorFactory(true);URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);URI_MATCHER.addURI(Observation.AUTHORITY, ""observations"", Observation.OBSERVATIONS_URI_CODE);URI_MATCHER.addURI(Observation.AUTHORITY, ""observations/#"", Observation.OBSERVATION_ID_URI_CODE);URI_MATCHER.addURI(ObservationPhoto.AUTHORITY, ""observation_photos"", ObservationPhoto.OBSERVATION_PHOTOS_URI_CODE);URI_MATCHER.addURI(ObservationPhoto.AUTHORITY, ""observation_photos/#"", ObservationPhoto.OBSERVATION_PHOTO_ID_URI_CODE);URI_MATCHER.addURI(Project.AUTHORITY, ""projects"", Project.PROJECTS_URI_CODE);URI_MATCHER.addURI(Project.AUTHORITY, ""projects/#"", Project.PROJECT_ID_URI_CODE);URI_MATCHER.addURI(ProjectObservation.AUTHORITY, ""project_observations"", ProjectObservation.PROJECT_OBSERVATIONS_URI_CODE);URI_MATCHER.addURI(ProjectObservation.AUTHORITY, ""project_observations/#"", ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE);URI_MATCHER.addURI(ProjectField.AUTHORITY, ""project_fields"", ProjectField.PROJECT_FIELDS_URI_CODE);URI_MATCHER.addURI(ProjectField.AUTHORITY, ""project_fields/#"", ProjectField.PROJECT_FIELD_ID_URI_CODE);URI_MATCHER.addURI(ProjectFieldValue.AUTHORITY, ""project_field_values"", ProjectFieldValue.PROJECT_FIELD_VALUES_URI_CODE);URI_MATCHER.addURI(ProjectFieldValue.AUTHORITY, ""project_field_values/#"", ProjectFieldValue.PROJECT_FIELD_VALUE_ID_URI_CODE);}/*** This class helps open, create, and upgrade the database file.*/private static class DatabaseHelper extends SQLiteOpenHelper {Context mContext;DatabaseHelper(Context context) {super(context, DATABASE_NAME, sFactory, DATABASE_VERSION);mContext = context;}@Overridepublic void onCreate(SQLiteDatabase db) {db.execSQL(Observation.sqlCreate());db.execSQL(ObservationPhoto.sqlCreate());db.execSQL(Project.sqlCreate());db.execSQL(ProjectObservation.sqlCreate());db.execSQL(ProjectField.sqlCreate());db.execSQL(ProjectFieldValue.sqlCreate());}@Overridepublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {Log.w(TAG, ""Upgrading database from version "" + oldVersion + "" to "" + newVersion);// Do any changes to the existing tables (e.g. add columns), according to the new DB versionif (oldVersion < 7) {addColumnIfNotExists(db, ObservationPhoto.TABLE_NAME, ""uuid"", ""TEXT"");addColumnIfNotExists(db, Observation.TABLE_NAME, ""uuid"", ""TEXT"");}if (oldVersion < 8) {addColumnIfNotExists(db, Observation.TABLE_NAME, ""preferred_common_name"", ""TEXT"");}if (oldVersion < 9) {addColumnIfNotExists(db, ObservationPhoto.TABLE_NAME, ""photo_filename"", ""TEXT"");}if (oldVersion < 10) {// Need to change the constraint of the project field table - which is only possible// by recreating the tabledb.execSQL(""DROP TABLE IF EXISTS "" + ProjectField.TABLE_NAME);db.execSQL(ProjectField.sqlCreate());// Re-populate the tableIntent serviceIntent = new Intent(INaturalistService.ACTION_GET_JOINED_PROJECTS_ONLINE, null, mContext, INaturalistService.class);mContext.startService(serviceIntent);}}// Adds a new column to a table if doesn't exist already// @param db// @param tableName// @param columnName// @param columnDefinition - type + default value + contraints (e.g. ""CHAR(25) DEFAULT 4 NOT NULL"")private void addColumnIfNotExists(SQLiteDatabase db,  String tableName, String columnName, String columnDefinition) {Cursor cursor = db.rawQuery(""SELECT * FROM "" + tableName + "" LIMIT 1"", null);// See if column existsint columnIndex = cursor.getColumnIndex(columnName);cursor.close();if (columnIndex < 0) {// Add in the new columndb.execSQL(""ALTER TABLE "" + tableName + "" ADD COLUMN "" + columnName + "" "" + columnDefinition + "";"");}}}private DatabaseHelper mOpenHelper;@Overridepublic boolean onCreate() {mOpenHelper = new DatabaseHelper(getContext());return true;}@Overridepublic Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,String sortOrder) {SQLiteQueryBuilder qb = new SQLiteQueryBuilder();String orderBy;switch (URI_MATCHER.match(uri)) {case Observation.OBSERVATIONS_URI_CODE:qb.setTables(Observation.TABLE_NAME);qb.setProjectionMap(Observation.PROJECTION_MAP);orderBy = TextUtils.isEmpty(sortOrder) ? Observation.DEFAULT_SORT_ORDER : sortOrder;break;case Observation.OBSERVATION_ID_URI_CODE:qb.setTables(Observation.TABLE_NAME);qb.setProjectionMap(Observation.PROJECTION_MAP);qb.appendWhere(Observation._ID + ""="" + uri.getPathSegments().get(1));orderBy = TextUtils.isEmpty(sortOrder) ? Observation.DEFAULT_SORT_ORDER : sortOrder;break;case ObservationPhoto.OBSERVATION_PHOTOS_URI_CODE:qb.setTables(ObservationPhoto.TABLE_NAME);qb.setProjectionMap(ObservationPhoto.PROJECTION_MAP);orderBy = TextUtils.isEmpty(sortOrder) ? ObservationPhoto.DEFAULT_SORT_ORDER : sortOrder;break;case ObservationPhoto.OBSERVATION_PHOTO_ID_URI_CODE:qb.setTables(ObservationPhoto.TABLE_NAME);qb.setProjectionMap(ObservationPhoto.PROJECTION_MAP);qb.appendWhere(ObservationPhoto._ID + ""="" + uri.getPathSegments().get(1));orderBy = TextUtils.isEmpty(sortOrder) ? ObservationPhoto.DEFAULT_SORT_ORDER : sortOrder;break;case Project.PROJECTS_URI_CODE:qb.setTables(Project.TABLE_NAME);qb.setProjectionMap(Project.PROJECTION_MAP);orderBy = TextUtils.isEmpty(sortOrder) ? Project.DEFAULT_SORT_ORDER : sortOrder;break;case Project.PROJECT_ID_URI_CODE:qb.setTables(Project.TABLE_NAME);qb.setProjectionMap(Project.PROJECTION_MAP);qb.appendWhere(Project._ID + ""="" + uri.getPathSegments().get(1));orderBy = TextUtils.isEmpty(sortOrder) ? Project.DEFAULT_SORT_ORDER : sortOrder;break;case ProjectObservation.PROJECT_OBSERVATIONS_URI_CODE:qb.setTables(ProjectObservation.TABLE_NAME);qb.setProjectionMap(ProjectObservation.PROJECTION_MAP);orderBy = TextUtils.isEmpty(sortOrder) ? ProjectObservation.DEFAULT_SORT_ORDER : sortOrder;break;case ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE:qb.setTables(ProjectObservation.TABLE_NAME);qb.setProjectionMap(ProjectObservation.PROJECTION_MAP);qb.appendWhere(ProjectObservation._ID + ""="" + uri.getPathSegments().get(1));orderBy = TextUtils.isEmpty(sortOrder) ? ProjectObservation.DEFAULT_SORT_ORDER : sortOrder;break;case ProjectField.PROJECT_FIELDS_URI_CODE:qb.setTables(ProjectField.TABLE_NAME);qb.setProjectionMap(ProjectField.PROJECTION_MAP);orderBy = TextUtils.isEmpty(sortOrder) ? ProjectField.DEFAULT_SORT_ORDER : sortOrder;break;case ProjectField.PROJECT_FIELD_ID_URI_CODE:qb.setTables(ProjectField.TABLE_NAME);qb.setProjectionMap(ProjectField.PROJECTION_MAP);qb.appendWhere(ProjectField._ID + ""="" + uri.getPathSegments().get(1));orderBy = TextUtils.isEmpty(sortOrder) ? ProjectField.DEFAULT_SORT_ORDER : sortOrder;break;case ProjectFieldValue.PROJECT_FIELD_VALUES_URI_CODE:qb.setTables(ProjectFieldValue.TABLE_NAME);qb.setProjectionMap(ProjectFieldValue.PROJECTION_MAP);orderBy = TextUtils.isEmpty(sortOrder) ? ProjectFieldValue.DEFAULT_SORT_ORDER : sortOrder;break;case ProjectFieldValue.PROJECT_FIELD_VALUE_ID_URI_CODE:qb.setTables(ProjectFieldValue.TABLE_NAME);qb.setProjectionMap(ProjectField.PROJECTION_MAP);qb.appendWhere(ProjectFieldValue._ID + ""="" + uri.getPathSegments().get(1));orderBy = TextUtils.isEmpty(sortOrder) ? ProjectFieldValue.DEFAULT_SORT_ORDER : sortOrder;break;default:throw new IllegalArgumentException(""Unknown URI "" + uri);}// Get the database and run the querySQLiteDatabase db = mOpenHelper.getReadableDatabase();Cursor c = qb.query(db, projection, selection, selectionArgs, null, null, orderBy);// Tell the cursor what uri to watch, so it knows when its source data changesc.setNotificationUri(getContext().getContentResolver(), uri);return c;}@Overridepublic String getType(Uri uri) {switch (URI_MATCHER.match(uri)) {case Observation.OBSERVATIONS_URI_CODE:return Observation.CONTENT_TYPE;case Observation.OBSERVATION_ID_URI_CODE:return Observation.CONTENT_ITEM_TYPE;case Project.PROJECT_ID_URI_CODE:return Project.CONTENT_ITEM_TYPE;case ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE:return ProjectObservation.CONTENT_ITEM_TYPE;case ProjectField.PROJECT_FIELD_ID_URI_CODE:return ProjectField.CONTENT_ITEM_TYPE;case ProjectFieldValue.PROJECT_FIELD_VALUE_ID_URI_CODE:return ProjectFieldValue.CONTENT_ITEM_TYPE;default:throw new IllegalArgumentException(""Unknown URI "" + uri);}}@Overridepublic Uri insert(Uri uri, ContentValues initialValues) {String tableName;Uri contentUri;switch (URI_MATCHER.match(uri)) {case Observation.OBSERVATIONS_URI_CODE:tableName = Observation.TABLE_NAME;contentUri = Observation.CONTENT_URI;break;case Observation.OBSERVATION_ID_URI_CODE:tableName = Observation.TABLE_NAME;contentUri = Observation.CONTENT_URI;break;case ObservationPhoto.OBSERVATION_PHOTOS_URI_CODE:tableName = ObservationPhoto.TABLE_NAME;contentUri = ObservationPhoto.CONTENT_URI;break;case ObservationPhoto.OBSERVATION_PHOTO_ID_URI_CODE:tableName = ObservationPhoto.TABLE_NAME;contentUri = ObservationPhoto.CONTENT_URI;break;case Project.PROJECTS_URI_CODE:tableName = Project.TABLE_NAME;contentUri = Project.CONTENT_URI;break;case Project.PROJECT_ID_URI_CODE:tableName = Project.TABLE_NAME;contentUri = Project.CONTENT_URI;break;case ProjectObservation.PROJECT_OBSERVATIONS_URI_CODE:tableName = ProjectObservation.TABLE_NAME;contentUri = ProjectObservation.CONTENT_URI;break;case ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE:tableName = ProjectObservation.TABLE_NAME;contentUri = ProjectObservation.CONTENT_URI;break;case ProjectField.PROJECT_FIELDS_URI_CODE:tableName = ProjectField.TABLE_NAME;contentUri = ProjectField.CONTENT_URI;break;case ProjectField.PROJECT_FIELD_ID_URI_CODE:tableName = ProjectField.TABLE_NAME;contentUri = ProjectField.CONTENT_URI;break;case ProjectFieldValue.PROJECT_FIELD_VALUES_URI_CODE:tableName = ProjectFieldValue.TABLE_NAME;contentUri = ProjectFieldValue.CONTENT_URI;break;case ProjectFieldValue.PROJECT_FIELD_VALUE_ID_URI_CODE:tableName = ProjectFieldValue.TABLE_NAME;contentUri = ProjectFieldValue.CONTENT_URI;break;default:throw new IllegalArgumentException(""Unknown URI "" + uri);}ContentValues values;if (initialValues != null) {values = new ContentValues(initialValues);} else {values = new ContentValues();}Long now = Long.valueOf(System.currentTimeMillis());int uriCode = URI_MATCHER.match(uri);// Make sure that the fields are all setif  (values.containsKey(Observation._SYNCED_AT)) {// if synced at is being set, updated at should *always* match exactlyvalues.put(Observation._UPDATED_AT, values.getAsLong(Observation._SYNCED_AT));values.put(Observation._CREATED_AT, values.getAsLong(Observation._SYNCED_AT));} else if ((uriCode != Project.PROJECTS_URI_CODE) && (uriCode != Project.PROJECT_ID_URI_CODE) &&(uriCode != ProjectObservation.PROJECT_OBSERVATIONS_URI_CODE) && (uriCode != ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE) &&(uriCode != ProjectField.PROJECT_FIELDS_URI_CODE) && (uriCode != ProjectField.PROJECT_FIELD_ID_URI_CODE)) {values.put(Observation._CREATED_AT, now);values.put(Observation._UPDATED_AT, now);}SQLiteDatabase db = mOpenHelper.getWritableDatabase();Log.d(TAG, ""Insert: "" + tableName + ""; values: "" + values.toString());long rowId = db.insert(tableName, BaseColumns._ID, values);if (rowId > 0) {Uri newUri = ContentUris.withAppendedId(contentUri, rowId);getContext().getContentResolver().notifyChange(newUri, null);return newUri;}throw new SQLException(""Failed to insert row into "" + uri);}@Overridepublic int delete(Uri uri, String where, String[] whereArgs) {SQLiteDatabase db = mOpenHelper.getWritableDatabase();int count;String id;Uri contentUri;switch (URI_MATCHER.match(uri)) {case Observation.OBSERVATIONS_URI_CODE:// TODO delete associated observation photoscount = db.delete(Observation.TABLE_NAME, where, whereArgs);contentUri = Observation.CONTENT_URI;break;case Observation.OBSERVATION_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = Observation.CONTENT_URI;count = db.delete(Observation.TABLE_NAME, Observation._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);delete(ObservationPhoto.CONTENT_URI, ObservationPhoto._OBSERVATION_ID + ""="" + id, null);break;case ObservationPhoto.OBSERVATION_PHOTOS_URI_CODE:count = db.delete(ObservationPhoto.TABLE_NAME, where, whereArgs);contentUri = ObservationPhoto.CONTENT_URI;break;case ObservationPhoto.OBSERVATION_PHOTO_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ObservationPhoto.CONTENT_URI;count = db.delete(ObservationPhoto.TABLE_NAME, ObservationPhoto._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case Project.PROJECTS_URI_CODE:count = db.delete(Project.TABLE_NAME, where, whereArgs);contentUri = Project.CONTENT_URI;break;case Project.PROJECT_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = Project.CONTENT_URI;count = db.delete(Project.TABLE_NAME, Project._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case ProjectObservation.PROJECT_OBSERVATIONS_URI_CODE:count = db.delete(ProjectObservation.TABLE_NAME, where, whereArgs);contentUri = ProjectObservation.CONTENT_URI;break;case ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ProjectObservation.CONTENT_URI;count = db.delete(ProjectObservation.TABLE_NAME, Project._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case ProjectField.PROJECT_FIELDS_URI_CODE:count = db.delete(ProjectField.TABLE_NAME, where, whereArgs);contentUri = ProjectField.CONTENT_URI;break;case ProjectField.PROJECT_FIELD_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ProjectField.CONTENT_URI;count = db.delete(ProjectField.TABLE_NAME, Project._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case ProjectFieldValue.PROJECT_FIELD_VALUES_URI_CODE:count = db.delete(ProjectFieldValue.TABLE_NAME, where, whereArgs);contentUri = ProjectFieldValue.CONTENT_URI;break;case ProjectFieldValue.PROJECT_FIELD_VALUE_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ProjectFieldValue.CONTENT_URI;count = db.delete(ProjectFieldValue.TABLE_NAME, Project._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;default:throw new IllegalArgumentException(""Unknown URI "" + uri);}getContext().getContentResolver().notifyChange(uri, null);getContext().getContentResolver().notifyChange(contentUri, null);return count;}// Deletes photo files from local storage. Probably not a good idea, but leaving// it here for now in case we want to bring it back as an optionprivate void deleteAssociatedImages(String where) {Cursor c = query(ObservationPhoto.CONTENT_URI,new String[] {ObservationPhoto._ID, ObservationPhoto._PHOTO_ID},where,null,null);if (c.getCount() == 0) return;BetterCursor bc;ArrayList<Integer> photoIds = new ArrayList<Integer>();c.moveToFirst();while (!c.isAfterLast()) {bc = new BetterCursor(c);photoIds.add(bc.getInt(ObservationPhoto._PHOTO_ID));c.moveToNext();}String photoWhere = MediaStore.Images.ImageColumns._ID+"" IN (""+StringUtils.join(photoIds, "","")+"")"";getContext().getContentResolver().delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,photoWhere,null);}@Overridepublic int update(Uri uri, ContentValues values, String where, String[] whereArgs) {SQLiteDatabase db = mOpenHelper.getWritableDatabase();int count;String id;Uri contentUri;int uriCode = URI_MATCHER.match(uri);if  (values.containsKey(Observation._SYNCED_AT)) {// if synced at is being set, updated at should *always* match exactlyvalues.put(Observation._UPDATED_AT, values.getAsLong(Observation._SYNCED_AT));} else if ((uriCode != Project.PROJECTS_URI_CODE) && (uriCode != Project.PROJECT_ID_URI_CODE) &&(uriCode != ProjectObservation.PROJECT_OBSERVATIONS_URI_CODE) && (uriCode != ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE) &&(uriCode != ProjectField.PROJECT_FIELDS_URI_CODE) && (uriCode != ProjectField.PROJECT_FIELD_ID_URI_CODE)) {values.put(Observation._UPDATED_AT, System.currentTimeMillis());}switch (URI_MATCHER.match(uri)) {case Observation.OBSERVATIONS_URI_CODE:count = db.update(Observation.TABLE_NAME, values, where, whereArgs);contentUri = Observation.CONTENT_URI;break;case Observation.OBSERVATION_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = Observation.CONTENT_URI;Log.d(TAG, ""Update "" + Observation.TABLE_NAME + ""; "" + values.toString());count = db.update(Observation.TABLE_NAME, values, Observation._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);// update foreign key in observation_photosif (count > 0 && values.containsKey(Observation.ID)) {ContentValues cv = new ContentValues();cv.put(ObservationPhoto.OBSERVATION_ID, values.getAsInteger(Observation.ID));Log.d(TAG, ""Update "" + ObservationPhoto.TABLE_NAME + ""; "" + cv.toString());db.update(ObservationPhoto.TABLE_NAME, cv, ObservationPhoto._OBSERVATION_ID + ""="" + id, null);}// update foreign key in project_observations / project_field_valuesif ((count > 0) && (values.containsKey(Observation.ID)) && (values.get(Observation.ID) != null)) {ContentValues cv = new ContentValues();cv.put(ProjectObservation.OBSERVATION_ID, values.getAsInteger(Observation.ID));Log.d(TAG, ""Update observation from "" + id + ""to "" + values.getAsInteger(Observation.ID));db.update(ProjectObservation.TABLE_NAME, cv, ProjectObservation.OBSERVATION_ID + ""="" + id, null);cv = new ContentValues();cv.put(ProjectFieldValue.OBSERVATION_ID, values.getAsInteger(Observation.ID));db.update(ProjectFieldValue.TABLE_NAME, cv, ProjectFieldValue.OBSERVATION_ID + ""="" + id, null);}break;case ObservationPhoto.OBSERVATION_PHOTOS_URI_CODE:count = db.update(ObservationPhoto.TABLE_NAME, values, where, whereArgs);contentUri = ObservationPhoto.CONTENT_URI;break;case ObservationPhoto.OBSERVATION_PHOTO_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ObservationPhoto.CONTENT_URI;Log.d(TAG, ""Update "" + ObservationPhoto.TABLE_NAME + ""; "" + values.toString());count = db.update(ObservationPhoto.TABLE_NAME, values, ObservationPhoto._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case Project.PROJECTS_URI_CODE:count = db.update(Project.TABLE_NAME, values, where, whereArgs);contentUri = Project.CONTENT_URI;break;case Project.PROJECT_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = Project.CONTENT_URI;count = db.update(Project.TABLE_NAME, values, Project._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case ProjectObservation.PROJECT_OBSERVATIONS_URI_CODE:count = db.update(ProjectObservation.TABLE_NAME, values, where, whereArgs);contentUri = ProjectObservation.CONTENT_URI;break;case ProjectObservation.PROJECT_OBSERVATION_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ProjectObservation.CONTENT_URI;count = db.update(ProjectObservation.TABLE_NAME, values, ProjectObservation._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case ProjectField.PROJECT_FIELDS_URI_CODE:count = db.update(ProjectField.TABLE_NAME, values, where, whereArgs);contentUri = ProjectField.CONTENT_URI;break;case ProjectField.PROJECT_FIELD_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ProjectField.CONTENT_URI;count = db.update(ProjectField.TABLE_NAME, values, ProjectField._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;case ProjectFieldValue.PROJECT_FIELD_VALUES_URI_CODE:count = db.update(ProjectFieldValue.TABLE_NAME, values, where, whereArgs);contentUri = ProjectFieldValue.CONTENT_URI;break;case ProjectFieldValue.PROJECT_FIELD_VALUE_ID_URI_CODE:id = uri.getPathSegments().get(1);contentUri = ProjectFieldValue.CONTENT_URI;count = db.update(ProjectFieldValue.TABLE_NAME, values, ProjectFieldValue._ID + ""="" + id+ (!TextUtils.isEmpty(where) ? "" AND ("" + where + ')' : """"), whereArgs);break;default:throw new IllegalArgumentException(""Unknown URI "" + uri);}getContext().getContentResolver().notifyChange(uri, null);getContext().getContentResolver().notifyChange(contentUri, null);return count;}}",ObservationProvider.java,0
200,"package org.inaturalist.android;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.regex.Pattern;import org.joda.time.DateTime;import org.joda.time.Duration;import org.json.JSONException;import org.json.JSONObject;import com.cocosw.bottomsheet.BottomSheet;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.app.Activity;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.Typeface;import android.os.Build;import android.os.Handler;import android.text.Html;import android.text.method.LinkMovementMethod;import android.text.util.Linkify;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ImageView;import android.widget.PopupMenu;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;public class CommentsIdsAdapter extends ArrayAdapter<BetterJSONObject> implements OnClickListener {private final Handler mMainHandler;private final boolean mIsNewLayout;private final ActivityHelper mHelper;private List<BetterJSONObject> mItems;private Context mContext;private ArrayList<Boolean> mAgreeing;private String mLogin;private int mTaxonId;private OnIDAdded mOnIDAddedCb;private boolean mReadOnly;public static interface OnIDAdded {public void onIdentificationAdded(BetterJSONObject taxon);public void onIdentificationRemoved(BetterJSONObject taxon);public void onCommentRemoved(BetterJSONObject comment);public void onCommentUpdated(BetterJSONObject comment);};public boolean isEnabled(int position) {return false;}public CommentsIdsAdapter(Context context, List<BetterJSONObject> objects, int taxonId, OnIDAdded onIDAddedCb) {this(context, objects, taxonId, onIDAddedCb, false, false);}public CommentsIdsAdapter(Context context, List<BetterJSONObject> objects, int taxonId, OnIDAdded onIDAddedCb, boolean isNewLayout) {this(context, objects, taxonId, onIDAddedCb, isNewLayout, false);}public CommentsIdsAdapter(Context context, List<BetterJSONObject> objects, int taxonId, OnIDAdded onIDAddedCb, boolean isNewLayout, boolean readOnly) {super(context, R.layout.comment_id_item, objects);mReadOnly = readOnly;mItems = objects;mAgreeing = new ArrayList<Boolean>();while (mAgreeing.size() < mItems.size()) mAgreeing.add(false);mContext = context;mTaxonId = taxonId;mOnIDAddedCb = onIDAddedCb;mIsNewLayout = isNewLayout;mHelper = new ActivityHelper(mContext);SharedPreferences prefs = mContext.getSharedPreferences(""iNaturalistPreferences"", Activity.MODE_PRIVATE);mLogin = prefs.getString(""username"", null);mMainHandler = new Handler(context.getMainLooper());}public void addItemAtBeginning(BetterJSONObject newItem) {mItems.add(0, newItem);}@Overridepublic View getView(final int position, View convertView, ViewGroup parent) {Resources res = mContext.getResources();LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);final View view = inflater.inflate(mIsNewLayout ? R.layout.comment_id_item_obs_viewer : R.layout.comment_id_item, parent, false);final BetterJSONObject item = mItems.get(position);try {final TextView comment = (TextView) view.findViewById(R.id.comment);RelativeLayout idLayout = (RelativeLayout) view.findViewById(R.id.id_layout);final RelativeLayout idAgreeLayout = (RelativeLayout) view.findViewById(R.id.id_agree_container);TextView postedOn = (TextView) view.findViewById(R.id.posted_on);final String username = item.getJSONObject(""user"").getString(""login"");Timestamp postDate = item.getTimestamp(""updated_at"");if (mIsNewLayout) {postedOn.setText(String.format(res.getString(item.getString(""type"").equals(""comment"") ? R.string.comment_title : R.string.id_title),username, formatIdDate(postDate)));} else {SimpleDateFormat format = new SimpleDateFormat(""LLL d, yyyy"");postedOn.setText(String.format(res.getString(R.string.posted_by),(mLogin != null) && username.equalsIgnoreCase(mLogin) ? res.getString(R.string.you) : username,format.format(postDate)));}OnClickListener showUser = new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(mContext, UserProfile.class);intent.putExtra(""user"", new BetterJSONObject(item.getJSONObject(""user"")));mContext.startActivity(intent);}};final ImageView userPic = (ImageView) view.findViewById(R.id.user_pic);boolean hasUserIcon = item.getJSONObject(""user"").getString(""user_icon_url"") != null;userPic.setOnClickListener(showUser);postedOn.setOnClickListener(showUser);if (hasUserIcon) {UrlImageViewHelper.setUrlDrawable(userPic, item.getJSONObject(""user"").getString(""user_icon_url""), R.drawable.ic_account_circle_black_24dp, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Nothing to do here}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Return a circular version of the profile picturereturn ImageUtils.getCircleBitmap(loadedBitmap);}});} else {if (mIsNewLayout) {userPic.setAlpha(100);}}final ImageView moreMenu = (ImageView) view.findViewById(R.id.more_menu);final boolean isComment = item.getString(""type"").equals(""comment"");final View loading = view.findViewById(R.id.loading);final DialogInterface.OnClickListener onClick = new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int which) {switch (which) {case R.id.delete:// Display deletion confirmation dialogmHelper.confirm(mContext.getString(isComment ? R.string.delete_comment : R.string.delete_id),isComment ? R.string.delete_comment_message : R.string.delete_id_message,new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {loading.setVisibility(View.VISIBLE);if (isComment) {mOnIDAddedCb.onCommentRemoved(item);} else {mOnIDAddedCb.onIdentificationRemoved(item);}}}, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {}}, R.string.yes, R.string.no);break;case R.id.edit:if (isComment) {mOnIDAddedCb.onCommentUpdated(item);}}}};if (moreMenu != null) {moreMenu.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {if (loading.getVisibility() == View.VISIBLE) {return;}if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {PopupMenu popup = new PopupMenu(getContext(), moreMenu);popup.getMenuInflater().inflate(isComment && username.equalsIgnoreCase(mLogin) ? R.menu.comment_menu : R.menu.id_menu, popup.getMenu());popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {@Overridepublic boolean onMenuItemClick(android.view.MenuItem menuItem) {onClick.onClick(null, menuItem.getItemId());return true;}});popup.show();} else {new BottomSheet.Builder((Activity) mContext).sheet(R.menu.id_menu).listener(onClick).show();}}});}if (item.getString(""type"").equals(""comment"")) {// Commentcomment.setVisibility(View.VISIBLE);idLayout.setVisibility(View.GONE);loading.setVisibility(View.GONE);if (mIsNewLayout) idAgreeLayout.setVisibility(View.GONE);comment.setText(Html.fromHtml(item.getString(""body"")));Linkify.addLinks(comment, Linkify.ALL);comment.setMovementMethod(LinkMovementMethod.getInstance());comment.setOnLongClickListener(new View.OnLongClickListener() {@Overridepublic boolean onLongClick(View view) {copyToClipBoard(comment.getText().toString());Toast.makeText(mContext, R.string.comment_copied, Toast.LENGTH_SHORT).show();return false;}});if (mIsNewLayout) {postedOn.setTextColor(postedOn.getTextColors().withAlpha(255));if (hasUserIcon) userPic.setAlpha(255);}} else {// IdentificationidLayout.setVisibility(View.VISIBLE);String body = item.getString(""body"");if (body != null && body.length() > 0) {comment.setText(Html.fromHtml(body));Linkify.addLinks(comment, Linkify.ALL);comment.setMovementMethod(LinkMovementMethod.getInstance());comment.setVisibility(View.VISIBLE);comment.setOnLongClickListener(new View.OnLongClickListener() {@Overridepublic boolean onLongClick(View view) {copyToClipBoard(comment.getText().toString());Toast.makeText(mContext, R.string.id_comment_copied, Toast.LENGTH_SHORT).show();return false;}});if (!mIsNewLayout) {ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) comment.getLayoutParams();layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin + 25,layoutParams.rightMargin,layoutParams.bottomMargin);comment.setLayoutParams(layoutParams);}} else {comment.setVisibility(View.GONE);}ImageView idPic = (ImageView) view.findViewById(R.id.id_pic);UrlImageViewHelper.setUrlDrawable(idPic, item.getJSONObject(""taxon"").getString(""image_url""), R.drawable.iconic_taxon_unknown);TextView idName = (TextView) view.findViewById(R.id.id_name);if (!item.getJSONObject(""taxon"").isNull(""common_name"")) {idName.setText(item.getJSONObject(""taxon"").getJSONObject(""common_name"").getString(""name""));} else {idName.setText(item.getJSONObject(""taxon"").getString(""name""));}TextView idTaxonName = (TextView) view.findViewById(R.id.id_taxon_name);idTaxonName.setText(item.getJSONObject(""taxon"").getString(""name""));String rank = item.getJSONObject(""taxon"").optString(""rank"", null);idTaxonName.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.NORMAL));if (rank != null) {if ((rank.equalsIgnoreCase(""genus"")) || (rank.equalsIgnoreCase(""species""))) {idTaxonName.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.ITALIC));}}Boolean isCurrent = item.getBoolean(""current"");if ((isCurrent == null) || (!isCurrent)) {// An outdated identification - show as faded-outidName.setTextColor(idName.getTextColors().withAlpha(100));idTaxonName.setTextColor(idTaxonName.getTextColors().withAlpha(100));if (!mIsNewLayout) postedOn.setTextColor(postedOn.getTextColors().withAlpha(100));idPic.setAlpha(100);userPic.setAlpha(100);} else {idName.setTextColor(idName.getTextColors().withAlpha(255));idTaxonName.setTextColor(idTaxonName.getTextColors().withAlpha(255));if (!mIsNewLayout) postedOn.setTextColor(postedOn.getTextColors().withAlpha(255));idPic.setAlpha(255);if (hasUserIcon) userPic.setAlpha(255);}final View agree = view.findViewById(R.id.id_agree);agree.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {if ((mLogin != null) && (username.equalsIgnoreCase(mLogin))) {mOnIDAddedCb.onIdentificationRemoved(item);} else {mOnIDAddedCb.onIdentificationAdded(item);mTaxonId = item.getInt(""taxon_id"");}loading.setVisibility(View.VISIBLE);if (!mIsNewLayout) {agree.setVisibility(View.GONE);}mAgreeing.set(position, true);}});loading.setVisibility(View.GONE);// See if there's ID of the same taxon before this oneint currentTaxonId = item.getInt(""taxon_id"");boolean foundPreviousSameTaxon = false;for (int i = 0; i < position; i++) {BetterJSONObject taxon = mItems.get(i);Integer taxonId = taxon.getInt(""taxon_id"");if ((taxonId != null) && (taxonId == currentTaxonId)) {foundPreviousSameTaxon = true;break;}}boolean didNotIdThisBefore = true;for (int i = 0; i < mItems.size(); i++) {if (mLogin == null) break;if (i == position) continue;BetterJSONObject taxon = mItems.get(i);if ((taxon.getJSONObject(""user"").getString(""login"").equalsIgnoreCase(mLogin))) {Integer taxonId = taxon.getInt(""taxon_id"");if ((taxonId != null) && (taxonId == currentTaxonId)) {// Agreed on the current taxon type beforedidNotIdThisBefore = false;break;}}}if (!foundPreviousSameTaxon && didNotIdThisBefore) {// First taxon id of its kind AND the current user didn't ID this taxon before -// show agree buttonif (mIsNewLayout) {idAgreeLayout.setVisibility(View.VISIBLE);} else {agree.setVisibility(View.VISIBLE);}} else {// Second (or more) taxon id of its kind - don't show agree buttonif (mIsNewLayout) {idAgreeLayout.setVisibility(View.GONE);} else {agree.setVisibility(View.GONE);}}if (moreMenu != null) moreMenu.setVisibility(View.GONE);if ((mLogin != null) && (username.equalsIgnoreCase(mLogin))) {if (!mIsNewLayout) {((Button)agree).setText(R.string.remove);agree.setVisibility(View.VISIBLE);} else {idAgreeLayout.setVisibility(View.GONE);if (moreMenu != null) moreMenu.setVisibility(View.VISIBLE);}if ((isCurrent == null) || (!isCurrent)) {// Faded IDs should not have a ""Remove"" buttonif (mIsNewLayout) {idAgreeLayout.setVisibility(View.GONE);} else {agree.setVisibility(View.GONE);}}} else {if (!mIsNewLayout) ((Button)agree).setText(R.string.agree);}if ((mAgreeing.get(position) != null) && (mAgreeing.get(position) == true)) {loading.setVisibility(View.VISIBLE);if (!mIsNewLayout) {agree.setVisibility(View.GONE);} else {idAgreeLayout.setVisibility(View.GONE);}}if (mLogin == null) {// Can't agree if not logged inif (!mIsNewLayout) {agree.setVisibility(View.GONE);} else {idAgreeLayout.setVisibility(View.GONE);}}if (mIsNewLayout) {idLayout.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {Intent intent = new Intent(mContext, GuideTaxonActivity.class);BetterJSONObject originalTaxon = mItems.get(position);JSONObject taxon = new JSONObject();try {taxon.put(""id"", originalTaxon.getInt(""taxon_id""));taxon.put(""common_name"", originalTaxon.getJSONObject(""common_name""));} catch (JSONException e) {e.printStackTrace();}intent.putExtra(""taxon"", new BetterJSONObject(taxon));intent.putExtra(""guide_taxon"", false);intent.putExtra(""show_add"", false);intent.putExtra(""download_taxon"", true);mContext.startActivity(intent);}});}}if (moreMenu != null) {if ((mLogin == null) || ((mLogin != null) && (!username.equalsIgnoreCase(mLogin)) && (mReadOnly))) {moreMenu.setVisibility(View.GONE);}}} catch (JSONException e) {// TODO Auto-generated catch blocke.printStackTrace();}view.setTag(item);if (!mIsNewLayout) view.setOnClickListener(this);return view;}public static String formatIdDate(Timestamp postDate) {Duration difference = new Duration(postDate.getTime(), (new Date()).getTime());long days = difference.getStandardDays();long hours = difference.getStandardHours();long minutes = difference.getStandardMinutes();if (days <= 30) {// Less than 30 days ago - display as 3m (mins), 3h (hours), 3d (days) or 3w (weeks)if (days < 1) {if (hours < 1) {return String.format(""%dm"", minutes);} else {return String.format(""%dh"", hours);}} else if (days < 7) {return String.format(""%dd"", days);} else {return String.format(""%dw"", days / 7);}} else {Calendar today = Calendar.getInstance();today.setTime(new Date());Calendar calDate = Calendar.getInstance();calDate.setTimeInMillis(postDate.getTime());String dateFormatString;if (today.get(Calendar.YEAR) > calDate.get(Calendar.YEAR)) {// Previous year(s)dateFormatString = ""MM/dd/yy"";} else {// Current yeardateFormatString = ""MMM d"";}SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatString);return dateFormat.format(new Date(postDate.getTime()));}}@Overridepublic void onClick(View view) {BetterJSONObject item = (BetterJSONObject) view.getTag();if (!item.getString(""type"").equals(""identification"")) {return;}Intent intent = new Intent(mContext, GuideTaxonActivity.class);intent.putExtra(""taxon"", new BetterJSONObject(item.getJSONObject(""taxon"")));intent.putExtra(""guide_taxon"", false);intent.putExtra(""show_add"", false);intent.putExtra(""download_taxon"", true);mContext.startActivity(intent);}private void copyToClipBoard(String text) {int sdk = android.os.Build.VERSION.SDK_INT;if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {android.content.ClipboardManager clipboard = (android.content.ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);android.content.ClipData clip = android.content.ClipData.newPlainText(text, text);clipboard.setPrimaryClip(clip);} else {android.text.ClipboardManager clipboard = (android.text.ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);clipboard.setText(text);}}}",CommentsIdsAdapter.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import java.util.List;import android.annotation.SuppressLint;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.drawable.Drawable;import android.graphics.drawable.LayerDrawable;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.app.NavUtils;import android.support.v4.view.MenuItemCompat;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuItem;import android.widget.ImageView;import android.widget.TextView;import com.flurry.android.FlurryAgent;public class TutorialActivity extends AppCompatActivity {@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}private class TutorialAdapter extends FragmentPagerAdapter implements OnPageChangeListener {private AppCompatActivity mContext;private int mCount;public TutorialAdapter(AppCompatActivity context) {super(context.getSupportFragmentManager());mContext = context;String inatNetwork = mApp.getInaturalistNetworkMember();String[] images;if (inatNetwork == null) {// No network selected - use default tutorial imagesimages = getResources().getStringArray(R.array.tutorial_images);} else {// Use network specific tutorial imagesString imagesArrayName = mApp.getStringResourceByName(""inat_tutorial_images_"" + inatNetwork);images = mApp.getStringArrayResourceByName(imagesArrayName);}mCount = images.length;}@Overridepublic Fragment getItem(int position) {Bundle args = new Bundle();args.putInt(""id"", position);Fragment fragment = Fragment.instantiate(mContext, TutorialFragment.class.getName(), args);return fragment;}@Overridepublic int getCount() {return mCount;}@Overridepublic void onPageScrollStateChanged(int arg0) {}@Overridepublic void onPageScrolled(int arg0, float arg1, int arg2) {}@SuppressLint(""NewApi"")@Overridepublic void onPageSelected(int arg0) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {invalidateOptionsMenu();}}}private static final int ACTION_PREVIOUS = 0x100;private static final int ACTION_NEXT = 0x101;private static final int ACTION_SKIP = 0x102;private TutorialAdapter mAdapter;private ViewPager mViewPager;private INaturalistApp mApp;@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.tutorial);Intent intent = getIntent();mViewPager = (ViewPager) findViewById(R.id.pager);final ActionBar actionBar = getSupportActionBar();if ((intent == null) || (!intent.getBooleanExtra(""first_time"", false))) {actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);}actionBar.setIcon(android.R.color.transparent);mApp = (INaturalistApp) getApplicationContext();mAdapter = new TutorialAdapter(this);mViewPager.setAdapter(mAdapter);mViewPager.setOnPageChangeListener(mAdapter);mApp.detectUserCountryAndUpdateNetwork(this);}@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) {if ((keyCode == KeyEvent.KEYCODE_BACK)) {SharedPreferences preferences = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);preferences.edit().putBoolean(""first_time"", false).apply();}return super.onKeyDown(keyCode, event);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {SharedPreferences preferences = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:preferences.edit().putBoolean(""first_time"", false).apply();finish();return true;case ACTION_SKIP:preferences.edit().putBoolean(""first_time"", false).apply();finish();return true;case ACTION_NEXT:if (mViewPager.getCurrentItem() == mAdapter.getCount() - 1) {// Pressed the finish buttonpreferences.edit().putBoolean(""first_time"", false).apply();finish();return true;}mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 1);return true;case ACTION_PREVIOUS:mViewPager.setCurrentItem(mViewPager.getCurrentItem() - 1);return true;}return super.onOptionsItemSelected(item);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {super.onCreateOptionsMenu(menu);// Add either a ""next"" or ""finish"" button to the action bar, depending on which page is currently selected.if (mViewPager.getCurrentItem() > 0) {MenuItem item = menu.add(Menu.NONE, ACTION_PREVIOUS, Menu.NONE, R.string.previous);MenuItemCompat.setShowAsAction(item, MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);}if ((mViewPager.getCurrentItem() < mAdapter.getCount() - 1)) {MenuItem item2 = menu.add(Menu.NONE, ACTION_SKIP, Menu.NONE, R.string.skip2);MenuItemCompat.setShowAsAction(item2, MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);}MenuItem item3 = menu.add(Menu.NONE, ACTION_NEXT, Menu.NONE,(mViewPager.getCurrentItem() == mAdapter.getCount() - 1)? R.string.finish : R.string.next);MenuItemCompat.setShowAsAction(item3, MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);return true;}}",TutorialActivity.java,0
200,"package org.inaturalist.android;import java.io.Serializable;import java.util.HashMap;import org.json.JSONException;import org.json.JSONObject;import android.content.ContentUris;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.provider.BaseColumns;import android.util.Log;public class ProjectObservation implements BaseColumns, Serializable {public static final String TAG = ""ProjectObservation"";public Integer _id;public Integer project_id;public Integer observation_id;public Boolean is_new;public Boolean is_deleted;public static final String TABLE_NAME = ""project_observations"";public static final int PROJECT_OBSERVATIONS_URI_CODE = 2979;public static final int PROJECT_OBSERVATION_ID_URI_CODE = 2964;public static HashMap<String, String> PROJECTION_MAP;public static final String AUTHORITY = ""org.inaturalist.android.project_observation"";public static final Uri    CONTENT_URI = Uri.parse(""content://"" + AUTHORITY + ""/project_observations"");public static final String CONTENT_TYPE = ""vnd.android.cursor.dir/vnd.google.project_observation"";public static final String CONTENT_ITEM_TYPE = ""vnd.android.cursor.item/vnd.google.project_observation"";public static final String DEFAULT_SORT_ORDER = ""_id DESC"";public static final String PROJECT_ID = ""project_id"";public static final String OBSERVATION_ID = ""observation_id"";public static final String IS_NEW = ""is_new"";public static final String IS_DELETED = ""is_deleted"";public static final String[] PROJECTION = new String[] {ProjectObservation._ID,ProjectObservation.PROJECT_ID,ProjectObservation.OBSERVATION_ID,ProjectObservation.IS_DELETED,ProjectObservation.IS_NEW};static {PROJECTION_MAP = new HashMap<String, String>();PROJECTION_MAP.put(ProjectObservation._ID, ProjectObservation._ID);PROJECTION_MAP.put(ProjectObservation.PROJECT_ID, ProjectObservation.PROJECT_ID);PROJECTION_MAP.put(ProjectObservation.OBSERVATION_ID, ProjectObservation.OBSERVATION_ID);PROJECTION_MAP.put(ProjectObservation.IS_DELETED, ProjectObservation.IS_DELETED);PROJECTION_MAP.put(ProjectObservation.IS_NEW, ProjectObservation.IS_NEW);}public ProjectObservation() {}public ProjectObservation(Cursor c) {if (c.getPosition() == -1) c.moveToFirst();BetterCursor bc = new BetterCursor(c);this._id = bc.getInt(_ID);this.project_id = bc.getInt(PROJECT_ID);this.observation_id = bc.getInt(OBSERVATION_ID);this.is_deleted = bc.getBoolean(IS_DELETED);this.is_new = bc.getBoolean(IS_NEW);}public ProjectObservation(BetterJSONObject o) {this.project_id = o.getInt(""project_id"");this.observation_id = o.getInt(""observation_id"");this.is_deleted = false;this.is_new = false;}@Overridepublic String toString() {return ""ProjectObservation(project id: "" + project_id + "", observation_id: "" + observation_id + "", _id: "" + _id + "")"";}public Uri getUri() {if (_id == null) {return null;} else {return ContentUris.withAppendedId(CONTENT_URI, _id);}}public ContentValues getContentValues() {ContentValues cv = new ContentValues();cv.put(PROJECT_ID, project_id);cv.put(OBSERVATION_ID, observation_id);cv.put(IS_DELETED, is_deleted);cv.put(IS_NEW, is_new);return cv;}public static String sqlCreate() {return ""CREATE TABLE "" + TABLE_NAME + "" (""+ ProjectObservation._ID + "" INTEGER PRIMARY KEY,""+ ""project_id INTEGER,""+ ""observation_id INTEGER,""+ ""is_deleted INTEGER,""+ ""is_new INTEGER, ""+ ""UNIQUE(project_id, observation_id) ON CONFLICT REPLACE""+ "");"";}}",ProjectObservation.java,0
200,"package org.inaturalist.android;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.database.Cursor;import android.graphics.Color;import android.net.Uri;import android.provider.MediaStore;import android.text.Html;import android.text.method.LinkMovementMethod;import android.text.util.Linkify;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleAdapter;import android.widget.TextView;public class ActivityHelper {private static String TAG = ""ActivityHelper"";private Context mContext;private ProgressDialog mProgressDialog;public ActivityHelper(Context context) {mContext = context;}public void alert(String msg) {AlertDialog.Builder builder = new AlertDialog.Builder(mContext);builder.setMessage(msg).setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {public void onClick(DialogInterface dialog, int id) {dialog.cancel();}});AlertDialog alert = builder.create();alert.show();}public void alert(int title, int msg) {alert(mContext.getString(title), mContext.getString(msg));}public void alert(String title, String msg) {confirm(title, msg, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {dialogInterface.cancel();}}, null);}public void selection(String title, String[] items, final DialogInterface.OnClickListener onItemSelected) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View titleBar = inflater.inflate(R.layout.dialog_title, null, false);((TextView)titleBar.findViewById(R.id.title)).setText(title);AlertDialog.Builder builder = new AlertDialog.Builder(mContext);ViewGroup content = (ViewGroup) inflater.inflate(R.layout.dialog_title_top_bar, null, false);content.addView(titleBar, 0);ListView listView = (ListView) inflater.inflate(R.layout.dialog_list, null, false);listView.setAdapter(new ArrayAdapter<String>(mContext, android.R.layout.simple_list_item_1, items));content.addView(listView, 2);builder.setView(content);builder.setCancelable(true);final AlertDialog alert = builder.create();alert.show();listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {@Overridepublic void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {alert.dismiss();onItemSelected.onClick(alert, i);}});}public void confirm(int titleRes, Object msg, DialogInterface.OnClickListener okListener, DialogInterface.OnClickListener cancelListener) {confirm(mContext.getString(titleRes), msg, okListener, cancelListener);}public void confirm(String title, Object msg, DialogInterface.OnClickListener okListener, DialogInterface.OnClickListener cancelListener) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View titleBar = inflater.inflate(R.layout.dialog_title, null, false);((TextView)titleBar.findViewById(R.id.title)).setText(title);confirm(titleBar, msg, okListener, cancelListener);}public void confirm(String title, Object msg, DialogInterface.OnClickListener okListener, DialogInterface.OnClickListener cancelListener, int okText, int cancelText) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);View titleBar = inflater.inflate(R.layout.dialog_title, null, false);((TextView)titleBar.findViewById(R.id.title)).setText(title);confirm(titleBar, msg, okListener, cancelListener, okText, cancelText);}public void confirm(View title, Object msg, DialogInterface.OnClickListener okListener, DialogInterface.OnClickListener cancelListener) {confirm(title, msg, okListener, cancelListener, R.string.ok, R.string.cancel);}public void confirm(View title, Object msg, DialogInterface.OnClickListener okListener, DialogInterface.OnClickListener cancelListener, int okText, int cancelText) {AlertDialog.Builder builder = new AlertDialog.Builder(mContext);LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);ViewGroup content = (ViewGroup) inflater.inflate(R.layout.dialog_title_top_bar, null, false);content.addView(title, 0);if (msg instanceof Integer) {msg = mContext.getString((Integer) msg);}TextView textContent;if (msg instanceof String) {ScrollView parentView = (ScrollView) inflater.inflate(R.layout.dialog_message, null, false);textContent = (TextView) parentView.findViewById(R.id.text);textContent.setText(Html.fromHtml((String)msg));Linkify.addLinks(textContent, Linkify.ALL);textContent.setMovementMethod(LinkMovementMethod.getInstance());content.addView(parentView, 2);} else if (msg instanceof View) {content.addView((View) msg, 2);}builder.setView(content);builder.setPositiveButton(okText, okListener);builder.setCancelable(false);if (cancelListener != null) builder.setNegativeButton(cancelText, cancelListener);AlertDialog alert = builder.create();alert.show();}public void loading(String title, String msg) {loading(title, msg, null);}public void loading(String title, String msg, final DialogInterface.OnClickListener onCancelCb) {if (title == null) { title = """"; }if (msg == null) { msg = mContext.getString(R.string.loading); }boolean newDialog = false;if (mProgressDialog == null) {mProgressDialog = new ProgressDialog(mContext);newDialog = true;}mProgressDialog.setTitle(title);mProgressDialog.setMessage(msg);if (onCancelCb != null) {mProgressDialog.setCancelable(false);mProgressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, mContext.getString(R.string.cancel), onCancelCb);mProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {@Overridepublic void onCancel(DialogInterface dialogInterface) {onCancelCb.onClick(dialogInterface, 0);}});} else {mProgressDialog.setCancelable(false);}if (newDialog) mProgressDialog.show();}public void loading(String msg) {loading(null, msg);}public void loading(String msg, DialogInterface.OnClickListener onCancel) {loading(null, msg, onCancel);}public void loading() {loading(null, null, null);}public boolean isLoading() {return mProgressDialog != null && mProgressDialog.isShowing();}public void stopLoading() {if (mProgressDialog != null) {try {mProgressDialog.dismiss();mProgressDialog = null;} catch (Exception exc) {// Nothing to do hereexc.printStackTrace();}}}public int observationColor(Observation o) {if (o.iconic_taxon_name== null) {return Color.BLACK;} else if (o.iconic_taxon_name.equals(""Animalia"") ||o.iconic_taxon_name.equals(""Actinopterygii"") ||o.iconic_taxon_name.equals(""Amphibia"") ||o.iconic_taxon_name.equals(""Reptilia"") ||o.iconic_taxon_name.equals(""Aves"") ||o.iconic_taxon_name.equals(""Mammalia"")) {return Color.parseColor(""#1E90FF"");} else if (o.iconic_taxon_name.equals(""Insecta"") ||o.iconic_taxon_name.equals(""Arachnida"") ||o.iconic_taxon_name.equals(""Mollusca"")) {return Color.parseColor(""#FF4500"");} else if (o.iconic_taxon_name.equals(""Protozoa"")) {return Color.parseColor(""#691776"");} else if (o.iconic_taxon_name.equals(""Plantae"")) {return Color.parseColor(""#73AC13"");} else if (o.iconic_taxon_name.equals(""Fungi"")) {return Color.parseColor(""#FF1493"");} else if (o.iconic_taxon_name.equals(""Chromista"")) {return Color.parseColor(""#993300"");} else {return Color.WHITE;}}}",ActivityHelper.java,0
200,"package org.inaturalist.android;import com.flurry.android.FlurryAgent;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.content.Intent;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Html;import android.text.method.LinkMovementMethod;import android.text.util.Linkify;import android.util.Log;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.ViewGroupOverlay;import android.widget.ImageView;import android.widget.TextView;import org.apache.commons.lang3.StringUtils;import java.util.List;import java.util.regex.Pattern;public class ProjectDetailsAbout extends AppCompatActivity {public static final String KEY_PROJECT = ""project"";private BetterJSONObject mProject;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);setContentView(R.layout.project_details_about);ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setLogo(R.drawable.ic_arrow_back);actionBar.setTitle(R.string.about);TextView title = (TextView) findViewById(R.id.project_title);TextView projectDescription = (TextView) findViewById(R.id.project_description);TextView projectTerms = (TextView) findViewById(R.id.project_terms);TextView projectRules = (TextView) findViewById(R.id.project_rules);ViewGroup projectTermsContainer = (ViewGroup) findViewById(R.id.terms_container);ViewGroup projectRulesContainer = (ViewGroup) findViewById(R.id.rules_container);final Intent intent = getIntent();if (savedInstanceState == null) {mProject = (BetterJSONObject) intent.getSerializableExtra(KEY_PROJECT);} else {mProject = (BetterJSONObject) savedInstanceState.getSerializable(KEY_PROJECT);}title.setText(mProject.getString(""title""));String description = mProject.getString(""description"");description = description.replace(""\n"", ""\n<br>"");projectDescription.setText(Html.fromHtml(description));Linkify.addLinks(projectDescription, Linkify.ALL);projectDescription.setMovementMethod(LinkMovementMethod.getInstance());String terms = mProject.getString(""terms"");if ((terms != null) && (terms.length() > 0)) {projectTermsContainer.setVisibility(View.VISIBLE);projectTerms.setText(Html.fromHtml(terms));Linkify.addLinks(projectTerms, Linkify.ALL);projectTerms.setMovementMethod(LinkMovementMethod.getInstance());} else {projectTermsContainer.setVisibility(View.GONE);}String rules = mProject.getString(""project_observation_rule_terms"");if ((rules != null) && (rules.length() > 0)) {projectRulesContainer.setVisibility(View.VISIBLE);String[] rulesSplit = rules.split(""\\|"");String rulesFinal = StringUtils.join(rulesSplit, ""<br/>&#8226; "");rulesFinal = ""&#8226; "" + rulesFinal;projectRules.setText(Html.fromHtml(rulesFinal));Linkify.addLinks(projectRules, Linkify.ALL);projectRules.setMovementMethod(LinkMovementMethod.getInstance());} else {projectRulesContainer.setVisibility(View.GONE);}}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(KEY_PROJECT, mProject);super.onSaveInstanceState(outState);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:finish();return true;default:return super.onOptionsItemSelected(item);}}}",ProjectDetailsAbout.java,0
200,"package org.inaturalist.android;/** GPS encoding class (used when geo-tagging a photo file)* Taken from: http://stackoverflow.com/a/16835626/1233767*/public class GPSEncoder {private static StringBuilder sb = new StringBuilder(20);/*** returns ref for latitude which is S or N.* @param latitude* @return S or N*/public static String latitudeRef(double latitude) {return latitude<0.0d?""S"":""N"";}/*** returns ref for latitude which is S or N.* @param longitude* @return S or N*/public static String longitudeRef(double longitude) {return longitude<0.0d?""W"":""E"";}/*** convert latitude into DMS (degree minute second) format. For instance<br/>* -79.948862 becomes<br/>*  79/1,56/1,55903/1000<br/>* It works for latitude and longitude<br/>* @param latitude could be longitude.* @return*/synchronized public static final String convert(double latitude) {latitude=Math.abs(latitude);int degree = (int) latitude;latitude *= 60;latitude -= (degree * 60.0d);int minute = (int) latitude;latitude *= 60;latitude -= (minute * 60.0d);int second = (int) (latitude*1000.0d);sb.setLength(0);sb.append(degree);sb.append(""/1,"");sb.append(minute);sb.append(""/1,"");sb.append(second);sb.append(""/1000,"");return sb.toString();}}",GPSEncoder.java,0
200,"package org.inaturalist.android;import android.util.Log;import org.w3c.dom.NamedNodeMap;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;import java.io.FileNotFoundException;import java.io.FileReader;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import javax.xml.namespace.NamespaceContext;import javax.xml.xpath.XPath;import javax.xml.xpath.XPathConstants;import javax.xml.xpath.XPathExpressionException;import javax.xml.xpath.XPathFactory;/*** Base class for all XML-parsing classes (contains utility methods for parsing the XML)*/public abstract class BaseGuideXMLParser {private XPath mXpath;private Node mRootNode;// Cache that is used for storing past results of XPath expressions (much faster this way)// Key = xpath expression; value = either single result (string) or multiple results (list of// Nodes/Strings)private Map<String, Object> mCache;/*** Initialize the BaseGuideXMLParser class*/public BaseGuideXMLParser() {mXpath = XPathFactory.newInstance().newXPath();// Set the namespaces used by the Guide XML codeNamespaceContext context = new NamespaceContextMap(""dc"", ""http://purl.org/dc/elements/1.1/"",""dcterms"", ""http://purl.org/dc/terms/"",""eol"", ""http://www.eol.org/transfer/content/1.0"");mXpath.setNamespaceContext(context);mCache = new HashMap<String, Object>();}/*** Sets the root node* @param rootNode*/protected void setRootNode(Node rootNode) {mRootNode = rootNode;}/*** Returns the root node* @return*/protected Node getRootNode() {return mRootNode;}/*** Returns a single value according to the given XPath expression* @param xpath* @return*/protected String getValueByXPath(String xpath) {if (mCache.containsKey(xpath)) {// This Xpath was previously evaluated - return cached resultreturn (String) mCache.get(xpath);}try {String result = mXpath.evaluate(xpath, mRootNode);mCache.put(xpath, result); // Save result to cachereturn result;} catch (XPathExpressionException e) {e.printStackTrace();return null;}}/*** Returns a list of values according to the given  XPath expression* @param xpath* @return*/protected ArrayList<String> getValuesByXPath(String xpath) {ArrayList<Node> nodes = getNodesByXPath(xpath);ArrayList<String> results = new ArrayList<String>();for (Node node: nodes) {results.add(node.getTextContent());}return results;}/*** Returns a list of XML nodes according to the given  XPath expression* @param xpath* @return*/protected ArrayList<Node> getNodesByXPath(String xpath) {if (mCache.containsKey(xpath)) {// This Xpath was previously evaluated - return cached resultsreturn (ArrayList<Node>) mCache.get(xpath);}NodeList nodes = null;try {nodes = (NodeList)mXpath.evaluate(xpath, mRootNode, XPathConstants.NODESET);} catch (XPathExpressionException e) {e.printStackTrace();return null;}ArrayList<Node> results = new ArrayList<Node>();for (int i = 0; i < nodes.getLength(); i++){Node node = nodes.item(i);results.add(node);}mCache.put(xpath, results); // Save result to cachereturn results;}/*** Utility method for retrieving value of a specific property value* @param node* @param name* @return*/protected String getAttribute(Node node, String name) {NamedNodeMap attributes = node.getAttributes();for (int i = 0; i < attributes.getLength(); i++) {Node attribute = attributes.item(i);if (attribute.getNodeName().equals(name)) {return attribute.getNodeValue();}}return null;}}",BaseGuideXMLParser.java,0
200,"package org.inaturalist.android;import android.annotation.SuppressLint;import android.app.NotificationManager;import android.content.Context;import android.graphics.Bitmap;import android.net.Uri;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;import java.util.Locale;public class ObservationGridAdapter extends ArrayAdapter<JSONObject> {private List<JSONObject> mItems;private Context mContext;private ArrayList<JSONObject> mOriginalItems;private int mDimension;public ObservationGridAdapter(Context context, int dimension, List<JSONObject> objects) {super(context, R.layout.guide_taxon_item, objects);mItems = objects;mOriginalItems = new ArrayList<JSONObject>(mItems);mContext = context;mDimension = dimension;}@Overridepublic int getCount() {return mItems.size();}@Overridepublic JSONObject getItem(int index) {return mItems.get(index);}@SuppressLint(""NewApi"")@Overridepublic View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);final View view = inflater.inflate(R.layout.guide_taxon_item, parent, false);JSONObject item = mItems.get(position);TextView idName = (TextView) view.findViewById(R.id.id_name);final JSONObject taxon = item.optJSONObject(""taxon"");if (taxon != null) {String idNameString = getTaxonName(taxon);if (idNameString != null) {idName.setText(idNameString);} else {idName.setText(mContext.getResources().getString(R.string.unknown));}} else {String idNameStr = item.isNull(""species_guess"") ?mContext.getResources().getString(R.string.unknown) :item.optString(""species_guess"", mContext.getResources().getString(R.string.unknown));idName.setText(idNameStr);}ImageView taxonPic = (ImageView) view.findViewById(R.id.taxon_pic);taxonPic.setLayoutParams(new RelativeLayout.LayoutParams(mDimension, mDimension));JSONArray observationPhotos;boolean isNewApi = !item.has(""observation_photos"");try {observationPhotos = item.getJSONArray(isNewApi ? ""photos"" : ""observation_photos"");} catch (JSONException e1) {e1.printStackTrace();observationPhotos = new JSONArray();}if (observationPhotos.length() > 0) {JSONObject observationPhoto;try {String url;observationPhoto = observationPhotos.getJSONObject(0);if (isNewApi) {url = observationPhoto.optString(""url"");String extension = url.substring(url.lastIndexOf(""."") + 1);url = url.substring(0, url.lastIndexOf(""/"") + 1) + ""medium."" + extension;} else {JSONObject innerPhoto = observationPhoto.optJSONObject(""photo"");url = (innerPhoto.isNull(""small_url"") ? innerPhoto.optString(""original_url"") : innerPhoto.optString(""small_url""));}UrlImageViewHelper.setUrlDrawable(taxonPic, url, ObservationPhotosViewer.observationIcon(item), new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {imageView.setLayoutParams(new RelativeLayout.LayoutParams(mDimension, mDimension));}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// No post-processing of bitmapreturn loadedBitmap;}});} catch (JSONException e) {e.printStackTrace();} catch (Exception e) {// Could happen if user scrolls really fast and there a LOT of thumbnails being downloaded at once (too many threads at once)e.printStackTrace();}}view.setTag(item);return view;}private String getTaxonName(JSONObject item) {JSONObject defaultName;String displayName = null;// Get the taxon display name according to device localeNotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = mContext.getResources().getConfiguration().locale;String deviceLexicon =   deviceLocale.getLanguage();try {JSONArray taxonNames = item.getJSONArray(""taxon_names"");for (int i = 0; i < taxonNames.length(); i++) {JSONObject taxonName = taxonNames.getJSONObject(i);String lexicon = taxonName.getString(""lexicon"");if (lexicon.equals(deviceLexicon)) {// Found the appropriate lexicon for the taxondisplayName = taxonName.getString(""name"");break;}}} catch (JSONException e3) {//e3.printStackTrace();}if (displayName == null) {// Couldn't extract the display name from the taxon names list - use the default onetry {displayName = item.getString(""unique_name"");} catch (JSONException e2) {displayName = null;}try {defaultName = item.getJSONObject(""default_name"");displayName = defaultName.getString(""name"");} catch (JSONException e1) {// alasJSONObject commonName = item.optJSONObject(""common_name"");if (commonName != null) {displayName = commonName.optString(""name"");} else {displayName = item.optString(""preferred_common_name"");if ((displayName == null) || (displayName.length() == 0)) {displayName = item.optString(""english_common_name"");if ((displayName == null) || (displayName.length() == 0)) {displayName = item.optString(""name"");}}}}}return displayName;}}",ObservationGridAdapter.java,0
200,"package org.inaturalist.android;import android.accounts.Account;import android.accounts.AccountManager;import android.accounts.AccountManagerCallback;import android.accounts.AccountManagerFuture;import android.app.Activity;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.AsyncTask;import android.os.Bundle;import android.provider.Settings;import android.text.InputType;import android.util.Base64;import android.util.Log;import android.view.WindowManager;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.Toast;import com.facebook.AccessToken;import com.facebook.AccessTokenTracker;import com.facebook.CallbackManager;import com.facebook.FacebookCallback;import com.facebook.FacebookException;import com.facebook.login.LoginManager;import com.facebook.login.LoginResult;import com.facebook.login.widget.LoginButton;import java.util.ArrayList;public class SignInTask extends AsyncTask<String, Void, String> {private static final String TAG = ""SignInTask"";private static final String GOOGLE_AUTH_TOKEN_TYPE = ""oauth2:https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/plus.me https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile"";private AccessTokenTracker mFacebookAccessTokenTracker = null;private SharedPreferences mPreferences;private ActivityHelper mHelper;private SharedPreferences.Editor mPrefEditor;private CallbackManager mFacebookCallbackManager;private LoginButton mFacebookLoginButton;private String mUsername;private String mPassword;private INaturalistService.LoginType mLoginType;private Activity mActivity;private boolean mInvalidated;private ProgressDialog mProgressDialog;private SignInTaskStatus mCallback;private static final int REQUEST_CODE_LOGIN = 0x3000;private static final int REQUEST_CODE_ADD_ACCOUNT = 0x3001;private String mGoogleUsername;public interface SignInTaskStatus {void onLoginSuccessful();}public SignInTask(Activity activity, SignInTaskStatus callback) {mActivity = activity;mPreferences = mActivity.getSharedPreferences(""iNaturalistPreferences"", Activity.MODE_PRIVATE);mPrefEditor = mPreferences.edit();mHelper = new ActivityHelper(mActivity);mCallback = callback;mFacebookLoginButton = null;mFacebookCallbackManager = null;}public SignInTask(Activity activity, SignInTaskStatus callback, LoginButton facebookLoginButton) {this(activity, callback);mFacebookLoginButton = facebookLoginButton;mFacebookAccessTokenTracker = new AccessTokenTracker() {@Overrideprotected void onCurrentAccessTokenChanged(AccessToken oldToken, AccessToken newToken) {Log.e(""AAA"", ""ACCESS TOKEN CHANGE: "" + mActivity + ""::"" + (newToken == null ? ""null"" : newToken.getToken()));if (newToken != null) {String username = mPreferences.getString(""username"", null);if (username == null) {// First time loginString accessToken = newToken.getToken();execute(null, accessToken, INaturalistService.LoginType.FACEBOOK.toString());}}}};mFacebookCallbackManager = CallbackManager.Factory.create();ArrayList<String> permissions = new ArrayList<String>();permissions.add(""email"");mFacebookLoginButton.setReadPermissions(permissions);mFacebookLoginButton.registerCallback(mFacebookCallbackManager, new FacebookCallback<LoginResult>() {@Overridepublic void onSuccess(LoginResult loginResult) {}@Overridepublic void onCancel() {if (!isNetworkAvailable()) {Toast.makeText(mActivity.getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();}}@Overridepublic void onError(FacebookException exception) {Toast.makeText(mActivity.getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();}});}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) mActivity.getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}protected String doInBackground(String... pieces) {mUsername = pieces[0];mPassword = pieces[1];mLoginType = INaturalistService.LoginType.valueOf(pieces[2]);if (pieces.length > 3) {mInvalidated = (pieces[3] == ""invalidated"");} else {mInvalidated = false;}String[] results = INaturalistService.verifyCredentials(mUsername, mPassword, mLoginType);if (results == null) {return null;}// Upgrade from FB/Google email to iNat usernamemUsername = results[1];return results[0];}protected void onPreExecute() {try {mProgressDialog = ProgressDialog.show(mActivity, """", mActivity.getString(R.string.signing_in), true);} catch (WindowManager.BadTokenException exc) {// Happens when the user rotates the phone while the login happens (and mActivity is no longer valid)}}protected void onPostExecute(String result) {try {mProgressDialog.dismiss();} catch (Exception exc) {// Ignore}if (mFacebookAccessTokenTracker != null) {mFacebookAccessTokenTracker.stopTracking();}if (result != null) {Toast.makeText(mActivity, mActivity.getString(R.string.signed_in), Toast.LENGTH_SHORT).show();} else {if (mLoginType == INaturalistService.LoginType.FACEBOOK) {// Login failed - need to sign-out of Facebook as wellLoginManager.getInstance().logOut();} else if (mLoginType == INaturalistService.LoginType.GOOGLE && !mInvalidated) {AccountManager.get(mActivity).invalidateAuthToken(""com.google"", mPassword);signIn(INaturalistService.LoginType.GOOGLE, mUsername, null, true);return;}mHelper.alert(mActivity.getString(R.string.signed_in_failed));return;}mPrefEditor.putString(""username"", mUsername);String credentials;credentials = result; // Access tokenmPrefEditor.putString(""credentials"", credentials);mPrefEditor.putString(""password"", mPassword);mPrefEditor.putString(""login_type"", mLoginType.toString());mPrefEditor.commit();mCallback.onLoginSuccessful();// Run the first observation syncIntent serviceIntent = new Intent(INaturalistService.ACTION_FIRST_SYNC, null, mActivity, INaturalistService.class);mActivity.startService(serviceIntent);}public void onActivityResult(int requestCode, int resultCode, Intent data) {if (mFacebookCallbackManager != null) {mFacebookCallbackManager.onActivityResult(requestCode, resultCode, data);}if ((requestCode == REQUEST_CODE_ADD_ACCOUNT) && (resultCode == Activity.RESULT_OK)) {// User finished adding his accountsignIn(INaturalistService.LoginType.GOOGLE, mGoogleUsername, null);} else if ((requestCode == REQUEST_CODE_LOGIN) && (resultCode == Activity.RESULT_OK)) {// User finished entering his passwordsignIn(INaturalistService.LoginType.GOOGLE, mGoogleUsername, null);}}public void signIn(INaturalistService.LoginType loginType, String username, String password) {signIn(loginType, username, password, false);}public void signIn(INaturalistService.LoginType loginType, String username, String password, boolean invalidated) {boolean googleLogin = (loginType == INaturalistService.LoginType.GOOGLE);if (googleLogin) {String googleUsername = null;Account account = null;// See if given account existsAccount[] availableAccounts = AccountManager.get(mActivity).getAccountsByType(""com.google"");boolean accountFound = false;if (username != null) {googleUsername = username.toLowerCase();for (int i = 0; i < availableAccounts.length; i++) {if (availableAccounts[i].name.equalsIgnoreCase(googleUsername)) {// Found the account//	                    Log.d(TAG, ""googleUsername: "" + googleUsername);accountFound = true;break;}}}if (availableAccounts.length > 0) {accountFound = true;account = availableAccounts[0];} else if (googleUsername == null) {askForGoogleEmail();return;} else {// Redirect user to add account dialogmGoogleUsername = googleUsername;mActivity.startActivityForResult(new Intent(Settings.ACTION_ADD_ACCOUNT), REQUEST_CODE_ADD_ACCOUNT);return;}// Google account loginfinal String boundUsername = googleUsername;final String boundInvalidated = invalidated ? ""invalidated"" : null;final AccountManagerCallback<Bundle> cb = new AccountManagerCallback<Bundle>() {public void run(AccountManagerFuture<Bundle> future) {try {final Bundle result = future.getResult();final String accountName = result.getString(AccountManager.KEY_ACCOUNT_NAME);final String authToken = result.getString(AccountManager.KEY_AUTHTOKEN);final Intent authIntent = result.getParcelable(AccountManager.KEY_INTENT);if (accountName != null && authToken != null) {//	                        Log.d(TAG, String.format(""Token: %s"", authToken));execute(boundUsername, authToken, INaturalistService.LoginType.GOOGLE.toString(), boundInvalidated);} else if (authIntent != null) {int flags = authIntent.getFlags();flags &= ~Intent.FLAG_ACTIVITY_NEW_TASK;authIntent.setFlags(flags);mActivity.startActivityForResult(authIntent, REQUEST_CODE_LOGIN);} else {Log.e(TAG, ""AccountManager was unable to obtain an authToken."");}} catch (Exception e) {Log.e(TAG, ""Auth Error"", e);}}};if (account == null) {account = new Account(googleUsername, ""com.google"");}AccountManager.get(mActivity).getAuthToken(account,GOOGLE_AUTH_TOKEN_TYPE,null,mActivity,cb,null);} else {// ""Regular"" loginexecute(username, password, INaturalistService.LoginType.OAUTH_PASSWORD.toString());}}private void signOut() {String login = mPreferences.getString(""username"", null);mPrefEditor.remove(""username"");mPrefEditor.remove(""credentials"");mPrefEditor.remove(""password"");mPrefEditor.remove(""login_type"");mPrefEditor.remove(""last_sync_time"");mPrefEditor.commit();int count1 = mActivity.getContentResolver().delete(Observation.CONTENT_URI, ""((_updated_at > _synced_at AND _synced_at IS NOT NULL) OR (_synced_at IS NULL))"", null);int count2 = mActivity.getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""((_updated_at > _synced_at AND _synced_at IS NOT NULL) OR (_synced_at IS NULL))"", null);int count3 = mActivity.getContentResolver().delete(ProjectObservation.CONTENT_URI, ""(is_new = 1) OR (is_deleted = 1)"", null);int count4 = mActivity.getContentResolver().delete(ProjectFieldValue.CONTENT_URI, ""((_updated_at > _synced_at AND _synced_at IS NOT NULL) OR (_synced_at IS NULL))"", null);Log.d(TAG, String.format(""Deleted %d / %d / %d / %d unsynced observations"", count1, count2, count3, count4));// TODO//toggle();}private void askForGoogleEmail() {final EditText input = new EditText(mActivity);// Specify the type of input expected; this, for example, sets the input as a password, and will mask the textinput.setInputType(InputType.TYPE_CLASS_TEXT);input.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT));mHelper.confirm(R.string.email_address, input, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {String username = input.getText().toString();if (username.trim().length() == 0) {return;}signIn(INaturalistService.LoginType.GOOGLE, username.trim().toLowerCase(), null);}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {dialogInterface.cancel();}});}public void pause() {if (mFacebookAccessTokenTracker != null) {mFacebookAccessTokenTracker.stopTracking();}}public void resume() {if (mFacebookAccessTokenTracker != null) {mFacebookAccessTokenTracker.startTracking();}}}",SignInTask.java,0
200,"package org.inaturalist.android;import com.crashlytics.android.Crashlytics;import com.facebook.FacebookSdk;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.PendingResult;import com.google.android.gms.common.api.ResultCallback;import com.google.android.gms.common.api.Status;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationServices;import com.google.android.gms.location.LocationSettingsRequest;import com.google.android.gms.location.LocationSettingsResult;import com.google.android.gms.location.LocationSettingsStates;import com.google.android.gms.location.LocationSettingsStatusCodes;import io.fabric.sdk.android.Fabric;import java.io.BufferedInputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.Serializable;import java.net.URL;import java.net.URLConnection;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.UUID;import org.inaturalist.android.INaturalistService.LoginType;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.Activity;import android.app.Application;import android.app.Notification;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.Context;import android.content.DialogInterface;import android.content.DialogInterface.OnClickListener;import android.content.Intent;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.content.res.Configuration;import android.content.res.Resources;import android.database.Cursor;import android.location.LocationManager;import android.support.multidex.MultiDex;import android.support.multidex.MultiDexApplication;import android.telephony.TelephonyManager;import android.util.DisplayMetrics;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.widget.ImageView;public class INaturalistApp extends MultiDexApplication {private final static String TAG = ""INAT: Application"";private SharedPreferences mPrefs;private NotificationManager mNotificationManager;private boolean mIsSyncing = false;public static Integer VERSION = 1;public static SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(""yyyy-MM-dd"");public static SimpleDateFormat DATETIME_FORMAT = new SimpleDateFormat(""yyyy-MM-dd h:mm:ss a z"");public static SimpleDateFormat SHORT_DATE_FORMAT = new SimpleDateFormat(""d MMM yyyy"");public static SimpleDateFormat SHORT_TIME_FORMAT = new SimpleDateFormat(""h:mm a z"");private static Integer SYNC_NOTIFICATION = 3;private static Context context;private Locale locale = null;private Locale deviceLocale = null;private OnDownloadFileProgress mDownloadCallback;private boolean mOnboardingShownBefore = false;public static final int NO_OBSERVATION = -1;private int mObservationIdBeingSynced = NO_OBSERVATION;private boolean mCancelSync = false;private GoogleApiClient mGoogleApiClient;// The ID of the observation being currently syncedpublic int getObservationIdBeingSynced() {return mObservationIdBeingSynced;}public void setObservationIdBeingSynced(int value) {mObservationIdBeingSynced = value;}public boolean shownOnboarding() {return mOnboardingShownBefore;}public void setShownOnboarding(boolean value) {mOnboardingShownBefore = true;}public interface INotificationCallback {public void onNotification(String title, String content);}@Overrideprotected void attachBaseContext(Context base) {super.attachBaseContext(base);MultiDex.install(this);}@Overridepublic void onCreate() {super.onCreate();Fabric.with(this, new Crashlytics());FacebookSdk.sdkInitialize(getApplicationContext());mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);INaturalistApp.context = getApplicationContext();deviceLocale = getResources().getConfiguration().locale;applyLocaleSettings();// Create the root offline guides directory, if neededGuideXML.createOfflineGuidesDirectory(this);SharedPreferences pref = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = pref.getString(""username"", null);if (username != null) {setShownOnboarding(true);}}/* Used for accessing iNat service results - since passing large amounts of intent data* is impossible (for example, returning a huge list of projects/guides won't work via intents)*/private Map<String, Serializable> mServiceResults = new HashMap<String, Serializable>();private INotificationCallback mNotificationCallback;public void setServiceResult(String key, Serializable value) {mServiceResults.put(key,  value);}public Serializable getServiceResult(String key) {return mServiceResults.get(key);}/*** Get ISO 3166-1 alpha-2 country code for this device (or null if not available)* @param context Context reference to get the TelephonyManager instance from* @return country code or null*/public static String getUserCountry(Context context) {ActivityHelper helper;helper = new ActivityHelper(context);try {final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);final String simCountry = tm.getSimCountryIso();if (simCountry != null && simCountry.length() == 2) { // SIM country code is availablereturn simCountry.toLowerCase(Locale.US);} else if (tm.getPhoneType() != TelephonyManager.PHONE_TYPE_CDMA) { // device is not 3G (would be unreliable)String networkCountry = tm.getNetworkCountryIso();if (networkCountry != null && networkCountry.length() == 2) { // network country code is availablereturn networkCountry.toLowerCase(Locale.US);}}}catch (Exception e) { }return null;}public boolean getAutoSync() {SharedPreferences settings = getPrefs();return settings.getBoolean(""pref_auto_sync"", true);}/** Whether or not auto sync settings has been set */public boolean hasAutoSync() {SharedPreferences settings = getPrefs();return settings.contains(""pref_auto_sync"");}public void setAutoSync(boolean value) {SharedPreferences settings = getPrefs();Editor settingsEditor = settings.edit();settingsEditor.putBoolean(""pref_auto_sync"", value);settingsEditor.apply();}public void setErrorsForObservation(int obsId, int projectId, JSONArray errors) {SharedPreferences settings = getPrefs();String errorsJson = settings.getString(""pref_observation_errors"", ""{}"");Editor settingsEditor = settings.edit();try {JSONObject errorsByObservationId = new JSONObject(errorsJson);if (!errorsByObservationId.has(String.valueOf(obsId))) {errorsByObservationId.put(String.valueOf(obsId), new JSONObject());}JSONObject projectErrors = errorsByObservationId.getJSONObject(String.valueOf(obsId));projectErrors.put(String.valueOf(projectId), errors);settingsEditor.putString(""pref_observation_errors"", errorsByObservationId.toString());} catch (JSONException e) {e.printStackTrace();}settingsEditor.apply();}public JSONArray getErrorsForObservation(int obsId) {SharedPreferences settings = getPrefs();String errorsJson = settings.getString(""pref_observation_errors"", ""{}"");try {JSONObject errorsByObservationId = new JSONObject(errorsJson);if (!errorsByObservationId.has(String.valueOf(obsId))) {// No errors for that observation IDreturn new JSONArray();}JSONObject errorsByProject = errorsByObservationId.getJSONObject(String.valueOf(obsId));Iterator<String> keys = errorsByProject.keys();JSONArray errors = new JSONArray();while (keys.hasNext()) {String projectId = keys.next();JSONArray errorsForObservation = errorsByProject.getJSONArray(projectId);for (int i = 0; i < errorsForObservation.length(); i++) {errors.put(errorsForObservation.getString(i));}}return errors;} catch (JSONException e) {e.printStackTrace();return new JSONArray();}}/** Returns the set inat network member */public String getInaturalistNetworkMember() {SharedPreferences settings = getPrefs();return settings.getString(""pref_network_member"", null);}/** Set the inat network member */public void setInaturalistNetworkMember(String memberNetwork) {SharedPreferences settings = getPrefs();Editor settingsEditor = settings.edit();settingsEditor.putString(""pref_network_member"", memberNetwork);settingsEditor.apply();}// Called by isLocationEnabled to notify the rest of the app if location is enabled/disabledpublic interface OnLocationStatus {void onLocationStatus(boolean isEnabled);}/** Checks if location services are enabled */public boolean isLocationEnabled(final OnLocationStatus locationCallback) {// First, check if GPS is disabledLocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);boolean gpsDisabled = (lm.isProviderEnabled(LocationManager.GPS_PROVIDER) &&lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER));if (!gpsDisabled) return false;// Next, see if specifically the user has revoked location access to our appif (mGoogleApiClient == null) {mGoogleApiClient = new GoogleApiClient.Builder(this).addApi(LocationServices.API).build();mGoogleApiClient.connect();}if (locationCallback != null) {final LocationRequest locationRequest = new LocationRequest();locationRequest.setInterval(10000);locationRequest.setFastestInterval(5000);locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(mGoogleApiClient, builder.build());result.setResultCallback(new ResultCallback<LocationSettingsResult>() {@Overridepublic void onResult(LocationSettingsResult locationSettingsResult) {final Status status = locationSettingsResult.getStatus();switch (status.getStatusCode()) {case LocationSettingsStatusCodes.SUCCESS:// All location settings are satisfied. The client can initialize location// requests here.locationCallback.onLocationStatus(true);break;case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:// Location settings are not satisfiedlocationCallback.onLocationStatus(false);break;}}});}return gpsDisabled;}public void detectUserCountryAndUpdateNetwork(Context context) {// Don't ask the user again to switch to another network (if he's been asked before)if (getInaturalistNetworkMember() != null) return;ActivityHelper helper;helper = new ActivityHelper(context);Resources res = getBaseContext().getResources();LayoutInflater inflater = ((Activity) context).getLayoutInflater();View titleBarView = inflater.inflate(R.layout.change_network_title_bar, null);ImageView titleBarLogo = (ImageView) titleBarView.findViewById(R.id.title_bar_logo);String country = getUserCountry(context);Log.d(TAG, ""Detected country: "" + country);final String[] inatNetworks = getINatNetworks();if (country == null) {// Couldn't detect country - set default iNat networksetInaturalistNetworkMember(inatNetworks[0]);return;}String detectedNetwork = inatNetworks[0]; // Select default iNaturalist networkfor (int i = 0; i < inatNetworks.length; i++) {if (country.equalsIgnoreCase(getStringResourceByName(""inat_country_"" + inatNetworks[i]))) {detectedNetwork = inatNetworks[i];break;}}// Don't ask the user again to switch if it's the default iNat networkif (!detectedNetwork.equals(inatNetworks[0])) {// Set the logo in the title bar according to network typeString logoName = getStringResourceByName(""inat_logo_"" + detectedNetwork);String packageName = getPackageName();int resId = getResources().getIdentifier(logoName, ""drawable"", packageName);titleBarLogo.setImageResource(resId);final String selectedNetwork = detectedNetwork;helper.confirm(titleBarView,getStringResourceByName(""alert_message_use_"" + detectedNetwork),new OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {setInaturalistNetworkMember(selectedNetwork);restart();}},new OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {// Set default iNaturalist networksetInaturalistNetworkMember(inatNetworks[0]);}});} else {// Set default iNaturalist networksetInaturalistNetworkMember(inatNetworks[0]);}}public String[] getINatNetworks() {Resources res = getResources();return res.getStringArray(R.array.inat_networks);}public String[] getStringArrayResourceByName(String aString) {String packageName = getPackageName();int resId = getResources().getIdentifier(aString, ""array"", packageName);if (resId == 0) {return new String[] { aString };} else {return getResources().getStringArray(resId);}}public String getStringResourceByName(String aString) {String packageName = getPackageName();int resId = getResources().getIdentifier(aString, ""string"", packageName);if (resId == 0) {return aString;} else {return getString(resId);}}public void applyLocaleSettings(){SharedPreferences settings = getPrefs();Configuration config = getBaseContext().getResources().getConfiguration();String lang = settings.getString(""pref_locale"", """");if (! """".equals(lang) && ! config.locale.getLanguage().equals(lang)){String parts[] = lang.split(""-r"");if (parts.length > 1) {// Language + country codelocale = new Locale(parts[0], parts[1]);} else {// Just the language codelocale = new Locale(lang);}}else{locale = deviceLocale;}Locale.setDefault(locale);config.locale = locale;getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());}public void restart(){Intent i = getBaseContext().getPackageManager().getLaunchIntentForPackage(getBaseContext().getPackageName());i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);startActivity(i);}@Overridepublic void onConfigurationChanged(Configuration newConfig) {super.onConfigurationChanged(newConfig);Configuration config = new Configuration(newConfig);if (locale != null){config.locale = locale;Locale.setDefault(locale);getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());}}public static Context getAppContext() {return INaturalistApp.context;}public void setIsSyncing(boolean isSyncing) {mIsSyncing  = isSyncing;}public boolean getIsSyncing() {return mIsSyncing;}public void setCancelSync(boolean cancel) {mCancelSync  = cancel;}public boolean getCancelSync() {return mCancelSync;}public void checkSyncNeeded() {Cursor oCursor = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION,""_synced_at IS NULL OR (_updated_at > _synced_at)"", null, Observation.DEFAULT_SORT_ORDER);Cursor opCursor = getContentResolver().query(ObservationPhoto.CONTENT_URI, ObservationPhoto.PROJECTION,""_synced_at IS NULL OR (_updated_at > _synced_at)"", null, ObservationPhoto.DEFAULT_SORT_ORDER);if (!mIsSyncing) {mNotificationManager.cancel(SYNC_NOTIFICATION);} else {Resources res = getResources();serviceNotify(SYNC_NOTIFICATION,res.getString(R.string.sync_required),String.format(res.getString(R.string.sync_required_message), oCursor.getCount(), opCursor.getCount()),null,new Intent(INaturalistService.ACTION_SYNC, null, this, INaturalistService.class));}}public boolean loggedIn() {return getPrefs().contains(""credentials"");}public LoginType getLoginType() {return LoginType.valueOf(getPrefs().getString(""login_type"", LoginType.OAUTH_PASSWORD.toString()));}public String currentUserLogin() {return getPrefs().getString(""username"", null);}public SharedPreferences getPrefs() {if (mPrefs == null) {mPrefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);}return mPrefs;}public void notify(Integer id, String title, String content) {notify(id, title, content, null);}public void notify(Integer id, String title, String content, String ticker) {Intent intent = new Intent(this, ObservationListActivity.class);intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);notify(id, title, content, ticker, intent);}public void sweepingNotify(Integer id, String title, String content, String ticker, Intent intent) {if (mNotificationManager != null) {mNotificationManager.cancelAll();}notify(id, title, content, ticker, intent);}public void sweepingNotify(Integer id, String title, String content, String ticker) {if (mNotificationManager != null) {mNotificationManager.cancelAll();}notify(id, title, content, ticker);}public void notify(Integer id, String title, String content, String ticker, Intent intent) {PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);notify(id, title, content, ticker, pendingIntent);}public void serviceNotify(Integer id, String title, String content, String ticker, Intent intent) {PendingIntent pendingIntent = PendingIntent.getService(this, 0, intent, 0);notify(id, title, content, ticker, pendingIntent);}public void notify(Integer id, String title, String content, String ticker, PendingIntent pendingIntent) {if (mNotificationManager == null) {mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);}//mNotificationManager.notify(id, notification);if (mNotificationCallback != null) {mNotificationCallback.onNotification(title, content);}}public void setNotificationCallback(INotificationCallback callback) {mNotificationCallback = callback;}public String formatDate(Timestamp date) { return DATE_FORMAT.format(date); }public String formatDatetime(Timestamp date) { return DATETIME_FORMAT.format(date); }public String shortFormatDate(Timestamp date) {SimpleDateFormat f;if (Locale.getDefault().getCountry().equals(""US"")) {f = new SimpleDateFormat(""MMM d, yyyy"");} else {f = SHORT_DATE_FORMAT;}return f.format(date);}public String shortFormatTime(Timestamp date) { return SHORT_TIME_FORMAT.format(date); }public interface OnDownloadFileProgress {public boolean onDownloadProgress(long downloaded, long total, String downloadedFilename);public void onDownloadError();}public void setDownloadCallback(OnDownloadFileProgress callback) {mDownloadCallback = callback;}public void downloadFile(final String downloadUrl, final OnDownloadFileProgress callback) {mDownloadCallback = callback;new Thread(new Runnable() {@Overridepublic void run() {try {URL url = new URL(downloadUrl);URLConnection connection = url.openConnection();connection.connect();final int fileSize = connection.getContentLength();// Download the fileInputStream input = new BufferedInputStream(url.openStream(), 8192);// Output stream (temp file)File outputFile = File.createTempFile(UUID.randomUUID().toString(), null, getCacheDir());String outputFilename = outputFile.getAbsolutePath();OutputStream output = new FileOutputStream(outputFile);byte data[] = new byte[1024];long total = 0;int count = 0;// Write output data, chunk by chunkwhile ((count = input.read(data)) != -1) {total += count;output.write(data, 0, count);mDownloadCallback.onDownloadProgress(total, fileSize, outputFilename);}// flushing outputoutput.flush();// closing streamsoutput.close();input.close();} catch (IOException exc) {exc.printStackTrace();mDownloadCallback.onDownloadError();}}}).start();}}",INaturalistApp.java,0
200,"package org.inaturalist.android;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Bundle;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.TextUtils;import android.util.DisplayMetrics;import android.util.Log;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ImageButton;import android.widget.TextView;import com.flurry.android.FlurryAgent;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import java.util.ArrayList;import java.util.List;public class LocationDetailsActivity extends AppCompatActivity implements LocationListener {private final static String TAG = ""LocationDetailsActivity"";public static final String OBSERVATION = ""observation"";public static final String READ_ONLY = ""read_only"";private GoogleMap mMap;private INaturalistApp mApp;private Double mLatitude;private Double mLongitude;private boolean mZoomToLocation = false;private LocationManager mLocationManager;private double mAccuracy;private TextView mLocationCoordinates;private Observation mObservation;private boolean mIsReadOnly;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mLocationManager = (LocationManager) getSystemService(LOCATION_SERVICE);mObservation = (Observation)getIntent().getSerializableExtra(OBSERVATION);mIsReadOnly = getIntent().getBooleanExtra(READ_ONLY, false);mLongitude = mObservation.private_longitude == null ? mObservation.longitude : mObservation.private_longitude;mLatitude = mObservation.private_latitude == null ? mObservation.latitude : mObservation.private_latitude;mAccuracy = mObservation.positional_accuracy != null ? mObservation.positional_accuracy : 0;if ((mLongitude != null) && (mLatitude != null) && (savedInstanceState == null)) {mZoomToLocation = true;}ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setIcon(android.R.color.transparent);actionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(""#ffffff"")));actionBar.setLogo(R.drawable.ic_arrow_back_gray_24dp);actionBar.setTitle(R.string.location);if (savedInstanceState != null) {mObservation = (Observation) savedInstanceState.getSerializable(""observation"");mIsReadOnly = savedInstanceState.getBoolean(READ_ONLY);mLongitude = (mObservation.geoprivacy != null) && (!mObservation.geoprivacy.equals(""open"")) ? mObservation.private_longitude : mObservation.longitude;mLatitude = (mObservation.geoprivacy != null) && (!mObservation.geoprivacy.equals(""open""))  ? mObservation.private_latitude : mObservation.latitude;mAccuracy = mObservation.positional_accuracy != null ? mObservation.positional_accuracy : 0;}setContentView(R.layout.location_detail);mLocationCoordinates = (TextView) findViewById(R.id.location_coordinates);}@Overridepublic void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}setUpMapIfNeeded();Double longitude = mLongitude;Double latitude = mLatitude;if ((longitude != null) && (latitude != null)) {LatLng location = new LatLng(latitude, longitude);int zoom = 15;if (mAccuracy > 0) {DisplayMetrics metrics = new DisplayMetrics();getWindowManager().getDefaultDisplay().getMetrics(metrics);int screenWidth = metrics.widthPixels;double equatorLength = 40075004; // in metersdouble widthInPixels = screenWidth * 0.4 * 0.5;double metersPerPixel = equatorLength / 256;int zoomLevel = 1;while ((metersPerPixel * widthInPixels) > mAccuracy) {metersPerPixel /= 2;++zoomLevel;Log.e(TAG, ""\t** Zoom = "" + zoomLevel + ""; CurrentAcc = "" + (metersPerPixel * widthInPixels) +  ""; Accuracy = "" + mAccuracy);}Log.e(TAG, ""Zoom = "" + zoomLevel + ""; Accuracy = "" + mAccuracy);zoom = zoomLevel;}if (mZoomToLocation) {mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, zoom));mZoomToLocation = false;} else {mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, zoom), 1, null);}if (mAccuracy == 0) {mLocationCoordinates.setText(String.format(getString(R.string.location_coords_no_acc),String.format(""%.5f..."", mLatitude),String.format(""%.5f..."", mLongitude)));} else {mLocationCoordinates.setText(String.format(getString(R.string.location_coords),String.format(""%.5f..."", mLatitude),String.format(""%.5f..."", mLongitude),mAccuracy > 999 ? "">1 km"" : String.format(""%dm"", (int) mAccuracy)));}} else {}}@Overridepublic void onPause() {super.onPause();}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(""observation"", mObservation);outState.putBoolean(READ_ONLY, mIsReadOnly);super.onSaveInstanceState(outState);}@Overridepublic boolean onPrepareOptionsMenu(Menu menu) {MenuItem layersItem = menu.findItem(R.id.layers);if (mMap != null) {if (mMap.getMapType() == GoogleMap.MAP_TYPE_HYBRID) {layersItem.setTitle(R.string.street);} else {layersItem.setTitle(R.string.satellite);}}return super.onPrepareOptionsMenu(menu);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {MenuInflater inflater = getMenuInflater();inflater.inflate(R.menu.choose_location_menu, menu);if (mIsReadOnly) {MenuItem save = menu.findItem(R.id.save_location);save.setVisible(false);}return super.onCreateOptionsMenu(menu);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case android.R.id.home:finish();return true;case R.id.layers:if (mMap.getMapType() == GoogleMap.MAP_TYPE_HYBRID) {mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);item.setTitle(R.string.satellite);} else {mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);item.setTitle(R.string.street);}return true;default:return super.onOptionsItemSelected(item);}}private void setUpMapIfNeeded() {if (mMap == null) {mMap = ((SupportMapFragment)getSupportFragmentManager().findFragmentById(R.id.map)).getMap();// Check if we were successful in obtaining the map.if (mMap != null) {// The Map is verified. It is now safe to manipulate the map.mMap.setMyLocationEnabled(true);mMap.getUiSettings().setZoomControlsEnabled(false);mMap.clear();MarkerOptions opts = new MarkerOptions().position(new LatLng(mLatitude, mLongitude)).icon(INaturalistMapActivity.observationIcon(mObservation.iconic_taxon_name));Marker m = mMap.addMarker(opts);}}}@Overridepublic void onLocationChanged(Location location) {if (location != null) {Log.v(""Location Changed"", location.getLatitude() + "" and "" + location.getLongitude());mLocationManager.removeUpdates(this);LatLng camLocation = new LatLng(location.getLatitude(), location.getLongitude());mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(camLocation, 15));}}@Overridepublic void onProviderDisabled(String provider) {// TODO Auto-generated method stub}@Overridepublic void onProviderEnabled(String provider) {// TODO Auto-generated method stub}@Overridepublic void onStatusChanged(String provider, int status, Bundle extras) {// TODO Auto-generated method stub}}",LocationDetailsActivity.java,0
200,package org.inaturalist.android;public class AllGuidesTab extends BaseGuidesTab {@Overrideprotected String getActionName() {return INaturalistService.ACTION_GET_ALL_GUIDES;}@Overrideprotected String getFilterResultName() {return INaturalistService.ACTION_ALL_GUIDES_RESULT;}@Overrideprotected String getFilterResultParamName() {return INaturalistService.GUIDES_RESULT;}},AllGuidesTab.java,0
200,"package org.inaturalist.android;import java.util.ArrayList;import java.util.List;import com.flurry.android.FlurryAgent;import android.annotation.SuppressLint;import android.content.Intent;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.TabHost;import android.widget.TabHost.OnTabChangeListener;import android.widget.TabWidget;import android.widget.TextView;public class GuidesActivity extends BaseFragmentActivity implements OnTabChangeListener, OnPageChangeListener {MyPageAdapter mPageAdapter;private ViewPager mViewPager;private TabHost mTabHost;private List<Fragment> mFragments;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}@Overrideprotected void onSaveInstanceState(Bundle outState) {getSupportFragmentManager().putFragment(outState, ""all_guides"", mFragments.get(0));getSupportFragmentManager().putFragment(outState, ""my_guides"", mFragments.get(1));getSupportFragmentManager().putFragment(outState, ""nearby_guides"", mFragments.get(2));super.onSaveInstanceState(outState);}@Overrideprotected void onCreate(Bundle savedInstanceState) {setTheme(R.style.NoActionBarShadowTheme);super.onCreate(savedInstanceState);setContentView(R.layout.guides);onDrawerCreate(savedInstanceState);getSupportActionBar().setElevation(0);mViewPager = (ViewPager) findViewById(R.id.viewpager);mViewPager.setOffscreenPageLimit(2);// Tab InitializationinitialiseTabHost();// Fragments and ViewPager Initializationif (savedInstanceState == null) {mFragments = getFragments();} else {mFragments = new ArrayList<Fragment>();mFragments.add(getSupportFragmentManager().getFragment(savedInstanceState, ""all_guides""));mFragments.add(getSupportFragmentManager().getFragment(savedInstanceState, ""my_guides""));mFragments.add(getSupportFragmentManager().getFragment(savedInstanceState, ""nearby_guides""));}mPageAdapter = new MyPageAdapter(getSupportFragmentManager(), mFragments);mViewPager.setAdapter(mPageAdapter);mViewPager.setOnPageChangeListener(this);}// Method to add a TabHostprivate static void AddTab(GuidesActivity activity, TabHost tabHost, TabHost.TabSpec tabSpec) {tabSpec.setContent(new MyTabFactory(activity));tabHost.addTab(tabSpec);}private View createTabContent(int titleRes) {View view = LayoutInflater.from(this).inflate(R.layout.tab, null);TextView tabTitle = (TextView) view.findViewById(R.id.tab_title);tabTitle.setText(titleRes);return view;}// Manages the Tab changes, synchronizing it with Pagespublic void onTabChanged(String tag) {int pos = this.mTabHost.getCurrentTab();this.mViewPager.setCurrentItem(pos);refreshTabs(pos);}private void refreshTabs(int pos) {TabWidget tabWidget = mTabHost.getTabWidget();for (int i = 0; i < 3; i++) {tabWidget.getChildAt(i).findViewById(R.id.bottom_line).setVisibility(View.GONE);((TextView) tabWidget.getChildAt(i).findViewById(R.id.tab_title)).setTextColor(Color.parseColor(""#84000000""));}tabWidget.getChildAt(pos).findViewById(R.id.bottom_line).setVisibility(View.VISIBLE);((TextView)tabWidget.getChildAt(pos).findViewById(R.id.tab_title)).setTextColor(Color.parseColor(""#000000""));}@Overridepublic void onPageScrollStateChanged(int arg0) {}// Manages the Page changes, synchronizing it with Tabs@Overridepublic void onPageScrolled(int arg0, float arg1, int arg2) {int pos = this.mViewPager.getCurrentItem();this.mTabHost.setCurrentTab(pos);}@Overridepublic void onPageSelected(int arg0) {}private List<Fragment> getFragments(){List<Fragment> fList = new ArrayList<Fragment>();AllGuidesTab f1 = new AllGuidesTab();MyGuidesTab f2 = new MyGuidesTab();NearByGuidesTab f3 = new NearByGuidesTab();fList.add(f1);fList.add(f2);fList.add(f3);return fList;}// Tabs Creation@SuppressLint(""NewApi"")private void initialiseTabHost() {mTabHost = (TabHost) findViewById(android.R.id.tabhost);mTabHost.setup();GuidesActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(""all_guides"").setIndicator(createTabContent(R.string.all_guides)));GuidesActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(""my_guides"").setIndicator(createTabContent(R.string.my_guides)));GuidesActivity.AddTab(this, this.mTabHost, this.mTabHost.newTabSpec(""nearby_guides"").setIndicator(createTabContent(R.string.nearby_guides)));mTabHost.getTabWidget().setDividerDrawable(null);mTabHost.setOnTabChangedListener(this);refreshTabs(0);}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {case R.id.search:Intent intent = new Intent(this, ItemSearchActivity.class);intent.putExtra(ItemSearchActivity.RESULT_VIEWER_ACTIVITY, GuideDetails.class);intent.putExtra(ItemSearchActivity.RESULT_VIEWER_ACTIVITY_PARAM_NAME, ""guide"");intent.putExtra(ItemSearchActivity.SEARCH_HINT_TEXT, BaseGuidesTab.getSearchFilterTextHint(this));intent.putExtra(ItemSearchActivity.SEARCH_URL, BaseGuidesTab.getSearchUrl((INaturalistApp) getApplicationContext()));startActivity(intent);return true;}return super.onOptionsItemSelected(item);}@Overridepublic boolean onCreateOptionsMenu(Menu menu) {getMenuInflater().inflate(R.menu.search_menu, menu);return true;}}",GuidesActivity.java,0
200,"package org.inaturalist.android;import org.w3c.dom.Node;import java.io.File;import java.io.Serializable;/*** Represents a GuideTaxonPhotoXML XML node*/public class GuideTaxonPhotoXML extends BaseGuideXMLParser implements Serializable {private GuideXML mGuide;// The type of guide taxon photo (remote/local)public enum PhotoType {REMOTE,LOCAL}// The size of the guide taxon photo (thumbnail/small/medium/large)public enum PhotoSize {THUMBNAIL,SMALL,MEDIUM,LARGE}/*** Initialize the GuideTaxonPhotoXML class with the base guide and root XML node for it* @param guide* @param root*/public GuideTaxonPhotoXML(GuideXML guide, Node root) {setRootNode(root);mGuide = guide;}/*** Returns the photo's description* @return the photo's description*/public String getDescription() {return getValueByXPath(""dc:description"");}/*** Returns the photo's attribution* @return the photo's attribution*/public String getAttribution() {return getValueByXPath(""attribution"");}/*** Returns the photo's rights holder* @return the photo's rights holder*/public String getRightsHolder() {return getValueByXPath(""dcterms:rightsHolder"");}/*** Returns the path (URL/local file path) of a guide taxon photo, according to photo type (local/remote)* and photo size (thumbnail/small/medium/large).* @param photoType* @param photoSize* @return URL of the photo (if photoType==REMOTE) or file location (if photoType==LOCAL)*/public String getPhotoLocation(PhotoType photoType, PhotoSize photoSize) {String typeString, sizeString;switch (photoType) {case LOCAL:typeString = ""local"";break;case REMOTE:default:typeString = ""remote"";}switch (photoSize) {case THUMBNAIL:sizeString = ""thumb"";break;case SMALL:sizeString = ""small"";break;case MEDIUM:sizeString = ""medium"";break;case LARGE:default:sizeString = ""large"";}String path = getValueByXPath(String.format(""descendant::href[@type='%s' and @size='%s']"",typeString, sizeString));if ((photoType == PhotoType.LOCAL) && (path != null)) {// Path is local - Need to convert it from a relative path (e.g. ""files/guide_photo-1234.jpg"") to a full fledged pathpath = mGuide.getOfflineGuidePath() + ""/"" + path;// Make sure file existsFile photoFile = new File(path);if (!photoFile.exists()) {return null;}}return path;}public GuideXML getGuide() {return mGuide;}}",GuideTaxonPhotoXML.java,0
200,package org.inaturalist.android;public class JoinedProjectsTab extends BaseProjectsTab {@Overrideprotected String getActionName() {return INaturalistService.ACTION_GET_JOINED_PROJECTS_ONLINE;}@Overrideprotected String getFilterResultName() {return INaturalistService.ACTION_JOINED_PROJECTS_RESULT;}@Overrideprotected String getFilterResultParamName() {return INaturalistService.PROJECTS_RESULT;}@Overrideprotected boolean requiresLogin() {return true;}@Overrideprotected String getUserLoginRequiredText() {return getResources().getString(R.string.please_sign_in_via_settings);}},JoinedProjectsTab.java,0
200,"package org.inaturalist.android;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Color;import android.graphics.Typeface;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.os.Handler;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.text.Editable;import android.text.Html;import android.text.TextWatcher;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.animation.AnimationUtils;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Filter;import android.widget.Filterable;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.ListView;import android.widget.TableLayout;import android.widget.TextView;import android.widget.Toast;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.Hashtable;import java.util.List;public class ObservationProjectsViewer extends AppCompatActivity {private static final String TAG = ""INAT:ObservationProjectsViewer"";public static final String PROJECTS = ""projects"";private TextView mLoadingProjects;private ListView mProjectList;private EditText mSearchText;private INaturalistApp mApp;private ArrayList<BetterJSONObject> mObservationProjects;private ProjectAdapter mAdapter;private ActivityHelper mHelper;private boolean mShownSearchBox;@Overridepublic boolean onOptionsItemSelected(MenuItem item) {switch (item.getItemId()) {// Respond to the action bar's Up/Home buttoncase android.R.id.home:finish();return true;}return super.onOptionsItemSelected(item);}@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mHelper = new ActivityHelper(this);final Intent intent = getIntent();setContentView(R.layout.project_selector);if (mApp == null) {mApp = (INaturalistApp)getApplicationContext();}if (savedInstanceState == null) {mObservationProjects = (ArrayList<BetterJSONObject>) intent.getSerializableExtra(ObservationProjectsViewer.PROJECTS);} else {mObservationProjects = (ArrayList<BetterJSONObject>) savedInstanceState.getSerializable(ObservationProjectsViewer.PROJECTS);}ActionBar actionBar = getSupportActionBar();actionBar.setHomeButtonEnabled(true);actionBar.setDisplayHomeAsUpEnabled(true);actionBar.setIcon(android.R.color.transparent);actionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor(""#ffffff"")));actionBar.setLogo(R.drawable.ic_arrow_back_gray_24dp);actionBar.setTitle(R.string.projects);mLoadingProjects = (TextView) findViewById(R.id.project_list_empty);mLoadingProjects.setVisibility(View.GONE);mProjectList = (ListView) findViewById(R.id.project_list);mSearchText = (EditText) findViewById(R.id.search_filter);mSearchText.setHint(R.string.search_projects);mSearchText.addTextChangedListener(new TextWatcher() {@Overridepublic void onTextChanged(CharSequence s, int start, int before, int count) {if (mAdapter != null) {mAdapter.getFilter().filter(s);}}@Overridepublic void beforeTextChanged(CharSequence s, int start, int count, int after) { }@Overridepublic void afterTextChanged(Editable s) { }});if (mShownSearchBox) {mSearchText.setVisibility(View.VISIBLE);}mAdapter = new ProjectAdapter(this, mObservationProjects);mProjectList.setAdapter(mAdapter);}@Overrideprotected void onSaveInstanceState(Bundle outState) {outState.putSerializable(PROJECTS, mObservationProjects);super.onSaveInstanceState(outState);}@Overrideprotected void onPause() {super.onPause();}@Overrideprotected void onResume() {super.onResume();if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}}public class ProjectAdapter extends ArrayAdapter<BetterJSONObject> implements Filterable {private List<BetterJSONObject> mItems;private List<BetterJSONObject> mOriginalItems;private Context mContext;private Filter mFilter;public ProjectAdapter(Context context, List<BetterJSONObject> objects) {super(context, R.layout.project_selector_item, objects);mItems = objects;mOriginalItems = new ArrayList<BetterJSONObject>(mItems);mContext = context;mFilter = new Filter() {@Overrideprotected FilterResults performFiltering(CharSequence constraint) {FilterResults filterResults = new FilterResults();if (constraint != null) {// Retrieve the autocomplete results.String search = constraint.toString().toLowerCase();ArrayList<BetterJSONObject> results = new ArrayList<BetterJSONObject>(mOriginalItems.size());for (BetterJSONObject item : mOriginalItems) {try {if (item.getJSONObject(""project"").getString(""title"").toLowerCase().indexOf(search) > -1) {results.add(item);}} catch (JSONException e) {e.printStackTrace();}}// Assign the data to the FilterResultsfilterResults.values = results;filterResults.count = results.size();}return filterResults;}@Overrideprotected void publishResults(CharSequence constraint, FilterResults results) {mItems = (List<BetterJSONObject>) results.values;notifyDataSetChanged();}};}@Overridepublic int getCount() {return mItems.size();}@Overridepublic BetterJSONObject getItem(int index) {return mItems.get(index);}@Overridepublic Filter getFilter() {return mFilter;}public boolean areAllItemsEnabled() {return false;}public boolean isEnabled(int position) {return false;}@Overridepublic View getView(final int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);final View view = inflater.inflate(R.layout.observation_project_item, parent, false);BetterJSONObject item = null;item = new BetterJSONObject(mItems.get(position).getJSONObject(""project""));TextView projectName = (TextView) view.findViewById(R.id.project_name);final String projectTitle = item.getString(""title"");projectName.setText(projectTitle);ImageView projectPic = (ImageView) view.findViewById(R.id.project_pic);String iconUrl = item.getString(""icon_url"");if ((iconUrl != null) && (iconUrl.length() > 0)) {projectPic.setVisibility(View.VISIBLE);view.findViewById(R.id.project_pic_none).setVisibility(View.GONE);UrlImageViewHelper.setUrlDrawable(projectPic, iconUrl);} else {projectPic.setVisibility(View.GONE);view.findViewById(R.id.project_pic_none).setVisibility(View.VISIBLE);}final String noHTMLDescription = Html.fromHtml(item.getString(""description"")).toString();if (noHTMLDescription.length() > 0) {((ViewGroup) view.findViewById(R.id.project_pic_container)).setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {mHelper.alert(projectTitle, noHTMLDescription);}});} else {// No description - Hide the info buttonview.findViewById(R.id.project_pic_info).setVisibility(View.GONE);}return view;}}}",ObservationProjectsViewer.java,0
200,"package org.inaturalist.android;import com.crashlytics.android.Crashlytics;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import android.content.DialogInterface;import android.os.Build;import io.fabric.sdk.android.Fabric;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.res.Configuration;import android.database.Cursor;import android.graphics.Bitmap;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;/*** Utility class for implementing the side-menu (navigation drawer) used throughout the app**/public class BaseFragmentActivity extends AppCompatActivity {static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 1;static final int SELECT_IMAGE_REQUEST_CODE = 2;private static final String TAG = ""BaseFragmentActivity"";// Time in mins to refresh the user details (such as user obs count)private static final int USER_REFRESH_TIME_MINS = 1;private DrawerLayout mDrawerLayout;private LinearLayout mSideMenu;private ActionBarDrawerToggle mDrawerToggle;private INaturalistApp app;private ActivityHelper mHelper;private UserDetailsReceiver mUserDetailsReceiver;public int getStatusBarHeight() {int result = 0;int resourceId = getResources().getIdentifier(""status_bar_height"", ""dimen"", ""android"");if (resourceId > 0) {result = getResources().getDimensionPixelSize(resourceId);}return result;}private void moveDrawerToTop() {LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);DrawerLayout drawer = (DrawerLayout) inflater.inflate(R.layout.side_menu_decor, null); // ""null"" is important.// HACK: ""steal"" the first child of decor viewViewGroup decor = (ViewGroup) getWindow().getDecorView();View child = decor.getChildAt(0);decor.removeView(child);ViewGroup container = (ViewGroup) drawer.findViewById(R.id.drawer_content); // This is the container we defined just now.container.addView(child, 0);drawer.findViewById(R.id.left_drawer).setPadding(0, getStatusBarHeight(), 0, 0);// Make the drawer replace the first childdecor.addView(drawer);}public void onDrawerCreate(Bundle savedInstanceState) {Fabric.with(this, new Crashlytics());moveDrawerToTop();mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);mSideMenu = (LinearLayout) findViewById(R.id.left_drawer);mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, 0, 0) {public void onDrawerClosed(View view) {super.onDrawerClosed(view);}public void onDrawerOpened(View drawerView) {super.onDrawerOpened(drawerView);}};mDrawerLayout.setDrawerListener(mDrawerToggle);getSupportActionBar().setDisplayHomeAsUpEnabled(true);getSupportActionBar().setHomeButtonEnabled(true);getSupportActionBar().setIcon(android.R.color.transparent);if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {((ImageView)findViewById(R.id.menu_explore_icon)).setAlpha(0.54f);((ImageView)findViewById(R.id.menu_projects_icon)).setAlpha(0.54f);((ImageView)findViewById(R.id.menu_guides_icon)).setAlpha(0.54f);((ImageView)findViewById(R.id.menu_activity_icon)).setAlpha(0.54f);((ImageView)findViewById(R.id.menu_settings_icon)).setAlpha(0.54f);}buildSideMenu();if (app == null) { app = (INaturalistApp) getApplicationContext(); }if (mHelper == null) { mHelper = new ActivityHelper(this);}// See if we need to display the tutorial (only for the first time using the app)SharedPreferences preferences = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);boolean firstTime = preferences.getBoolean(""first_time"", true);if (firstTime) {Intent intent = new Intent(this, TutorialActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);intent.putExtra(""first_time"", true);startActivity(intent);} else {app.detectUserCountryAndUpdateNetwork(this);}refreshUserDetails();((Button)findViewById(R.id.menu_login)).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {// User not logged-in - redirect to onboarding screenstartActivity(new Intent(BaseFragmentActivity.this, OnboardingActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));}});if (!app.hasAutoSync() && app.loggedIn()) {// Tell the user about the new auto sync featuremHelper.confirm(getString(R.string.introducing_auto_sync), getString(R.string.turn_on_auto_sync), new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {// Turn off auto syncapp.setAutoSync(false);}}, new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {// Turn on auto syncapp.setAutoSync(true);}}, R.string.no_thanks, R.string.turn_on);} else if (!app.hasAutoSync()) {// Default - set auto sync onapp.setAutoSync(true);}}public void refreshUserDetails() {SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String username = prefs.getString(""username"", null);Integer obsCount = prefs.getInt(""observation_count"", -1);String userIconUrl = prefs.getString(""user_icon_url"", null);Long lastRefreshTime = prefs.getLong(""last_user_details_refresh_time"", 0);if (username != null) {((TextView)findViewById(R.id.username)).setText(username);findViewById(R.id.menu_login).setVisibility(View.INVISIBLE);findViewById(R.id.username).setVisibility(View.VISIBLE);if (System.currentTimeMillis() - lastRefreshTime > 1000 * 60 * USER_REFRESH_TIME_MINS) {// Get fresh user details from the serverIntent serviceIntent = new Intent(INaturalistService.ACTION_GET_USER_DETAILS, null, this, INaturalistService.class);startService(serviceIntent);}} else {findViewById(R.id.menu_login).setVisibility(View.VISIBLE);findViewById(R.id.username).setVisibility(View.INVISIBLE);}if (obsCount > -1) {if (obsCount == 1) {((TextView) findViewById(R.id.observation_count)).setText(String.format(getString(R.string.observation_count_single), obsCount));} else {((TextView) findViewById(R.id.observation_count)).setText(String.format(getString(R.string.observation_count), obsCount));}} else {String conditions = ""(_synced_at IS NULL"";if (username != null) {conditions += "" OR user_login = '"" + username + ""'"";}conditions += "") AND (is_deleted = 0 OR is_deleted is NULL)""; // Don't show deleted observationsCursor cursor = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, conditions, null, Observation.DEFAULT_SORT_ORDER);int count = cursor.getCount();if (count == 1) {((TextView) findViewById(R.id.observation_count)).setText(String.format(getString(R.string.observation_count_single), count));} else {((TextView) findViewById(R.id.observation_count)).setText(String.format(getString(R.string.observation_count), count));}cursor.close();}if (userIconUrl != null) {UrlImageViewHelper.setUrlDrawable((ImageView)findViewById(R.id.user_pic), userIconUrl, new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {((ImageView)findViewById(R.id.no_user_pic)).setVisibility(View.GONE);((ImageView)findViewById(R.id.user_pic)).setVisibility(View.VISIBLE);}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {// Return a circular version of the profile pictureBitmap centerCrop = ImageUtils.centerCropBitmap(loadedBitmap);return ImageUtils.getCircleBitmap(centerCrop);}});} else {((ImageView)findViewById(R.id.no_user_pic)).setVisibility(View.VISIBLE);((ImageView)findViewById(R.id.user_pic)).setVisibility(View.GONE);}}private void buildSideMenu() {// Only show guides only for Android 4+if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {findViewById(R.id.menu_guides).setVisibility(View.GONE);}findViewById(R.id.menu_explore).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startActivityIfNew(new Intent(BaseFragmentActivity.this, INaturalistMapActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));}});findViewById(R.id.menu_projects).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startActivityIfNew(new Intent(BaseFragmentActivity.this, ProjectsActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));}});findViewById(R.id.menu_guides).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startActivityIfNew(new Intent(BaseFragmentActivity.this, GuidesActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));}});findViewById(R.id.menu_activity).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {if (!isNetworkAvailable()) {Toast.makeText(getApplicationContext(), R.string.not_connected, Toast.LENGTH_LONG).show();return;}Intent intent = new Intent(BaseFragmentActivity.this, ProjectNews.class);intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);intent.putExtra(""is_user_feed"", true);startActivityIfNew(intent);}});findViewById(R.id.menu_settings).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startActivityIfNew(new Intent(BaseFragmentActivity.this, INaturalistPrefsActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));}});findViewById(R.id.menu_header).setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View view) {startActivityIfNew(new Intent(BaseFragmentActivity.this, ObservationListActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));}});if (INaturalistMapActivity.class.getName().equals(this.getClass().getName())) {findViewById(R.id.menu_explore).setBackgroundColor(getResources().getColor(R.color.side_menu_item_bg_current));if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {((ImageView) findViewById(R.id.menu_explore_icon)).setAlpha(1.0f);}}if (ProjectsActivity.class.getName().equals(this.getClass().getName())) {findViewById(R.id.menu_projects).setBackgroundColor(getResources().getColor(R.color.side_menu_item_bg_current));if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {((ImageView) findViewById(R.id.menu_projects_icon)).setAlpha(1.0f);}}if (GuidesActivity.class.getName().equals(this.getClass().getName())) {findViewById(R.id.menu_guides).setBackgroundColor(getResources().getColor(R.color.side_menu_item_bg_current));if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {((ImageView) findViewById(R.id.menu_guides_icon)).setAlpha(1.0f);}}if (WebActivity.class.getName().equals(this.getClass().getName())) {findViewById(R.id.menu_activity).setBackgroundColor(getResources().getColor(R.color.side_menu_item_bg_current));if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {((ImageView) findViewById(R.id.menu_activity_icon)).setAlpha(1.0f);}}if (INaturalistPrefsActivity.class.getName().equals(this.getClass().getName())) {findViewById(R.id.menu_settings).setBackgroundColor(getResources().getColor(R.color.side_menu_item_bg_current));if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {((ImageView) findViewById(R.id.menu_settings_icon)).setAlpha(1.0f);}}}private void startActivityIfNew(Intent intent) {if (intent.getComponent().getClassName().equals(this.getClass().getName())) {// Activity is already loadedmDrawerLayout.closeDrawer(mSideMenu);return;}startActivity(intent);overridePendingTransition(R.anim.show, R.anim.hide);finish();}@Overridepublic boolean onOptionsItemSelected(MenuItem item) {if (item.getItemId() == android.R.id.home) {if (mDrawerLayout.isDrawerOpen(mSideMenu)) {mDrawerLayout.closeDrawer(mSideMenu);} else {mDrawerLayout.openDrawer(mSideMenu);}return true;}return super.onOptionsItemSelected(item);}@Overrideprotected void onPostCreate(Bundle savedInstanceState) {super.onPostCreate(savedInstanceState);if (mDrawerToggle != null) {mDrawerToggle.syncState();mUserDetailsReceiver = new UserDetailsReceiver();IntentFilter filter = new IntentFilter(INaturalistService.ACTION_GET_USER_DETAILS_RESULT);Log.i(TAG, ""Registering ACTION_GET_USER_DETAILS_RESULT"");registerReceiver(mUserDetailsReceiver, filter);}}@Overridepublic void onConfigurationChanged(Configuration newConfig) {super.onConfigurationChanged(newConfig);if (mDrawerToggle != null) {mDrawerToggle.onConfigurationChanged(newConfig);}}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}@Overrideprotected void onResume() {super.onResume();if (app == null) { app = (INaturalistApp) getApplicationContext(); }if (mDrawerToggle != null) {refreshUserDetails();}}@Overrideprotected void onPause() {super.onPause();if (mHelper != null) {mHelper.stopLoading();}}private class UserDetailsReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Log.i(TAG, ""Got GET_USER_DETAILS_RESULT"");BetterJSONObject user = (BetterJSONObject) intent.getSerializableExtra(INaturalistService.USER);if (user == null) {return;}SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);SharedPreferences.Editor editor = prefs.edit();editor.putInt(""observation_count"", user.getInt(""observations_count""));String iconUrl = user.has(""medium_user_icon_url"") ? user.getString(""medium_user_icon_url"") : user.getString(""user_icon_url"");editor.putString(""user_icon_url"", iconUrl);editor.putLong(""last_user_details_refresh_time"", System.currentTimeMillis());editor.apply();refreshUserDetails();}}}",BaseFragmentActivity.java,0
200,"package org.inaturalist.android;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.database.sqlite.SQLiteCursorDriver;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteDatabase.CursorFactory;import android.database.sqlite.SQLiteQuery;import android.util.Log;/*** Implement the cursor factory in order to log the queries before returning* the cursor** @author Vincent @ MarvinLabs* http://stackoverflow.com/questions/5966584/logging-sql-queries-in-android*/public class SQLiteCursorFactory implements CursorFactory {private boolean debugQueries = false;public SQLiteCursorFactory() {this.debugQueries = false;}public SQLiteCursorFactory(boolean debugQueries) {this.debugQueries = debugQueries;}@Overridepublic Cursor newCursor(SQLiteDatabase db, SQLiteCursorDriver masterQuery,String editTable, SQLiteQuery query) {if (debugQueries) {Log.d(""SQL"", query.toString());}return new SQLiteCursor(db, masterQuery, editTable, query);}}",SQLiteCursorFactory.java,0
200,"package org.inaturalist.android;import android.annotation.SuppressLint;import android.app.NotificationManager;import android.content.Context;import android.graphics.Bitmap;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.koushikdutta.urlimageviewhelper.UrlImageViewCallback;import com.koushikdutta.urlimageviewhelper.UrlImageViewHelper;import org.apache.commons.collections4.map.CompositeMap;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.sql.Timestamp;import java.util.ArrayList;import java.util.List;import java.util.Locale;public class UserObservationAdapter extends ArrayAdapter<JSONObject> {private List<JSONObject> mItems;private Context mContext;public UserObservationAdapter(Context context, List<JSONObject> objects) {super(context, R.layout.guide_taxon_item, objects);mItems = objects;mContext = context;}@Overridepublic int getCount() {return mItems.size();}@Overridepublic JSONObject getItem(int index) {return mItems.get(index);}@SuppressLint(""NewApi"")@Overridepublic View getView(int position, View convertView, ViewGroup parent) {LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);final View view = inflater.inflate(R.layout.user_profile_observation_item, parent, false);JSONObject item = mItems.get(position);TextView idName = (TextView) view.findViewById(R.id.species_guess);String idNameStr = item.isNull(""species_guess"") ? mContext.getResources().getString(R.string.unknown) : item.optString(""species_guess"", mContext.getResources().getString(R.string.unknown));idName.setText(idNameStr);TextView placeGuess = (TextView) view.findViewById(R.id.place_guess);if (item.isNull(""place_guess"") || (item.optString(""place_guess"").length() == 0)) {if (!item.isNull(""latitude"") && !item.isNull(""longitude"")) {// Show coordinates insteadplaceGuess.setText(String.format(mContext.getString(R.string.location_coords_no_acc),String.format(""%.4f..."", Double.valueOf(item.optString(""latitude""))), String.format(""%.4f..."", Double.valueOf(item.optString(""longitude"")))));} else {// No location at allplaceGuess.setText(R.string.no_location);}} else {placeGuess.setText(item.optString(""place_guess""));}ImageView observationPic = (ImageView) view.findViewById(R.id.observation_pic);JSONArray observationPhotos;try {observationPhotos = item.getJSONArray(""photos"");} catch (JSONException e1) {e1.printStackTrace();observationPhotos = new JSONArray();}if (observationPhotos.length() > 0) {JSONObject observationPhoto;try {String url;observationPhoto = observationPhotos.getJSONObject(0);url = (observationPhoto.isNull(""small_url"") ? observationPhoto.optString(""original_url"") : observationPhoto.optString(""small_url""));UrlImageViewHelper.setUrlDrawable(observationPic, url, ObservationPhotosViewer.observationIcon(item), new UrlImageViewCallback() {@Overridepublic void onLoaded(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {}@Overridepublic Bitmap onPreSetBitmap(ImageView imageView, Bitmap loadedBitmap, String url, boolean loadedFromCache) {Bitmap centerCrop = ImageUtils.getRoundedCornerBitmap(ImageUtils.centerCropBitmap(loadedBitmap), 4);return centerCrop;}});} catch (JSONException e) {e.printStackTrace();} catch (Exception e) {// Could happen if user scrolls really fast and there a LOT of thumbnails being downloaded at once (too many threads at once)e.printStackTrace();}}TextView date = (TextView) view.findViewById(R.id.date);BetterJSONObject json = new BetterJSONObject(item);Timestamp dateTimestamp = json.getTimestamp(""observed_on"");if (dateTimestamp == null) {date.setVisibility(View.INVISIBLE);} else {date.setText(CommentsIdsAdapter.formatIdDate(dateTimestamp));date.setVisibility(View.VISIBLE);}TextView commentCountText = (TextView) view.findViewById(R.id.comment_count);ImageView commentCountIcon = (ImageView) view.findViewById(R.id.comment_pic);int commentCount = item.optInt(""comments_count"");if (commentCount > 0) {commentCountIcon.setVisibility(View.VISIBLE);commentCountText.setVisibility(View.VISIBLE);commentCountText.setText(String.valueOf(commentCount));} else {commentCountIcon.setVisibility(View.GONE);commentCountText.setVisibility(View.GONE);}TextView idCountText = (TextView) view.findViewById(R.id.id_count);ImageView idCountIcon = (ImageView) view.findViewById(R.id.id_pic);int idCount = item.optInt(""identifications_count"");if (idCount > 0) {idCountIcon.setVisibility(View.VISIBLE);idCountText.setVisibility(View.VISIBLE);idCountText.setText(String.valueOf(idCount));} else {idCountIcon.setVisibility(View.GONE);idCountText.setVisibility(View.GONE);}view.setTag(item);return view;}private String getTaxonName(JSONObject item) {JSONObject defaultName;String displayName = null;// Get the taxon display name according to device localeNotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);Locale deviceLocale = mContext.getResources().getConfiguration().locale;String deviceLexicon =   deviceLocale.getLanguage();try {JSONArray taxonNames = item.getJSONArray(""taxon_names"");for (int i = 0; i < taxonNames.length(); i++) {JSONObject taxonName = taxonNames.getJSONObject(i);String lexicon = taxonName.getString(""lexicon"");if (lexicon.equals(deviceLexicon)) {// Found the appropriate lexicon for the taxondisplayName = taxonName.getString(""name"");break;}}} catch (JSONException e3) {//e3.printStackTrace();}if (displayName == null) {// Couldn't extract the display name from the taxon names list - use the default onetry {displayName = item.getString(""unique_name"");} catch (JSONException e2) {displayName = null;}try {defaultName = item.getJSONObject(""default_name"");displayName = defaultName.getString(""name"");} catch (JSONException e1) {// alasJSONObject commonName = item.optJSONObject(""common_name"");if (commonName != null) {displayName = commonName.optString(""name"");} else {displayName = item.optString(""name"");}}}return displayName;}}",UserObservationAdapter.java,0
200,"package org.inaturalist.android;import com.facebook.login.LoginManager;import com.flurry.android.FlurryAgent;import android.app.Activity;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.graphics.Paint;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.text.Html;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.TextView;public class INaturalistPrefsActivity extends BaseFragmentActivity implements SignInTask.SignInTaskStatus {private static final String TAG = ""INaturalistPrefsActivity"";public static final String REAUTHENTICATE_ACTION = ""reauthenticate_action"";private static final int REQUEST_CODE_LOGIN = 0x1000;private static final String GOOGLE_AUTH_TOKEN_TYPE = ""oauth2:https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/plus.me https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile"";private LinearLayout mSignInLayout;private LinearLayout mSignOutLayout;private TextView mSignOutLabel;private Button mSignInButton;private Button mSignUpButton;private Button mSignOutButton;private SharedPreferences mPreferences;private SharedPreferences.Editor mPrefEditor;private ActivityHelper mHelper;private RadioGroup rbPreferredNetworkSelector;private RadioGroup rbPreferredLocaleSelector;private CheckBox mAutoSync;private INaturalistApp mApp;private int formerSelectedNetworkRadioButton;private int formerSelectedRadioButton;@Overrideprotected void onStart(){super.onStart();FlurryAgent.onStartSession(this, INaturalistApp.getAppContext().getString(R.string.flurry_api_key));FlurryAgent.logEvent(this.getClass().getSimpleName());}@Overrideprotected void onStop(){super.onStop();FlurryAgent.onEndSession(this);}private TextView mHelp;private TextView mContactSupport;private TextView mVersion;@Overrideprotected void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);if (mApp == null) {mApp = (INaturalistApp) getApplicationContext();}//		try {//		    Log.d(""KeyHash:"", ""ENTER"");//		    PackageInfo info = getPackageManager().getPackageInfo(//		            ""org.inaturalist.android"",//		            PackageManager.GET_SIGNATURES);//		    for (Signature signature : info.signatures) {//		        MessageDigest md = MessageDigest.getInstance(""SHA"");//		        md.update(signature.toByteArray());//		        Log.d(""KeyHash:"", Base64.encodeToString(md.digest(), Base64.DEFAULT));//		    }//		} catch (NameNotFoundException e) {//		    Log.d(""NameNotFoundException: "", e.toString());//		} catch (NoSuchAlgorithmException e) {//		    Log.d(""NoSuchAlgorithmException: "", e.toString());//		}setContentView(R.layout.preferences);onDrawerCreate(savedInstanceState);mPreferences = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);mPrefEditor = mPreferences.edit();mHelper = new ActivityHelper(this);mSignInLayout = (LinearLayout) findViewById(R.id.signIn);mAutoSync = (CheckBox) findViewById(R.id.auto_sync);mSignOutLayout = (LinearLayout) findViewById(R.id.signOut);mSignOutLabel = (TextView) findViewById(R.id.signOutLabel);mSignInButton = (Button) findViewById(R.id.signInButton);mSignUpButton = (Button) findViewById(R.id.signUpButton);mSignOutButton = (Button) findViewById(R.id.signOutButton);mHelp = (TextView) findViewById(R.id.tutorial_link);mHelp.setPaintFlags(Paint.UNDERLINE_TEXT_FLAG);mAutoSync.setChecked(mApp.getAutoSync());mAutoSync.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {@Overridepublic void onCheckedChanged(CompoundButton compoundButton, boolean value) {mApp.setAutoSync(value);}});mContactSupport = (TextView) findViewById(R.id.contact_support);mContactSupport.setText(Html.fromHtml(mContactSupport.getText().toString()));mContactSupport.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View view) {// Get app versiontry {PackageManager manager = INaturalistPrefsActivity.this.getPackageManager();PackageInfo info = manager.getPackageInfo(INaturalistPrefsActivity.this.getPackageName(), 0);// Open the email clientIntent mailer = new Intent(Intent.ACTION_SEND);mailer.setType(""message/rfc822"");mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{getString(R.string.inat_support_email_address)});String username = mPreferences.getString(""username"", null);mailer.putExtra(Intent.EXTRA_SUBJECT, String.format(getString(R.string.inat_support_email_subject), info.versionName, info.versionCode, username == null ? ""N/A"" : username));startActivity(Intent.createChooser(mailer, getString(R.string.send_email)));} catch (NameNotFoundException e) {e.printStackTrace();}}});//mContactSupport.setMovementMethod(LinkMovementMethod.getInstance());mVersion = (TextView) findViewById(R.id.version);try {PackageInfo packageInfo = getPackageManager().getPackageInfo(getPackageName(), 0);mVersion.setText(String.format(""Version %s (%d)"", packageInfo.versionName, packageInfo.versionCode));} catch (NameNotFoundException e) {e.printStackTrace();mVersion.setText("""");}// Add the iNat network settingsrbPreferredNetworkSelector = (RadioGroup)findViewById(R.id.radioNetworks);String[] networks = mApp.getINatNetworks();for (int i = 0; i < networks.length; i++) {RadioButton radioButton = new RadioButton(this);radioButton.setText(mApp.getStringResourceByName(""network_"" + networks[i]));radioButton.setId(i);radioButton.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {onINatNetworkRadioButtonClicked(v);}});rbPreferredNetworkSelector.addView(radioButton);}makeLanguageRadioButtons();mHelp.setOnClickListener(new OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(INaturalistPrefsActivity.this, TutorialActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);intent.putExtra(""first_time"", false);startActivity(intent);}});toggle();mSignInButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {Intent intent = new Intent(INaturalistPrefsActivity.this, OnboardingActivity.class);intent.putExtra(OnboardingActivity.LOGIN, true);startActivityForResult(intent, REQUEST_CODE_LOGIN);}});mSignUpButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {startActivityForResult(new Intent(INaturalistPrefsActivity.this, OnboardingActivity.class), REQUEST_CODE_LOGIN);}});mSignOutButton.setOnClickListener(new View.OnClickListener() {@Overridepublic void onClick(View v) {mHelper.confirm(getString(R.string.signed_out),getString(R.string.alert_sign_out),new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {signOut();}},new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialogInterface, int i) {dialogInterface.cancel();;}});}});if (getIntent().getAction() != null && getIntent().getAction().equals(REAUTHENTICATE_ACTION)) {signOut();mHelper.alert(getString(R.string.username_invalid));}updateINatNetworkRadioButtonState();updateRadioButtonState();}private void updateINatNetworkRadioButtonState(){String[] networks = mApp.getINatNetworks();String network = mApp.getInaturalistNetworkMember();for (int i = 0; i < networks.length; i++) {if (networks[i].equals(network)) {rbPreferredNetworkSelector.check(i);formerSelectedNetworkRadioButton = i;break;}}}public void onINatNetworkRadioButtonClicked(View view){final boolean checked = ((RadioButton) view).isChecked();final int selectedRadioButtonId = view.getId();final String[] networks = mApp.getINatNetworks();DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {switch (which){case DialogInterface.BUTTON_POSITIVE:if (checked) {mApp.setInaturalistNetworkMember(networks[selectedRadioButtonId]);//mPrefEditor.putString(""pref_locale"", mApp.getStringResourceByName(""inat_network_language_"" + networks[selectedRadioButtonId]));//mPrefEditor.commit();}formerSelectedNetworkRadioButton = selectedRadioButtonId;mApp.applyLocaleSettings();mApp.restart();finish();break;case DialogInterface.BUTTON_NEGATIVE://No button clickedrbPreferredNetworkSelector.check(formerSelectedNetworkRadioButton);break;}}};LayoutInflater inflater = getLayoutInflater();View titleBarView = inflater.inflate(R.layout.change_network_title_bar, null);ImageView titleBarLogo = (ImageView) titleBarView.findViewById(R.id.title_bar_logo);String logoName = mApp.getStringResourceByName(""inat_logo_"" + networks[selectedRadioButtonId]);String packageName = getPackageName();int resId = getResources().getIdentifier(logoName, ""drawable"", packageName);titleBarLogo.setImageResource(resId);mHelper.confirm(titleBarView, mApp.getStringResourceByName(""alert_message_use_"" + networks[selectedRadioButtonId]),dialogClickListener, dialogClickListener);}@Overrideprotected void onResume() {super.onResume();mHelper = new ActivityHelper(this);}@Overrideprotected void onSaveInstanceState(Bundle outState) {super.onSaveInstanceState(outState);}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {super.onActivityResult(requestCode, resultCode, data);if ((requestCode == REQUEST_CODE_LOGIN) && (resultCode == Activity.RESULT_OK)) {// Refresh login statetoggle();refreshUserDetails();}}private void toggle() {String username = mPreferences.getString(""username"", null);if (username == null) {mSignInLayout.setVisibility(View.VISIBLE);mSignOutLayout.setVisibility(View.GONE);} else {mSignInLayout.setVisibility(View.GONE);mSignOutLayout.setVisibility(View.VISIBLE);mSignOutLabel.setText(String.format(getString(R.string.signed_in_as), username));}}private void signOut() {INaturalistService.LoginType loginType = INaturalistService.LoginType.valueOf(mPreferences.getString(""login_type"", INaturalistService.LoginType.OAUTH_PASSWORD.toString()));if (loginType == INaturalistService.LoginType.FACEBOOK) {LoginManager.getInstance().logOut();}SharedPreferences prefs = getSharedPreferences(""iNaturalistPreferences"", MODE_PRIVATE);String login = prefs.getString(""username"", null);mPrefEditor.remove(""username"");mPrefEditor.remove(""credentials"");mPrefEditor.remove(""password"");mPrefEditor.remove(""login_type"");mPrefEditor.remove(""last_sync_time"");mPrefEditor.remove(""observation_count"");mPrefEditor.remove(""user_icon_url"");mPrefEditor.commit();int count1 = getContentResolver().delete(Observation.CONTENT_URI, null, null);int count2 = getContentResolver().delete(ObservationPhoto.CONTENT_URI, null, null);int count3 = getContentResolver().delete(ProjectObservation.CONTENT_URI, null, null);int count4 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, null, null);Log.d(TAG, String.format(""Deleted %d / %d / %d / %d unsynced observations"", count1, count2, count3, count4));toggle();refreshUserDetails();}private boolean isNetworkAvailable() {ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();return activeNetworkInfo != null && activeNetworkInfo.isConnected();}public void makeLanguageRadioButtons(){rbPreferredLocaleSelector = (RadioGroup)findViewById(R.id.radioLang);String[] locales = LocaleHelper.SupportedLocales;for (int i=0; i < locales.length; i++) {RadioButton rb = (RadioButton) rbPreferredLocaleSelector.getChildAt(i);final int selectedButton = i;final Activity context = this;rb.setOnClickListener (new OnClickListener() {@Overridepublic void onClick(View v) {PromptUserToConfirmSelection(context, selectedButton);}});}}private void PromptUserToConfirmSelection(Activity context, int index) {final int selectedButton = index;final String locale = LocaleHelper.SupportedLocales[index];final Activity thisActivity = context;DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {@Overridepublic void onClick(DialogInterface dialog, int which) {switch (which) {case DialogInterface.BUTTON_POSITIVE:mPrefEditor.putString(""pref_locale"", locale);mPrefEditor.commit();formerSelectedRadioButton = selectedButton;mApp.applyLocaleSettings();mApp.restart();finish();break;case DialogInterface.BUTTON_NEGATIVE://No button clickedrbPreferredLocaleSelector.check(rbPreferredLocaleSelector.getChildAt(formerSelectedRadioButton).getId());break;}}};AlertDialog.Builder builder = new AlertDialog.Builder(thisActivity);builder.setMessage(getString(R.string.language_restart)).setPositiveButton(getString(R.string.restart_now), dialogClickListener).setNegativeButton(getString(R.string.cancel), dialogClickListener).setCancelable(false).show();;}private void updateRadioButtonState(){String pref_locale = mPreferences.getString(""pref_locale"", """");String[] supportedLocales = LocaleHelper.SupportedLocales;// if no preference is set, find app defaultif (pref_locale.equalsIgnoreCase("""")) {// Use device localeRadioButton rb = (RadioButton) rbPreferredLocaleSelector.getChildAt(0);rb.setChecked(true);formerSelectedRadioButton = 0;}else {for (int i = 0; i < supportedLocales.length; i++) {if (pref_locale.equalsIgnoreCase(supportedLocales[i])) {RadioButton rb = (RadioButton) rbPreferredLocaleSelector.getChildAt(i);rb.setChecked(true);formerSelectedRadioButton = i;return;}}}}@Overridepublic void onLoginSuccessful() {// Refresh the login controlstoggle();}}",INaturalistPrefsActivity.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.scrollerproxy;import android.annotation.TargetApi;import android.content.Context;import android.widget.OverScroller;@TargetApi(9)public class GingerScroller extends ScrollerProxy {protected final OverScroller mScroller;private boolean mFirstScroll = false;public GingerScroller(Context context) {mScroller = new OverScroller(context);}@Overridepublic boolean computeScrollOffset() {// Workaround for first scroll returning 0 for the direction of the edge it hits.// Simply recompute values.if (mFirstScroll) {mScroller.computeScrollOffset();mFirstScroll = false;}return mScroller.computeScrollOffset();}@Overridepublic void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY,int overX, int overY) {mScroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY, overX, overY);}@Overridepublic void forceFinished(boolean finished) {mScroller.forceFinished(finished);}@Overridepublic boolean isFinished() {return mScroller.isFinished();}@Overridepublic int getCurrX() {return mScroller.getCurrX();}@Overridepublic int getCurrY() {return mScroller.getCurrY();}}",GingerScroller.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.scrollerproxy;import android.annotation.TargetApi;import android.content.Context;@TargetApi(14)public class IcsScroller extends GingerScroller {public IcsScroller(Context context) {super(context);}@Overridepublic boolean computeScrollOffset() {return mScroller.computeScrollOffset();}}",IcsScroller.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.scrollerproxy;import android.content.Context;import android.widget.Scroller;public class PreGingerScroller extends ScrollerProxy {private final Scroller mScroller;public PreGingerScroller(Context context) {mScroller = new Scroller(context);}@Overridepublic boolean computeScrollOffset() {return mScroller.computeScrollOffset();}@Overridepublic void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY,int overX, int overY) {mScroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY);}@Overridepublic void forceFinished(boolean finished) {mScroller.forceFinished(finished);}public boolean isFinished() {return mScroller.isFinished();}@Overridepublic int getCurrX() {return mScroller.getCurrX();}@Overridepublic int getCurrY() {return mScroller.getCurrY();}}",PreGingerScroller.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.scrollerproxy;import android.content.Context;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;public abstract class ScrollerProxy {public static ScrollerProxy getScroller(Context context) {if (VERSION.SDK_INT < VERSION_CODES.GINGERBREAD) {return new PreGingerScroller(context);} else if (VERSION.SDK_INT < VERSION_CODES.ICE_CREAM_SANDWICH) {return new GingerScroller(context);} else {return new IcsScroller(context);}}public abstract boolean computeScrollOffset();public abstract void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY,int maxY, int overX, int overY);public abstract void forceFinished(boolean finished);public abstract boolean isFinished();public abstract int getCurrX();public abstract int getCurrY();}",ScrollerProxy.java,0
200,"package uk.co.senab.photoview;import android.content.Context;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.view.MotionEvent;/*** Found at http://stackoverflow.com/questions/7814017/is-it-possible-to-disable-scrolling-on-a-viewpager.* Convenient way to temporarily disable ViewPager navigation while interacting with ImageView.** Julia Zudikova*//*** Hacky fix for Issue #4 and* http://code.google.com/p/android/issues/detail?id=18990* <p/>* ScaleGestureDetector seems to mess up the touch events, which means that* ViewGroups which make use of onInterceptTouchEvent throw a lot of* IllegalArgumentException: pointerIndex out of range.* <p/>* There's not much I can do in my code for now, but we can mask the result by* just catching the problem and ignoring it.** @author Chris Banes*/public class HackyViewPager extends ViewPager {private boolean isLocked;public HackyViewPager(Context context) {super(context);isLocked = false;}public HackyViewPager(Context context, AttributeSet attrs) {super(context, attrs);isLocked = false;}@Overridepublic boolean onInterceptTouchEvent(MotionEvent ev) {if (!isLocked) {try {return super.onInterceptTouchEvent(ev);} catch (IllegalArgumentException e) {e.printStackTrace();return false;}}return false;}@Overridepublic boolean onTouchEvent(MotionEvent event) {if (!isLocked) {return super.onTouchEvent(event);}return false;}public void toggleLock() {isLocked = !isLocked;}public void setLocked(boolean isLocked) {this.isLocked = isLocked;}public boolean isLocked() {return isLocked;}}",HackyViewPager.java,0
200,"package uk.co.senab.photoview;import android.graphics.RectF;import android.view.GestureDetector;import android.view.MotionEvent;import android.widget.ImageView;/*** Provided default implementation of GestureDetector.OnDoubleTapListener, to be overriden with custom behavior, if needed* <p>&nbsp;</p>* To be used via {@link uk.co.senab.photoview.PhotoViewAttacher#setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener)}*/public class DefaultOnDoubleTapListener implements GestureDetector.OnDoubleTapListener {private PhotoViewAttacher photoViewAttacher;/*** Default constructor** @param photoViewAttacher PhotoViewAttacher to bind to*/public DefaultOnDoubleTapListener(PhotoViewAttacher photoViewAttacher) {setPhotoViewAttacher(photoViewAttacher);}/*** Allows to change PhotoViewAttacher within range of single instance** @param newPhotoViewAttacher PhotoViewAttacher to bind to*/public void setPhotoViewAttacher(PhotoViewAttacher newPhotoViewAttacher) {this.photoViewAttacher = newPhotoViewAttacher;}@Overridepublic boolean onSingleTapConfirmed(MotionEvent e) {if (this.photoViewAttacher == null)return false;ImageView imageView = photoViewAttacher.getImageView();if (null != photoViewAttacher.getOnPhotoTapListener()) {final RectF displayRect = photoViewAttacher.getDisplayRect();if (null != displayRect) {final float x = e.getX(), y = e.getY();// Check to see if the user tapped on the photoif (displayRect.contains(x, y)) {float xResult = (x - displayRect.left)/ displayRect.width();float yResult = (y - displayRect.top)/ displayRect.height();photoViewAttacher.getOnPhotoTapListener().onPhotoTap(imageView, xResult, yResult);return true;}}}if (null != photoViewAttacher.getOnViewTapListener()) {photoViewAttacher.getOnViewTapListener().onViewTap(imageView, e.getX(), e.getY());}return false;}@Overridepublic boolean onDoubleTap(MotionEvent ev) {if (photoViewAttacher == null)return false;try {float scale = photoViewAttacher.getScale();float x = ev.getX();float y = ev.getY();if (scale < photoViewAttacher.getMediumScale()) {photoViewAttacher.setScale(photoViewAttacher.getMediumScale(), x, y, true);} else if (scale >= photoViewAttacher.getMediumScale() && scale < photoViewAttacher.getMaximumScale()) {photoViewAttacher.setScale(photoViewAttacher.getMaximumScale(), x, y, true);} else {photoViewAttacher.setScale(photoViewAttacher.getMinimumScale(), x, y, true);}} catch (ArrayIndexOutOfBoundsException e) {// Can sometimes happen when getX() and getY() is called}return true;}@Overridepublic boolean onDoubleTapEvent(MotionEvent e) {// Wait for the confirmed onDoubleTap() insteadreturn false;}}",DefaultOnDoubleTapListener.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview;import android.annotation.TargetApi;import android.os.Build;import android.os.Build.VERSION;import android.os.Build.VERSION_CODES;import android.view.MotionEvent;import android.view.View;public class Compat {private static final int SIXTY_FPS_INTERVAL = 1000 / 60;public static void postOnAnimation(View view, Runnable runnable) {if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {postOnAnimationJellyBean(view, runnable);} else {view.postDelayed(runnable, SIXTY_FPS_INTERVAL);}}@TargetApi(16)private static void postOnAnimationJellyBean(View view, Runnable runnable) {view.postOnAnimation(runnable);}public static int getPointerIndex(int action) {if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB)return getPointerIndexHoneyComb(action);elsereturn getPointerIndexEclair(action);}@SuppressWarnings(""deprecation"")@TargetApi(Build.VERSION_CODES.ECLAIR)private static int getPointerIndexEclair(int action) {return (action & MotionEvent.ACTION_POINTER_ID_MASK) >> MotionEvent.ACTION_POINTER_ID_SHIFT;}@TargetApi(Build.VERSION_CODES.HONEYCOMB)private static int getPointerIndexHoneyComb(int action) {return (action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;}}",Compat.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview;import android.graphics.Bitmap;import android.graphics.Matrix;import android.graphics.RectF;import android.view.GestureDetector;import android.view.View;import android.widget.ImageView;public interface IPhotoView {public static final float DEFAULT_MAX_SCALE = 3.0f;public static final float DEFAULT_MID_SCALE = 1.75f;public static final float DEFAULT_MIN_SCALE = 1.0f;public static final int DEFAULT_ZOOM_DURATION = 200;/*** Returns true if the PhotoView is set to allow zooming of Photos.** @return true if the PhotoView allows zooming.*/boolean canZoom();/*** Gets the Display Rectangle of the currently displayed Drawable. The Rectangle is relative to* this View and includes all scaling and translations.** @return - RectF of Displayed Drawable*/RectF getDisplayRect();/*** Sets the Display Matrix of the currently displayed Drawable. The Rectangle is considered* relative to this View and includes all scaling and translations.** @param finalMatrix target matrix to set PhotoView to* @return - true if rectangle was applied successfully*/boolean setDisplayMatrix(Matrix finalMatrix);/*** Gets the Display Matrix of the currently displayed Drawable. The Rectangle is considered* relative to this View and includes all scaling and translations.** @return - true if rectangle was applied successfully*/Matrix getDisplayMatrix();/*** Use {@link #getMinimumScale()} instead, this will be removed in future release** @return The current minimum scale level. What this value represents depends on the current* {@link android.widget.ImageView.ScaleType}.*/@Deprecatedfloat getMinScale();/*** @return The current minimum scale level. What this value represents depends on the current* {@link android.widget.ImageView.ScaleType}.*/float getMinimumScale();/*** Use {@link #getMediumScale()} instead, this will be removed in future release** @return The current middle scale level. What this value represents depends on the current* {@link android.widget.ImageView.ScaleType}.*/@Deprecatedfloat getMidScale();/*** @return The current medium scale level. What this value represents depends on the current* {@link android.widget.ImageView.ScaleType}.*/float getMediumScale();/*** Use {@link #getMaximumScale()} instead, this will be removed in future release** @return The current maximum scale level. What this value represents depends on the current* {@link android.widget.ImageView.ScaleType}.*/@Deprecatedfloat getMaxScale();/*** @return The current maximum scale level. What this value represents depends on the current* {@link android.widget.ImageView.ScaleType}.*/float getMaximumScale();/*** Returns the current scale value** @return float - current scale value*/float getScale();/*** Return the current scale type in use by the ImageView.** @return current ImageView.ScaleType*/ImageView.ScaleType getScaleType();/*** Whether to allow the ImageView's parent to intercept the touch event when the photo is scroll* to it's horizontal edge.** @param allow whether to allow intercepting by parent element or not*/void setAllowParentInterceptOnEdge(boolean allow);/*** Use {@link #setMinimumScale(float minimumScale)} instead, this will be removed in future* release* <p>&nbsp;</p>* Sets the minimum scale level. What this value represents depends on the current {@link* android.widget.ImageView.ScaleType}.** @param minScale minimum allowed scale*/@Deprecatedvoid setMinScale(float minScale);/*** Sets the minimum scale level. What this value represents depends on the current {@link* android.widget.ImageView.ScaleType}.** @param minimumScale minimum allowed scale*/void setMinimumScale(float minimumScale);/*** Use {@link #setMediumScale(float mediumScale)} instead, this will be removed in future* release* <p>&nbsp;</p>* Sets the middle scale level. What this value represents depends on the current {@link* android.widget.ImageView.ScaleType}.** @param midScale medium scale preset*/@Deprecatedvoid setMidScale(float midScale);/** Sets the medium scale level. What this value represents depends on the current {@link android.widget.ImageView.ScaleType}.** @param mediumScale medium scale preset*/void setMediumScale(float mediumScale);/*** Use {@link #setMaximumScale(float maximumScale)} instead, this will be removed in future* release* <p>&nbsp;</p>* Sets the maximum scale level. What this value represents depends on the current {@link* android.widget.ImageView.ScaleType}.** @param maxScale maximum allowed scale preset*/@Deprecatedvoid setMaxScale(float maxScale);/*** Sets the maximum scale level. What this value represents depends on the current {@link* android.widget.ImageView.ScaleType}.** @param maximumScale maximum allowed scale preset*/void setMaximumScale(float maximumScale);/*** Register a callback to be invoked when the Photo displayed by this view is long-pressed.** @param listener - Listener to be registered.*/void setOnLongClickListener(View.OnLongClickListener listener);/*** Register a callback to be invoked when the Matrix has changed for this View. An example would* be the user panning or scaling the Photo.** @param listener - Listener to be registered.*/void setOnMatrixChangeListener(PhotoViewAttacher.OnMatrixChangedListener listener);/*** Register a callback to be invoked when the Photo displayed by this View is tapped with a* single tap.** @param listener - Listener to be registered.*/void setOnPhotoTapListener(PhotoViewAttacher.OnPhotoTapListener listener);/*** Returns a listener to be invoked when the Photo displayed by this View is tapped with a* single tap.** @return PhotoViewAttacher.OnPhotoTapListener currently set, may be null*/PhotoViewAttacher.OnPhotoTapListener getOnPhotoTapListener();/*** Register a callback to be invoked when the View is tapped with a single tap.** @param listener - Listener to be registered.*/void setOnViewTapListener(PhotoViewAttacher.OnViewTapListener listener);/*** Enables rotation via PhotoView internal functions.** @param rotationDegree - Degree to rotate PhotoView to, should be in range 0 to 360*/void setRotationTo(float rotationDegree);/*** Enables rotation via PhotoView internal functions.** @param rotationDegree - Degree to rotate PhotoView by, should be in range 0 to 360*/void setRotationBy(float rotationDegree);/*** Returns a callback listener to be invoked when the View is tapped with a single tap.** @return PhotoViewAttacher.OnViewTapListener currently set, may be null*/PhotoViewAttacher.OnViewTapListener getOnViewTapListener();/*** Changes the current scale to the specified value.** @param scale - Value to scale to*/void setScale(float scale);/*** Changes the current scale to the specified value.** @param scale   - Value to scale to* @param animate - Whether to animate the scale*/void setScale(float scale, boolean animate);/*** Changes the current scale to the specified value, around the given focal point.** @param scale   - Value to scale to* @param focalX  - X Focus Point* @param focalY  - Y Focus Point* @param animate - Whether to animate the scale*/void setScale(float scale, float focalX, float focalY, boolean animate);/*** Controls how the image should be resized or moved to match the size of the ImageView. Any* scaling or panning will happen within the confines of this {@link* android.widget.ImageView.ScaleType}.** @param scaleType - The desired scaling mode.*/void setScaleType(ImageView.ScaleType scaleType);/*** Allows you to enable/disable the zoom functionality on the ImageView. When disable the* ImageView reverts to using the FIT_CENTER matrix.** @param zoomable - Whether the zoom functionality is enabled.*/void setZoomable(boolean zoomable);/*** Enables rotation via PhotoView internal functions. Name is chosen so it won't collide with* View.setRotation(float) in API since 11** @param rotationDegree - Degree to rotate PhotoView to, should be in range 0 to 360* @deprecated use {@link #setRotationTo(float)}*/void setPhotoViewRotation(float rotationDegree);/*** Extracts currently visible area to Bitmap object, if there is no image loaded yet or the* ImageView is already destroyed, returns {@code null}** @return currently visible area as bitmap or null*/Bitmap getVisibleRectangleBitmap();/*** Allows to change zoom transition speed, default value is 200 (PhotoViewAttacher.DEFAULT_ZOOM_DURATION).* Will default to 200 if provided negative value** @param milliseconds duration of zoom interpolation*/void setZoomTransitionDuration(int milliseconds);/*** Will return instance of IPhotoView (eg. PhotoViewAttacher), can be used to provide better* integration** @return IPhotoView implementation instance if available, null if not*/IPhotoView getIPhotoViewImplementation();/*** Sets custom double tap listener, to intercept default given functions. To reset behavior to* default, you can just pass in ""null"" or public field of PhotoViewAttacher.defaultOnDoubleTapListener** @param newOnDoubleTapListener custom OnDoubleTapListener to be set on ImageView*/public void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener newOnDoubleTapListener);}",IPhotoView.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Matrix;import android.graphics.RectF;import android.graphics.drawable.Drawable;import android.net.Uri;import android.util.AttributeSet;import android.view.GestureDetector;import android.widget.ImageView;import uk.co.senab.photoview.PhotoViewAttacher.OnMatrixChangedListener;import uk.co.senab.photoview.PhotoViewAttacher.OnPhotoTapListener;import uk.co.senab.photoview.PhotoViewAttacher.OnViewTapListener;public class PhotoView extends ImageView implements IPhotoView {private final PhotoViewAttacher mAttacher;private ScaleType mPendingScaleType;public PhotoView(Context context) {this(context, null);}public PhotoView(Context context, AttributeSet attr) {this(context, attr, 0);}public PhotoView(Context context, AttributeSet attr, int defStyle) {super(context, attr, defStyle);super.setScaleType(ScaleType.MATRIX);mAttacher = new PhotoViewAttacher(this);if (null != mPendingScaleType) {setScaleType(mPendingScaleType);mPendingScaleType = null;}}/*** @deprecated use {@link #setRotationTo(float)}*/@Overridepublic void setPhotoViewRotation(float rotationDegree) {mAttacher.setRotationTo(rotationDegree);}@Overridepublic void setRotationTo(float rotationDegree) {mAttacher.setRotationTo(rotationDegree);}@Overridepublic void setRotationBy(float rotationDegree) {mAttacher.setRotationBy(rotationDegree);}@Overridepublic boolean canZoom() {return mAttacher.canZoom();}@Overridepublic RectF getDisplayRect() {return mAttacher.getDisplayRect();}@Overridepublic Matrix getDisplayMatrix() {return mAttacher.getDrawMatrix();}@Overridepublic boolean setDisplayMatrix(Matrix finalRectangle) {return mAttacher.setDisplayMatrix(finalRectangle);}@Override@Deprecatedpublic float getMinScale() {return getMinimumScale();}@Overridepublic float getMinimumScale() {return mAttacher.getMinimumScale();}@Override@Deprecatedpublic float getMidScale() {return getMediumScale();}@Overridepublic float getMediumScale() {return mAttacher.getMediumScale();}@Override@Deprecatedpublic float getMaxScale() {return getMaximumScale();}@Overridepublic float getMaximumScale() {return mAttacher.getMaximumScale();}@Overridepublic float getScale() {return mAttacher.getScale();}@Overridepublic ScaleType getScaleType() {return mAttacher.getScaleType();}@Overridepublic void setAllowParentInterceptOnEdge(boolean allow) {mAttacher.setAllowParentInterceptOnEdge(allow);}@Override@Deprecatedpublic void setMinScale(float minScale) {setMinimumScale(minScale);}@Overridepublic void setMinimumScale(float minimumScale) {mAttacher.setMinimumScale(minimumScale);}@Override@Deprecatedpublic void setMidScale(float midScale) {setMediumScale(midScale);}@Overridepublic void setMediumScale(float mediumScale) {mAttacher.setMediumScale(mediumScale);}@Override@Deprecatedpublic void setMaxScale(float maxScale) {setMaximumScale(maxScale);}@Overridepublic void setMaximumScale(float maximumScale) {mAttacher.setMaximumScale(maximumScale);}@Override// setImageBitmap calls through to this methodpublic void setImageDrawable(Drawable drawable) {super.setImageDrawable(drawable);if (null != mAttacher) {mAttacher.update();}}@Overridepublic void setImageResource(int resId) {super.setImageResource(resId);if (null != mAttacher) {mAttacher.update();}}@Overridepublic void setImageURI(Uri uri) {super.setImageURI(uri);if (null != mAttacher) {mAttacher.update();}}@Overridepublic void setOnMatrixChangeListener(OnMatrixChangedListener listener) {mAttacher.setOnMatrixChangeListener(listener);}@Overridepublic void setOnLongClickListener(OnLongClickListener l) {mAttacher.setOnLongClickListener(l);}@Overridepublic void setOnPhotoTapListener(OnPhotoTapListener listener) {mAttacher.setOnPhotoTapListener(listener);}@Overridepublic OnPhotoTapListener getOnPhotoTapListener() {return mAttacher.getOnPhotoTapListener();}@Overridepublic void setOnViewTapListener(OnViewTapListener listener) {mAttacher.setOnViewTapListener(listener);}@Overridepublic OnViewTapListener getOnViewTapListener() {return mAttacher.getOnViewTapListener();}@Overridepublic void setScale(float scale) {mAttacher.setScale(scale);}@Overridepublic void setScale(float scale, boolean animate) {mAttacher.setScale(scale, animate);}@Overridepublic void setScale(float scale, float focalX, float focalY, boolean animate) {mAttacher.setScale(scale, focalX, focalY, animate);}@Overridepublic void setScaleType(ScaleType scaleType) {if (null != mAttacher) {mAttacher.setScaleType(scaleType);} else {mPendingScaleType = scaleType;}}@Overridepublic void setZoomable(boolean zoomable) {mAttacher.setZoomable(zoomable);}@Overridepublic Bitmap getVisibleRectangleBitmap() {return mAttacher.getVisibleRectangleBitmap();}@Overridepublic void setZoomTransitionDuration(int milliseconds) {mAttacher.setZoomTransitionDuration(milliseconds);}@Overridepublic IPhotoView getIPhotoViewImplementation() {return mAttacher;}@Overridepublic void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener newOnDoubleTapListener) {mAttacher.setOnDoubleTapListener(newOnDoubleTapListener);}@Overrideprotected void onDetachedFromWindow() {mAttacher.cleanup();super.onDetachedFromWindow();}}",PhotoView.java,0
200,"package uk.co.senab.photoview.gestures;/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/import android.content.Context;import android.os.Build;public final class VersionedGestureDetector {public static GestureDetector newInstance(Context context,OnGestureListener listener) {final int sdkVersion = Build.VERSION.SDK_INT;GestureDetector detector;if (sdkVersion < Build.VERSION_CODES.ECLAIR) {detector = new CupcakeGestureDetector(context);} else if (sdkVersion < Build.VERSION_CODES.FROYO) {detector = new EclairGestureDetector(context);} else {detector = new FroyoGestureDetector(context);}detector.setOnGestureListener(listener);return detector;}}",VersionedGestureDetector.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.gestures;import android.annotation.TargetApi;import android.content.Context;import android.view.MotionEvent;import android.view.ScaleGestureDetector;@TargetApi(8)public class FroyoGestureDetector extends EclairGestureDetector {protected final ScaleGestureDetector mDetector;public FroyoGestureDetector(Context context) {super(context);ScaleGestureDetector.OnScaleGestureListener mScaleListener = new ScaleGestureDetector.OnScaleGestureListener() {@Overridepublic boolean onScale(ScaleGestureDetector detector) {float scaleFactor = detector.getScaleFactor();if (Float.isNaN(scaleFactor) || Float.isInfinite(scaleFactor))return false;mListener.onScale(scaleFactor,detector.getFocusX(), detector.getFocusY());return true;}@Overridepublic boolean onScaleBegin(ScaleGestureDetector detector) {return true;}@Overridepublic void onScaleEnd(ScaleGestureDetector detector) {// NO-OP}};mDetector = new ScaleGestureDetector(context, mScaleListener);}@Overridepublic boolean isScaling() {return mDetector.isInProgress();}@Overridepublic boolean onTouchEvent(MotionEvent ev) {mDetector.onTouchEvent(ev);return super.onTouchEvent(ev);}}",FroyoGestureDetector.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.gestures;import android.annotation.TargetApi;import android.content.Context;import android.view.MotionEvent;import uk.co.senab.photoview.Compat;@TargetApi(5)public class EclairGestureDetector extends CupcakeGestureDetector {private static final int INVALID_POINTER_ID = -1;private int mActivePointerId = INVALID_POINTER_ID;private int mActivePointerIndex = 0;public EclairGestureDetector(Context context) {super(context);}@Overridefloat getActiveX(MotionEvent ev) {try {return ev.getX(mActivePointerIndex);} catch (Exception e) {return ev.getX();}}@Overridefloat getActiveY(MotionEvent ev) {try {return ev.getY(mActivePointerIndex);} catch (Exception e) {return ev.getY();}}@Overridepublic boolean onTouchEvent(MotionEvent ev) {final int action = ev.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_DOWN:mActivePointerId = ev.getPointerId(0);break;case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:mActivePointerId = INVALID_POINTER_ID;break;case MotionEvent.ACTION_POINTER_UP:// Ignore deprecation, ACTION_POINTER_ID_MASK and// ACTION_POINTER_ID_SHIFT has same value and are deprecated// You can have either deprecation or lint target api warningfinal int pointerIndex = Compat.getPointerIndex(ev.getAction());final int pointerId = ev.getPointerId(pointerIndex);if (pointerId == mActivePointerId) {// This was our active pointer going up. Choose a new// active pointer and adjust accordingly.final int newPointerIndex = pointerIndex == 0 ? 1 : 0;mActivePointerId = ev.getPointerId(newPointerIndex);mLastTouchX = ev.getX(newPointerIndex);mLastTouchY = ev.getY(newPointerIndex);}break;}mActivePointerIndex = ev.findPointerIndex(mActivePointerId != INVALID_POINTER_ID ? mActivePointerId: 0);return super.onTouchEvent(ev);}}",EclairGestureDetector.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.gestures;import android.view.MotionEvent;public interface GestureDetector {public boolean onTouchEvent(MotionEvent ev);public boolean isScaling();public void setOnGestureListener(OnGestureListener listener);}",GestureDetector.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.gestures;import android.content.Context;import android.util.FloatMath;import android.util.Log;import android.view.MotionEvent;import android.view.VelocityTracker;import android.view.ViewConfiguration;public class CupcakeGestureDetector implements GestureDetector {protected OnGestureListener mListener;private static final String LOG_TAG = ""CupcakeGestureDetector"";float mLastTouchX;float mLastTouchY;final float mTouchSlop;final float mMinimumVelocity;@Overridepublic void setOnGestureListener(OnGestureListener listener) {this.mListener = listener;}public CupcakeGestureDetector(Context context) {final ViewConfiguration configuration = ViewConfiguration.get(context);mMinimumVelocity = configuration.getScaledMinimumFlingVelocity();mTouchSlop = configuration.getScaledTouchSlop();}private VelocityTracker mVelocityTracker;private boolean mIsDragging;float getActiveX(MotionEvent ev) {return ev.getX();}float getActiveY(MotionEvent ev) {return ev.getY();}public boolean isScaling() {return false;}@Overridepublic boolean onTouchEvent(MotionEvent ev) {switch (ev.getAction()) {case MotionEvent.ACTION_DOWN: {mVelocityTracker = VelocityTracker.obtain();if (null != mVelocityTracker) {mVelocityTracker.addMovement(ev);} else {Log.i(LOG_TAG, ""Velocity tracker is null"");}mLastTouchX = getActiveX(ev);mLastTouchY = getActiveY(ev);mIsDragging = false;break;}case MotionEvent.ACTION_MOVE: {final float x = getActiveX(ev);final float y = getActiveY(ev);final float dx = x - mLastTouchX, dy = y - mLastTouchY;if (!mIsDragging) {// Use Pythagoras to see if drag length is larger than// touch slopmIsDragging = Math.sqrt((dx * dx) + (dy * dy)) >= mTouchSlop;}if (mIsDragging) {mListener.onDrag(dx, dy);mLastTouchX = x;mLastTouchY = y;if (null != mVelocityTracker) {mVelocityTracker.addMovement(ev);}}break;}case MotionEvent.ACTION_CANCEL: {// Recycle Velocity Trackerif (null != mVelocityTracker) {mVelocityTracker.recycle();mVelocityTracker = null;}break;}case MotionEvent.ACTION_UP: {if (mIsDragging) {if (null != mVelocityTracker) {mLastTouchX = getActiveX(ev);mLastTouchY = getActiveY(ev);// Compute velocity within the last 1000msmVelocityTracker.addMovement(ev);mVelocityTracker.computeCurrentVelocity(1000);final float vX = mVelocityTracker.getXVelocity(), vY = mVelocityTracker.getYVelocity();// If the velocity is greater than minVelocity, call// listenerif (Math.max(Math.abs(vX), Math.abs(vY)) >= mMinimumVelocity) {mListener.onFling(mLastTouchX, mLastTouchY, -vX,-vY);}}}// Recycle Velocity Trackerif (null != mVelocityTracker) {mVelocityTracker.recycle();mVelocityTracker = null;}break;}}return true;}}",CupcakeGestureDetector.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.gestures;public interface OnGestureListener {public void onDrag(float dx, float dy);public void onFling(float startX, float startY, float velocityX,float velocityY);public void onScale(float scaleFactor, float focusX, float focusY);}",OnGestureListener.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.log;/*** interface for a logger class to replace the static calls to {@link android.util.Log}*/public interface Logger {/*** Send a {@link android.util.Log#VERBOSE} log message.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.*/int v(String tag, String msg);/*** Send a {@link android.util.Log#VERBOSE} log message and log the exception.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.* @param tr  An exception to log*/int v(String tag, String msg, Throwable tr);/*** Send a {@link android.util.Log#DEBUG} log message.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.*/int d(String tag, String msg);/*** Send a {@link android.util.Log#DEBUG} log message and log the exception.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.* @param tr  An exception to log*/int d(String tag, String msg, Throwable tr);/*** Send an {@link android.util.Log#INFO} log message.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.*/int i(String tag, String msg);/*** Send a {@link android.util.Log#INFO} log message and log the exception.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.* @param tr  An exception to log*/int i(String tag, String msg, Throwable tr);/*** Send a {@link android.util.Log#WARN} log message.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.*/int w(String tag, String msg);/*** Send a {@link android.util.Log#WARN} log message and log the exception.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.* @param tr  An exception to log*/int w(String tag, String msg, Throwable tr);/*** Send an {@link android.util.Log#ERROR} log message.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.*/int e(String tag, String msg);/*** Send a {@link android.util.Log#ERROR} log message and log the exception.** @param tag Used to identify the source of a log message.  It usually identifies*            the class or activity where the log call occurs.* @param msg The message you would like logged.* @param tr  An exception to log*/int e(String tag, String msg, Throwable tr);}",Logger.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.log;import android.util.Log;/*** class that holds the {@link Logger} for this library, defaults to {@link LoggerDefault} to send logs to android {@link Log}*/public final class LogManager {private static Logger logger = new LoggerDefault();public static void setLogger(Logger newLogger) {logger = newLogger;}public static Logger getLogger() {return logger;}}",LogManager.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview.log;import android.util.Log;/*** Helper class to redirect {@link LogManager#logger} to {@link Log}*/public class LoggerDefault implements Logger {@Overridepublic int v(String tag, String msg) {return Log.v(tag, msg);}@Overridepublic int v(String tag, String msg, Throwable tr) {return Log.v(tag, msg, tr);}@Overridepublic int d(String tag, String msg) {return Log.d(tag, msg);}@Overridepublic int d(String tag, String msg, Throwable tr) {return Log.d(tag, msg, tr);}@Overridepublic int i(String tag, String msg) {return Log.i(tag, msg);}@Overridepublic int i(String tag, String msg, Throwable tr) {return Log.i(tag, msg, tr);}@Overridepublic int w(String tag, String msg) {return Log.w(tag, msg);}@Overridepublic int w(String tag, String msg, Throwable tr) {return Log.w(tag, msg, tr);}@Overridepublic int e(String tag, String msg) {return Log.e(tag, msg);}@Overridepublic int e(String tag, String msg, Throwable tr) {return Log.e(tag, msg, tr);}}",LoggerDefault.java,0
200,"/******************************************************************************** Copyright 2011, 2012 Chris Banes.** Licensed under the Apache License, Version 2.0 (the ""License"");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at** http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an ""AS IS"" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and* limitations under the License.*******************************************************************************/package uk.co.senab.photoview;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Matrix;import android.graphics.Matrix.ScaleToFit;import android.graphics.RectF;import android.graphics.drawable.Drawable;import android.util.FloatMath;import android.util.Log;import android.view.GestureDetector;import android.view.MotionEvent;import android.view.View;import android.view.View.OnLongClickListener;import android.view.ViewParent;import android.view.ViewTreeObserver;import android.view.animation.AccelerateDecelerateInterpolator;import android.view.animation.Interpolator;import android.widget.ImageView;import android.widget.ImageView.ScaleType;import java.lang.ref.WeakReference;import uk.co.senab.photoview.gestures.OnGestureListener;import uk.co.senab.photoview.gestures.VersionedGestureDetector;import uk.co.senab.photoview.log.LogManager;import uk.co.senab.photoview.scrollerproxy.ScrollerProxy;import static android.view.MotionEvent.ACTION_CANCEL;import static android.view.MotionEvent.ACTION_DOWN;import static android.view.MotionEvent.ACTION_UP;public class PhotoViewAttacher implements IPhotoView, View.OnTouchListener,OnGestureListener,ViewTreeObserver.OnGlobalLayoutListener {private static final String LOG_TAG = ""PhotoViewAttacher"";// let debug flag be dynamic, but still Proguard can be used to remove from// release buildsprivate static final boolean DEBUG = Log.isLoggable(LOG_TAG, Log.DEBUG);static final Interpolator sInterpolator = new AccelerateDecelerateInterpolator();int ZOOM_DURATION = DEFAULT_ZOOM_DURATION;static final int EDGE_NONE = -1;static final int EDGE_LEFT = 0;static final int EDGE_RIGHT = 1;static final int EDGE_BOTH = 2;private float mMinScale = DEFAULT_MIN_SCALE;private float mMidScale = DEFAULT_MID_SCALE;private float mMaxScale = DEFAULT_MAX_SCALE;private boolean mAllowParentInterceptOnEdge = true;private static void checkZoomLevels(float minZoom, float midZoom,float maxZoom) {if (minZoom >= midZoom) {throw new IllegalArgumentException(""MinZoom has to be less than MidZoom"");} else if (midZoom >= maxZoom) {throw new IllegalArgumentException(""MidZoom has to be less than MaxZoom"");}}/*** @return true if the ImageView exists, and it's Drawable existss*/private static boolean hasDrawable(ImageView imageView) {return null != imageView && null != imageView.getDrawable();}/*** @return true if the ScaleType is supported.*/private static boolean isSupportedScaleType(final ScaleType scaleType) {if (null == scaleType) {return false;}switch (scaleType) {case MATRIX:throw new IllegalArgumentException(scaleType.name()+ "" is not supported in PhotoView"");default:return true;}}/*** Set's the ImageView's ScaleType to Matrix.*/private static void setImageViewScaleTypeMatrix(ImageView imageView) {/*** PhotoView sets it's own ScaleType to Matrix, then diverts all calls* setScaleType to this.setScaleType automatically.*/if (null != imageView && !(imageView instanceof IPhotoView)) {if (!ScaleType.MATRIX.equals(imageView.getScaleType())) {imageView.setScaleType(ScaleType.MATRIX);}}}private WeakReference<ImageView> mImageView;// Gesture Detectorsprivate GestureDetector mGestureDetector;private uk.co.senab.photoview.gestures.GestureDetector mScaleDragDetector;// These are set so we don't keep allocating them on the heapprivate final Matrix mBaseMatrix = new Matrix();private final Matrix mDrawMatrix = new Matrix();private final Matrix mSuppMatrix = new Matrix();private final RectF mDisplayRect = new RectF();private final float[] mMatrixValues = new float[9];// Listenersprivate OnMatrixChangedListener mMatrixChangeListener;private OnPhotoTapListener mPhotoTapListener;private OnViewTapListener mViewTapListener;private OnLongClickListener mLongClickListener;private int mIvTop, mIvRight, mIvBottom, mIvLeft;private FlingRunnable mCurrentFlingRunnable;private int mScrollEdge = EDGE_BOTH;private boolean mZoomEnabled;private ScaleType mScaleType = ScaleType.FIT_CENTER;public PhotoViewAttacher(ImageView imageView) {mImageView = new WeakReference<ImageView>(imageView);imageView.setDrawingCacheEnabled(true);imageView.setOnTouchListener(this);ViewTreeObserver observer = imageView.getViewTreeObserver();if (null != observer)observer.addOnGlobalLayoutListener(this);// Make sure we using MATRIX Scale TypesetImageViewScaleTypeMatrix(imageView);if (imageView.isInEditMode()) {return;}// Create Gesture Detectors...mScaleDragDetector = VersionedGestureDetector.newInstance(imageView.getContext(), this);mGestureDetector = new GestureDetector(imageView.getContext(),new GestureDetector.SimpleOnGestureListener() {// forward long click listener@Overridepublic void onLongPress(MotionEvent e) {if (null != mLongClickListener) {mLongClickListener.onLongClick(getImageView());}}});mGestureDetector.setOnDoubleTapListener(new DefaultOnDoubleTapListener(this));// Finally, update the UI so that we're zoomablesetZoomable(true);}@Overridepublic void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener newOnDoubleTapListener) {if (newOnDoubleTapListener != null)this.mGestureDetector.setOnDoubleTapListener(newOnDoubleTapListener);elsethis.mGestureDetector.setOnDoubleTapListener(new DefaultOnDoubleTapListener(this));}@Overridepublic boolean canZoom() {return mZoomEnabled;}/*** Clean-up the resources attached to this object. This needs to be called when the ImageView is* no longer used. A good example is from {@link android.view.View#onDetachedFromWindow()} or* from {@link android.app.Activity#onDestroy()}. This is automatically called if you are using* {@link uk.co.senab.photoview.PhotoView}.*/@SuppressWarnings(""deprecation"")public void cleanup() {if (null == mImageView) {return; // cleanup already done}final ImageView imageView = mImageView.get();if (null != imageView) {// Remove this as a global layout listenerViewTreeObserver observer = imageView.getViewTreeObserver();if (null != observer && observer.isAlive()) {observer.removeGlobalOnLayoutListener(this);}// Remove the ImageView's reference to thisimageView.setOnTouchListener(null);// make sure a pending fling runnable won't be runcancelFling();}if (null != mGestureDetector) {mGestureDetector.setOnDoubleTapListener(null);}// Clear listeners toomMatrixChangeListener = null;mPhotoTapListener = null;mViewTapListener = null;// Finally, clear ImageViewmImageView = null;}@Overridepublic RectF getDisplayRect() {checkMatrixBounds();return getDisplayRect(getDrawMatrix());}@Overridepublic boolean setDisplayMatrix(Matrix finalMatrix) {if (finalMatrix == null)throw new IllegalArgumentException(""Matrix cannot be null"");ImageView imageView = getImageView();if (null == imageView)return false;if (null == imageView.getDrawable())return false;mSuppMatrix.set(finalMatrix);setImageViewMatrix(getDrawMatrix());checkMatrixBounds();return true;}/*** @deprecated use {@link #setRotationTo(float)}*/@Overridepublic void setPhotoViewRotation(float degrees) {mSuppMatrix.setRotate(degrees % 360);checkAndDisplayMatrix();}@Overridepublic void setRotationTo(float degrees) {mSuppMatrix.setRotate(degrees % 360);checkAndDisplayMatrix();}@Overridepublic void setRotationBy(float degrees) {mSuppMatrix.postRotate(degrees % 360);checkAndDisplayMatrix();}public ImageView getImageView() {ImageView imageView = null;if (null != mImageView) {imageView = mImageView.get();}// If we don't have an ImageView, call cleanup()if (null == imageView) {cleanup();Log.i(LOG_TAG,""ImageView no longer exists. You should not use this PhotoViewAttacher any more."");}return imageView;}@Override@Deprecatedpublic float getMinScale() {return getMinimumScale();}@Overridepublic float getMinimumScale() {return mMinScale;}@Override@Deprecatedpublic float getMidScale() {return getMediumScale();}@Overridepublic float getMediumScale() {return mMidScale;}@Override@Deprecatedpublic float getMaxScale() {return getMaximumScale();}@Overridepublic float getMaximumScale() {return mMaxScale;}@Overridepublic float getScale() {return (float)Math.sqrt((float) Math.pow(getValue(mSuppMatrix, Matrix.MSCALE_X), 2) + (float) Math.pow(getValue(mSuppMatrix, Matrix.MSKEW_Y), 2));}@Overridepublic ScaleType getScaleType() {return mScaleType;}@Overridepublic void onDrag(float dx, float dy) {if (mScaleDragDetector.isScaling()) {return; // Do not drag if we are already scaling}if (DEBUG) {LogManager.getLogger().d(LOG_TAG,String.format(""onDrag: dx: %.2f. dy: %.2f"", dx, dy));}ImageView imageView = getImageView();mSuppMatrix.postTranslate(dx, dy);checkAndDisplayMatrix();/*** Here we decide whether to let the ImageView's parent to start taking* over the touch event.** First we check whether this function is enabled. We never want the* parent to take over if we're scaling. We then check the edge we're* on, and the direction of the scroll (i.e. if we're pulling against* the edge, aka 'overscrolling', let the parent take over).*/ViewParent parent = imageView.getParent();if (mAllowParentInterceptOnEdge && !mScaleDragDetector.isScaling()) {if (mScrollEdge == EDGE_BOTH|| (mScrollEdge == EDGE_LEFT && dx >= 1f)|| (mScrollEdge == EDGE_RIGHT && dx <= -1f)) {if (null != parent)parent.requestDisallowInterceptTouchEvent(false);}} else {if (null != parent) {parent.requestDisallowInterceptTouchEvent(true);}}}@Overridepublic void onFling(float startX, float startY, float velocityX,float velocityY) {if (DEBUG) {LogManager.getLogger().d(LOG_TAG,""onFling. sX: "" + startX + "" sY: "" + startY + "" Vx: ""+ velocityX + "" Vy: "" + velocityY);}ImageView imageView = getImageView();mCurrentFlingRunnable = new FlingRunnable(imageView.getContext());mCurrentFlingRunnable.fling(getImageViewWidth(imageView),getImageViewHeight(imageView), (int) velocityX, (int) velocityY);imageView.post(mCurrentFlingRunnable);}@Overridepublic void onGlobalLayout() {ImageView imageView = getImageView();if (null != imageView) {if (mZoomEnabled) {final int top = imageView.getTop();final int right = imageView.getRight();final int bottom = imageView.getBottom();final int left = imageView.getLeft();/*** We need to check whether the ImageView's bounds have changed.* This would be easier if we targeted API 11+ as we could just use* View.OnLayoutChangeListener. Instead we have to replicate the* work, keeping track of the ImageView's bounds and then checking* if the values change.*/if (top != mIvTop || bottom != mIvBottom || left != mIvLeft|| right != mIvRight) {// Update our base matrix, as the bounds have changedupdateBaseMatrix(imageView.getDrawable());// Update values as something has changedmIvTop = top;mIvRight = right;mIvBottom = bottom;mIvLeft = left;}} else {updateBaseMatrix(imageView.getDrawable());}}}@Overridepublic void onScale(float scaleFactor, float focusX, float focusY) {if (DEBUG) {LogManager.getLogger().d(LOG_TAG,String.format(""onScale: scale: %.2f. fX: %.2f. fY: %.2f"",scaleFactor, focusX, focusY));}if (getScale() < mMaxScale || scaleFactor < 1f) {mSuppMatrix.postScale(scaleFactor, scaleFactor, focusX, focusY);checkAndDisplayMatrix();}}@Overridepublic boolean onTouch(View v, MotionEvent ev) {boolean handled = false;if (mZoomEnabled && hasDrawable((ImageView) v)) {ViewParent parent = v.getParent();switch (ev.getAction()) {case ACTION_DOWN:// First, disable the Parent from intercepting the touch// eventif (null != parent)parent.requestDisallowInterceptTouchEvent(true);elseLog.i(LOG_TAG, ""onTouch getParent() returned null"");// If we're flinging, and the user presses down, cancel// flingcancelFling();break;case ACTION_CANCEL:case ACTION_UP:// If the user has zoomed less than min scale, zoom back// to min scaleif (getScale() < mMinScale) {RectF rect = getDisplayRect();if (null != rect) {v.post(new AnimatedZoomRunnable(getScale(), mMinScale,rect.centerX(), rect.centerY()));handled = true;}}break;}// Try the Scale/Drag detectorif (null != mScaleDragDetector&& mScaleDragDetector.onTouchEvent(ev)) {handled = true;}// Check to see if the user double tappedif (null != mGestureDetector && mGestureDetector.onTouchEvent(ev)) {handled = true;}}return handled;}@Overridepublic void setAllowParentInterceptOnEdge(boolean allow) {mAllowParentInterceptOnEdge = allow;}@Override@Deprecatedpublic void setMinScale(float minScale) {setMinimumScale(minScale);}@Overridepublic void setMinimumScale(float minimumScale) {checkZoomLevels(minimumScale, mMidScale, mMaxScale);mMinScale = minimumScale;}@Override@Deprecatedpublic void setMidScale(float midScale) {setMediumScale(midScale);}@Overridepublic void setMediumScale(float mediumScale) {checkZoomLevels(mMinScale, mediumScale, mMaxScale);mMidScale = mediumScale;}@Override@Deprecatedpublic void setMaxScale(float maxScale) {setMaximumScale(maxScale);}@Overridepublic void setMaximumScale(float maximumScale) {checkZoomLevels(mMinScale, mMidScale, maximumScale);mMaxScale = maximumScale;}@Overridepublic void setOnLongClickListener(OnLongClickListener listener) {mLongClickListener = listener;}@Overridepublic void setOnMatrixChangeListener(OnMatrixChangedListener listener) {mMatrixChangeListener = listener;}@Overridepublic void setOnPhotoTapListener(OnPhotoTapListener listener) {mPhotoTapListener = listener;}@Overridepublic OnPhotoTapListener getOnPhotoTapListener() {return mPhotoTapListener;}@Overridepublic void setOnViewTapListener(OnViewTapListener listener) {mViewTapListener = listener;}@Overridepublic OnViewTapListener getOnViewTapListener() {return mViewTapListener;}@Overridepublic void setScale(float scale) {setScale(scale, false);}@Overridepublic void setScale(float scale, boolean animate) {ImageView imageView = getImageView();if (null != imageView) {setScale(scale,(imageView.getRight()) / 2,(imageView.getBottom()) / 2,animate);}}@Overridepublic void setScale(float scale, float focalX, float focalY,boolean animate) {ImageView imageView = getImageView();if (null != imageView) {// Check to see if the scale is within boundsif (scale < mMinScale || scale > mMaxScale) {LogManager.getLogger().i(LOG_TAG,""Scale must be within the range of minScale and maxScale"");return;}if (animate) {imageView.post(new AnimatedZoomRunnable(getScale(), scale,focalX, focalY));} else {mSuppMatrix.setScale(scale, scale, focalX, focalY);checkAndDisplayMatrix();}}}@Overridepublic void setScaleType(ScaleType scaleType) {if (isSupportedScaleType(scaleType) && scaleType != mScaleType) {mScaleType = scaleType;// Finally updateupdate();}}@Overridepublic void setZoomable(boolean zoomable) {mZoomEnabled = zoomable;update();}public void update() {ImageView imageView = getImageView();if (null != imageView) {if (mZoomEnabled) {// Make sure we using MATRIX Scale TypesetImageViewScaleTypeMatrix(imageView);// Update the base matrix using the current drawableupdateBaseMatrix(imageView.getDrawable());} else {// Reset the Matrix...resetMatrix();}}}@Overridepublic Matrix getDisplayMatrix() {return new Matrix(getDrawMatrix());}public Matrix getDrawMatrix() {mDrawMatrix.set(mBaseMatrix);mDrawMatrix.postConcat(mSuppMatrix);return mDrawMatrix;}private void cancelFling() {if (null != mCurrentFlingRunnable) {mCurrentFlingRunnable.cancelFling();mCurrentFlingRunnable = null;}}/*** Helper method that simply checks the Matrix, and then displays the result*/private void checkAndDisplayMatrix() {if (checkMatrixBounds()) {setImageViewMatrix(getDrawMatrix());}}private void checkImageViewScaleType() {ImageView imageView = getImageView();/*** PhotoView's getScaleType() will just divert to this.getScaleType() so* only call if we're not attached to a PhotoView.*/if (null != imageView && !(imageView instanceof IPhotoView)) {if (!ScaleType.MATRIX.equals(imageView.getScaleType())) {throw new IllegalStateException(""The ImageView's ScaleType has been changed since attaching a PhotoViewAttacher"");}}}private boolean checkMatrixBounds() {final ImageView imageView = getImageView();if (null == imageView) {return false;}final RectF rect = getDisplayRect(getDrawMatrix());if (null == rect) {return false;}final float height = rect.height(), width = rect.width();float deltaX = 0, deltaY = 0;final int viewHeight = getImageViewHeight(imageView);if (height <= viewHeight) {switch (mScaleType) {case FIT_START:deltaY = -rect.top;break;case FIT_END:deltaY = viewHeight - height - rect.top;break;default:deltaY = (viewHeight - height) / 2 - rect.top;break;}} else if (rect.top > 0) {deltaY = -rect.top;} else if (rect.bottom < viewHeight) {deltaY = viewHeight - rect.bottom;}final int viewWidth = getImageViewWidth(imageView);if (width <= viewWidth) {switch (mScaleType) {case FIT_START:deltaX = -rect.left;break;case FIT_END:deltaX = viewWidth - width - rect.left;break;default:deltaX = (viewWidth - width) / 2 - rect.left;break;}mScrollEdge = EDGE_BOTH;} else if (rect.left > 0) {mScrollEdge = EDGE_LEFT;deltaX = -rect.left;} else if (rect.right < viewWidth) {deltaX = viewWidth - rect.right;mScrollEdge = EDGE_RIGHT;} else {mScrollEdge = EDGE_NONE;}// Finally actually translate the matrixmSuppMatrix.postTranslate(deltaX, deltaY);return true;}/*** Helper method that maps the supplied Matrix to the current Drawable** @param matrix - Matrix to map Drawable against* @return RectF - Displayed Rectangle*/private RectF getDisplayRect(Matrix matrix) {ImageView imageView = getImageView();if (null != imageView) {Drawable d = imageView.getDrawable();if (null != d) {mDisplayRect.set(0, 0, d.getIntrinsicWidth(),d.getIntrinsicHeight());matrix.mapRect(mDisplayRect);return mDisplayRect;}}return null;}public Bitmap getVisibleRectangleBitmap() {ImageView imageView = getImageView();return imageView == null ? null : imageView.getDrawingCache();}@Overridepublic void setZoomTransitionDuration(int milliseconds) {if (milliseconds < 0)milliseconds = DEFAULT_ZOOM_DURATION;this.ZOOM_DURATION = milliseconds;}@Overridepublic IPhotoView getIPhotoViewImplementation() {return this;}/*** Helper method that 'unpacks' a Matrix and returns the required value** @param matrix     - Matrix to unpack* @param whichValue - Which value from Matrix.M* to return* @return float - returned value*/private float getValue(Matrix matrix, int whichValue) {matrix.getValues(mMatrixValues);return mMatrixValues[whichValue];}/*** Resets the Matrix back to FIT_CENTER, and then displays it.s*/private void resetMatrix() {mSuppMatrix.reset();setImageViewMatrix(getDrawMatrix());checkMatrixBounds();}private void setImageViewMatrix(Matrix matrix) {ImageView imageView = getImageView();if (null != imageView) {checkImageViewScaleType();imageView.setImageMatrix(matrix);// Call MatrixChangedListener if neededif (null != mMatrixChangeListener) {RectF displayRect = getDisplayRect(matrix);if (null != displayRect) {mMatrixChangeListener.onMatrixChanged(displayRect);}}}}/*** Calculate Matrix for FIT_CENTER** @param d - Drawable being displayed*/private void updateBaseMatrix(Drawable d) {ImageView imageView = getImageView();if (null == imageView || null == d) {return;}final float viewWidth = getImageViewWidth(imageView);final float viewHeight = getImageViewHeight(imageView);final int drawableWidth = d.getIntrinsicWidth();final int drawableHeight = d.getIntrinsicHeight();mBaseMatrix.reset();final float widthScale = viewWidth / drawableWidth;final float heightScale = viewHeight / drawableHeight;if (mScaleType == ScaleType.CENTER) {mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);} else if (mScaleType == ScaleType.CENTER_CROP) {float scale = Math.max(widthScale, heightScale);mBaseMatrix.postScale(scale, scale);mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);} else if (mScaleType == ScaleType.CENTER_INSIDE) {float scale = Math.min(1.0f, Math.min(widthScale, heightScale));mBaseMatrix.postScale(scale, scale);mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);} else {RectF mTempSrc = new RectF(0, 0, drawableWidth, drawableHeight);RectF mTempDst = new RectF(0, 0, viewWidth, viewHeight);switch (mScaleType) {case FIT_CENTER:mBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.CENTER);break;case FIT_START:mBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.START);break;case FIT_END:mBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.END);break;case FIT_XY:mBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.FILL);break;default:break;}}resetMatrix();}private int getImageViewWidth(ImageView imageView) {if (null == imageView)return 0;return imageView.getWidth() - imageView.getPaddingLeft() - imageView.getPaddingRight();}private int getImageViewHeight(ImageView imageView) {if (null == imageView)return 0;return imageView.getHeight() - imageView.getPaddingTop() - imageView.getPaddingBottom();}/*** Interface definition for a callback to be invoked when the internal Matrix has changed for* this View.** @author Chris Banes*/public static interface OnMatrixChangedListener {/*** Callback for when the Matrix displaying the Drawable has changed. This could be because* the View's bounds have changed, or the user has zoomed.** @param rect - Rectangle displaying the Drawable's new bounds.*/void onMatrixChanged(RectF rect);}/*** Interface definition for a callback to be invoked when the Photo is tapped with a single* tap.** @author Chris Banes*/public static interface OnPhotoTapListener {/*** A callback to receive where the user taps on a photo. You will only receive a callback if* the user taps on the actual photo, tapping on 'whitespace' will be ignored.** @param view - View the user tapped.* @param x    - where the user tapped from the of the Drawable, as percentage of the*             Drawable width.* @param y    - where the user tapped from the top of the Drawable, as percentage of the*             Drawable height.*/void onPhotoTap(View view, float x, float y);}/*** Interface definition for a callback to be invoked when the ImageView is tapped with a single* tap.** @author Chris Banes*/public static interface OnViewTapListener {/*** A callback to receive where the user taps on a ImageView. You will receive a callback if* the user taps anywhere on the view, tapping on 'whitespace' will not be ignored.** @param view - View the user tapped.* @param x    - where the user tapped from the left of the View.* @param y    - where the user tapped from the top of the View.*/void onViewTap(View view, float x, float y);}private class AnimatedZoomRunnable implements Runnable {private final float mFocalX, mFocalY;private final long mStartTime;private final float mZoomStart, mZoomEnd;public AnimatedZoomRunnable(final float currentZoom, final float targetZoom,final float focalX, final float focalY) {mFocalX = focalX;mFocalY = focalY;mStartTime = System.currentTimeMillis();mZoomStart = currentZoom;mZoomEnd = targetZoom;}@Overridepublic void run() {ImageView imageView = getImageView();if (imageView == null) {return;}float t = interpolate();float scale = mZoomStart + t * (mZoomEnd - mZoomStart);float deltaScale = scale / getScale();mSuppMatrix.postScale(deltaScale, deltaScale, mFocalX, mFocalY);checkAndDisplayMatrix();// We haven't hit our target scale yet, so post ourselves againif (t < 1f) {Compat.postOnAnimation(imageView, this);}}private float interpolate() {float t = 1f * (System.currentTimeMillis() - mStartTime) / ZOOM_DURATION;t = Math.min(1f, t);t = sInterpolator.getInterpolation(t);return t;}}private class FlingRunnable implements Runnable {private final ScrollerProxy mScroller;private int mCurrentX, mCurrentY;public FlingRunnable(Context context) {mScroller = ScrollerProxy.getScroller(context);}public void cancelFling() {if (DEBUG) {LogManager.getLogger().d(LOG_TAG, ""Cancel Fling"");}mScroller.forceFinished(true);}public void fling(int viewWidth, int viewHeight, int velocityX,int velocityY) {final RectF rect = getDisplayRect();if (null == rect) {return;}final int startX = Math.round(-rect.left);final int minX, maxX, minY, maxY;if (viewWidth < rect.width()) {minX = 0;maxX = Math.round(rect.width() - viewWidth);} else {minX = maxX = startX;}final int startY = Math.round(-rect.top);if (viewHeight < rect.height()) {minY = 0;maxY = Math.round(rect.height() - viewHeight);} else {minY = maxY = startY;}mCurrentX = startX;mCurrentY = startY;if (DEBUG) {LogManager.getLogger().d(LOG_TAG,""fling. StartX:"" + startX + "" StartY:"" + startY+ "" MaxX:"" + maxX + "" MaxY:"" + maxY);}// If we actually can move, fling the scrollerif (startX != maxX || startY != maxY) {mScroller.fling(startX, startY, velocityX, velocityY, minX,maxX, minY, maxY, 0, 0);}}@Overridepublic void run() {if (mScroller.isFinished()) {return; // remaining post that should not be handled}ImageView imageView = getImageView();if (null != imageView && mScroller.computeScrollOffset()) {final int newX = mScroller.getCurrX();final int newY = mScroller.getCurrY();if (DEBUG) {LogManager.getLogger().d(LOG_TAG,""fling run(). CurrentX:"" + mCurrentX + "" CurrentY:""+ mCurrentY + "" NewX:"" + newX + "" NewY:""+ newY);}mSuppMatrix.postTranslate(mCurrentX - newX, mCurrentY - newY);setImageViewMatrix(getDrawMatrix());mCurrentX = newX;mCurrentY = newY;// Post On animationCompat.postOnAnimation(imageView, this);}}}}",PhotoViewAttacher.java,0
200,"/*** Copyright 2010 Lukasz Szmit <devmail@szmit.eu>Licensed under the Apache License, Version 2.0 (the ""License"");you may not use this file except in compliance with the License.You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an ""AS IS"" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/package com.ptashek.widgets.datetimepicker;import java.util.Calendar;import java.util.Date;import android.content.Context;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.widget.Button;import android.widget.DatePicker;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TimePicker;import android.widget.ViewSwitcher;import android.widget.DatePicker.OnDateChangedListener;import android.widget.TimePicker.OnTimeChangedListener;import org.inaturalist.android.R;public class DateTimePicker extends RelativeLayout implements View.OnClickListener, OnDateChangedListener, OnTimeChangedListener {// DatePicker referenceprivate DatePicker		datePicker;// TimePicker referenceprivate TimePicker		timePicker;// ViewSwitcher referenceprivate ViewSwitcher	viewSwitcher;// Calendar referenceprivate Calendar		mCalendar;// Constructor startpublic DateTimePicker(Context context) {this(context, null);}public DateTimePicker(Context context, AttributeSet attrs) {this(context, attrs, 0);}public DateTimePicker(Context context, AttributeSet attrs, int defStyle) {super(context, attrs, defStyle);// Get LayoutInflater instancefinal LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);// Inflate myselfinflater.inflate(R.layout.datetimepicker, this, true);// Inflate the date and time picker viewsfinal LinearLayout datePickerView = (LinearLayout) inflater.inflate(R.layout.datepicker, null);final LinearLayout timePickerView = (LinearLayout) inflater.inflate(R.layout.timepicker, null);// Grab a Calendar instancemCalendar = Calendar.getInstance();// Grab the ViewSwitcher so we can attach our picker views to itviewSwitcher = (ViewSwitcher) this.findViewById(R.id.DateTimePickerVS);// Init date pickerdatePicker = (DatePicker) datePickerView.findViewById(R.id.DatePicker);datePicker.init(mCalendar.get(Calendar.YEAR), mCalendar.get(Calendar.MONTH), mCalendar.get(Calendar.DAY_OF_MONTH), this);// Init time pickertimePicker = (TimePicker) timePickerView.findViewById(R.id.TimePicker);timePicker.setOnTimeChangedListener(this);timePicker.setIs24HourView(true);// Handle button clicks((Button) findViewById(R.id.SwitchToTime)).setOnClickListener(this); // shows the time picker((Button) findViewById(R.id.SwitchToDate)).setOnClickListener(this); // shows the date picker// Populate ViewSwitcherviewSwitcher.addView(datePickerView, 0);viewSwitcher.addView(timePickerView, 1);}// Constructor end// Called every time the user changes DatePicker valuespublic void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth) {// Update the internal Calendar instancemCalendar.set(year, monthOfYear, dayOfMonth, mCalendar.get(Calendar.HOUR_OF_DAY), mCalendar.get(Calendar.MINUTE));}// Called every time the user changes TimePicker valuespublic void onTimeChanged(TimePicker view, int hourOfDay, int minute) {// Update the internal Calendar instancemCalendar.set(mCalendar.get(Calendar.YEAR), mCalendar.get(Calendar.MONTH), mCalendar.get(Calendar.DAY_OF_MONTH), hourOfDay, minute);}// Handle button clickspublic void onClick(View v) {switch (v.getId()) {case R.id.SwitchToDate:v.setEnabled(false);findViewById(R.id.SwitchToTime).setEnabled(true);viewSwitcher.showPrevious();break;case R.id.SwitchToTime:v.setEnabled(false);findViewById(R.id.SwitchToDate).setEnabled(true);viewSwitcher.showNext();break;}}// Convenience wrapper for internal Calendar instancepublic int get(final int field) {return mCalendar.get(field);}public Date getDate() {return mCalendar.getTime();}// Reset DatePicker, TimePicker and internal Calendar instancepublic void reset() {final Calendar c = Calendar.getInstance();updateDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH));updateTime(c.get(Calendar.HOUR_OF_DAY),c.get(Calendar.MINUTE));}// Convenience wrapper for internal Calendar instancepublic long getDateTimeMillis() {return mCalendar.getTimeInMillis();}// Convenience wrapper for internal TimePicker instancepublic void setIs24HourView(boolean is24HourView) {timePicker.setIs24HourView(is24HourView);}// Convenience wrapper for internal TimePicker instancepublic boolean is24HourView() {return timePicker.is24HourView();}// Convenience wrapper for internal DatePicker instancepublic void updateDate(int year, int monthOfYear, int dayOfMonth) {datePicker.updateDate(year, monthOfYear, dayOfMonth);}// Convenience wrapper for internal TimePicker instancepublic void updateTime(int currentHour, int currentMinute) {timePicker.setCurrentHour(currentHour);timePicker.setCurrentMinute(currentMinute);}}",DateTimePicker.java,0